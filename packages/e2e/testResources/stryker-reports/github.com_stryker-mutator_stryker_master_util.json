{"files":{"/home/runner/work/stryker/stryker/packages/util/src/StrykerError.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":4,"line":9},"start":{"column":68,"line":4}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1","location":{"end":{"column":89,"line":5},"start":{"column":11,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2","location":{"end":{"column":82,"line":5},"start":{"column":37,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3","location":{"end":{"column":87,"line":5},"start":{"column":85,"line":5}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"}],"source":"import { errorToString } from './errors';\n\nexport default class StrykerError extends Error {\n  constructor(message: string, public readonly innerError?: Error) {\n    super(`${message}${innerError ? `. Inner error: ${errorToString(innerError)}` : ''}`);\n    Error.captureStackTrace(this, StrykerError);\n    // TS recommendation: https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, StrykerError.prototype);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/util/src/childProcessAsPromised.ts":{"language":"typescript","mutants":[{"id":"4","location":{"end":{"column":2,"line":6},"start":{"column":16,"line":4}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"import * as childProcess from 'child_process';\nimport { promisify } from 'util';\n\nexport default {\n  exec: promisify(childProcess.exec)\n};\n"},"/home/runner/work/stryker/stryker/packages/util/src/errors.ts":{"language":"typescript","mutants":[{"id":"5","location":{"end":{"column":2,"line":3},"start":{"column":80,"line":1}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"6","location":{"end":{"column":67,"line":2},"start":{"column":10,"line":2}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"7","location":{"end":{"column":67,"line":2},"start":{"column":10,"line":2}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"8","location":{"end":{"column":58,"line":2},"start":{"column":55,"line":2}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"9","location":{"end":{"column":67,"line":2},"start":{"column":59,"line":2}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"10","location":{"end":{"column":2,"line":20},"start":{"column":43,"line":5}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"11","location":{"end":{"column":13,"line":6},"start":{"column":7,"line":6}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"12","location":{"end":{"column":13,"line":6},"start":{"column":7,"line":6}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"13","location":{"end":{"column":13,"line":6},"start":{"column":7,"line":6}},"mutatorName":"BooleanLiteral","replacement":"error","status":"Killed"},{"id":"14","location":{"end":{"column":4,"line":8},"start":{"column":15,"line":6}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"15","location":{"end":{"column":14,"line":7},"start":{"column":12,"line":7}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"16","location":{"end":{"column":37,"line":8},"start":{"column":14,"line":8}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"17","location":{"end":{"column":37,"line":8},"start":{"column":14,"line":8}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"18","location":{"end":{"column":4,"line":10},"start":{"column":39,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"19","location":{"end":{"column":76,"line":9},"start":{"column":12,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"20","location":{"end":{"column":36,"line":10},"start":{"column":14,"line":10}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"21","location":{"end":{"column":36,"line":10},"start":{"column":14,"line":10}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"22","location":{"end":{"column":4,"line":17},"start":{"column":38,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"23","location":{"end":{"column":54,"line":11},"start":{"column":21,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"24","location":{"end":{"column":20,"line":12},"start":{"column":9,"line":12}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"25","location":{"end":{"column":20,"line":12},"start":{"column":9,"line":12}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"26","location":{"end":{"column":6,"line":14},"start":{"column":22,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"27","location":{"end":{"column":53,"line":13},"start":{"column":14,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"28","location":{"end":{"column":6,"line":16},"start":{"column":12,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"29","location":{"end":{"column":4,"line":19},"start":{"column":10,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"export function isErrnoException(error: Error): error is NodeJS.ErrnoException {\n  return typeof (error as NodeJS.ErrnoException).code === 'string';\n}\n\nexport function errorToString(error: any) {\n  if (!error) {\n    return '';\n  } else if (isErrnoException(error)) {\n    return `${error.name}: ${error.code} (${error.syscall}) ${error.stack}`;\n  } else if (error instanceof Error) {\n    const message = `${error.name}: ${error.message}`;\n    if (error.stack) {\n      return `${message}\\n${error.stack.toString()}`;\n    } else {\n      return message;\n    }\n  } else {\n    return error.toString();\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/util/src/fsAsPromised.ts":{"language":"typescript","mutants":[{"id":"30","location":{"end":{"column":2,"line":20},"start":{"column":16,"line":8}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"}],"source":"import * as fs from 'fs';\nimport { promisify } from 'util';\n\n/**\n * This file contains an implementation of fs.promises\n * Note: Can be removed once we drop support for node 8 (and 9).\n */\nexport default {\n  createReadStream: fs.createReadStream,\n  createWriteStream: fs.createWriteStream,\n  exists: promisify(fs.exists),\n  existsSync: fs.existsSync,\n  lstat: promisify(fs.lstat),\n  readdir: promisify(fs.readdir),\n  readdirSync: fs.readdirSync,\n  readFile: promisify(fs.readFile),\n  stat: promisify(fs.stat),\n  symlink: promisify(fs.symlink),\n  writeFile: promisify(fs.writeFile)\n};\n"},"/home/runner/work/stryker/stryker/packages/util/src/stringUtils.ts":{"language":"typescript","mutants":[{"id":"31","location":{"end":{"column":2,"line":7},"start":{"column":51,"line":5}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"32","location":{"end":{"column":33,"line":6},"start":{"column":30,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"/**\n * Consolidates multiple consecutive white spaces into a single space.\n * @param str The string to be normalized\n */\nexport function normalizeWhitespaces(str: string) {\n  return str.replace(/\\s+/g, ' ').trim();\n}\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}}