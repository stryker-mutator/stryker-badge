{"files":{"/home/runner/work/stryker/stryker/packages/typescript/src/TypescriptConfigEditor.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":2,"line":19},"start":{"column":89,"line":15}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"1","location":{"end":{"column":29,"line":16},"start":{"column":25,"line":16}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"2","location":{"end":{"column":24,"line":17},"start":{"column":19,"line":17}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"3","location":{"end":{"column":28,"line":18},"start":{"column":23,"line":18}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"4","location":{"end":{"column":4,"line":27},"start":{"column":73,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"5","location":{"end":{"column":4,"line":40},"start":{"column":73,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"6","location":{"end":{"column":59,"line":30},"start":{"column":9,"line":30}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"7","location":{"end":{"column":59,"line":30},"start":{"column":9,"line":30}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"8","location":{"end":{"column":50,"line":30},"start":{"column":47,"line":30}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"9","location":{"end":{"column":59,"line":30},"start":{"column":51,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"10","location":{"end":{"column":6,"line":37},"start":{"column":61,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"11","location":{"end":{"column":64,"line":32},"start":{"column":21,"line":32}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"12","location":{"end":{"column":19,"line":34},"start":{"column":11,"line":34}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"13","location":{"end":{"column":19,"line":34},"start":{"column":11,"line":34}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"14","location":{"end":{"column":8,"line":36},"start":{"column":21,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"15","location":{"end":{"column":6,"line":39},"start":{"column":12,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"16","location":{"end":{"column":65,"line":38},"start":{"column":22,"line":38}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"17","location":{"end":{"column":4,"line":46},"start":{"column":81,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"18","location":{"end":{"column":4,"line":78},"start":{"column":84,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"19","location":{"end":{"column":68,"line":50},"start":{"column":62,"line":50}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"20","location":{"end":{"column":26,"line":53},"start":{"column":9,"line":53}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"21","location":{"end":{"column":26,"line":53},"start":{"column":9,"line":53}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"22","location":{"end":{"column":6,"line":56},"start":{"column":28,"line":53}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"23","location":{"end":{"column":61,"line":54},"start":{"column":42,"line":54}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"24","location":{"end":{"column":90,"line":55},"start":{"column":23,"line":55}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"25","location":{"end":{"column":6,"line":69},"start":{"column":12,"line":56}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"26","location":{"end":{"column":36,"line":61},"start":{"column":9,"line":61}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"27","location":{"end":{"column":33,"line":64},"start":{"column":11,"line":64}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"28","location":{"end":{"column":33,"line":64},"start":{"column":11,"line":64}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"29","location":{"end":{"column":8,"line":67},"start":{"column":35,"line":64}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"30","location":{"end":{"column":91,"line":66},"start":{"column":24,"line":66}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"31","location":{"end":{"column":6,"line":77},"start":{"column":80,"line":71}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"32","location":{"end":{"column":8,"line":76},"start":{"column":14,"line":72}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"33","location":{"end":{"column":65,"line":73},"start":{"column":31,"line":73}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"34","location":{"end":{"column":50,"line":74},"start":{"column":30,"line":74}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"35","location":{"end":{"column":33,"line":75},"start":{"column":21,"line":75}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"}],"source":"import * as fs from 'fs';\nimport * as os from 'os';\nimport * as path from 'path';\n\nimport { Config, ConfigEditor } from '@stryker-mutator/api/config';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport * as ts from 'typescript';\n\nimport { CONFIG_KEY, CONFIG_KEY_FILE } from './helpers/keys';\nimport { normalizeFileForTypescript, normalizeFileFromTypescript } from './helpers/tsHelpers';\n\n// Override some compiler options that have to do with code quality. When mutating, we're not interested in the resulting code quality\n// See https://github.com/stryker-mutator/stryker/issues/391 for more info\nconst COMPILER_OPTIONS_OVERRIDES: Readonly<Partial<ts.CompilerOptions>> = Object.freeze({\n  allowUnreachableCode: true,\n  noUnusedLocals: false,\n  noUnusedParameters: false\n});\n\nexport default class TypescriptConfigEditor implements ConfigEditor {\n  public static inject = tokens(commonTokens.logger);\n  constructor(private readonly log: Logger) {}\n\n  public edit(strykerConfig: Config, host: ts.ParseConfigHost = ts.sys) {\n    this.loadTSConfig(strykerConfig, host);\n  }\n\n  private loadTSConfig(strykerConfig: Config, host: ts.ParseConfigHost) {\n    if (typeof strykerConfig[CONFIG_KEY_FILE] === 'string') {\n      const tsconfigFileName = path.resolve(strykerConfig[CONFIG_KEY_FILE]);\n      this.log.info(`Loading tsconfig file ${tsconfigFileName}`);\n      const tsconfig = this.readTypescriptConfig(tsconfigFileName, host);\n      if (tsconfig) {\n        strykerConfig[CONFIG_KEY] = this.overrideOptions(tsconfig);\n      }\n    } else {\n      this.log.debug(\"No '%s' specified, not loading any config\", CONFIG_KEY_FILE);\n    }\n  }\n\n  private overrideOptions(tsConfig: ts.ParsedCommandLine): ts.ParsedCommandLine {\n    tsConfig.options = Object.assign({}, tsConfig.options, COMPILER_OPTIONS_OVERRIDES);\n    tsConfig.fileNames = tsConfig.fileNames.map(normalizeFileFromTypescript);\n    return tsConfig;\n  }\n\n  private readTypescriptConfig(tsconfigFileName: string, host: ts.ParseConfigHost) {\n    const configFileBase = normalizeFileForTypescript(path.dirname(tsconfigFileName));\n    const configFileText = fs.readFileSync(tsconfigFileName, 'utf8');\n    const tsconfigFileNameNormalizedForTypeScript = normalizeFileForTypescript(tsconfigFileName);\n    const parseResult = ts.parseConfigFileTextToJson(tsconfigFileNameNormalizedForTypeScript, configFileText);\n    if (parseResult.error) {\n      const error = ts.formatDiagnostics([parseResult.error], diagnosticsHost(configFileBase));\n      throw new Error(`Error while loading tsconfig file '${tsconfigFileName}': ${error}`);\n    } else {\n      const tsconfig = ts.parseJsonConfigFileContent(\n        parseResult.config,\n        host,\n        configFileBase,\n        { project: configFileBase },\n        tsconfigFileNameNormalizedForTypeScript\n      );\n      if (tsconfig.errors.length) {\n        const error = ts.formatDiagnostics(tsconfig.errors, diagnosticsHost(configFileBase));\n        this.log.error(`Error while loading tsconfig file '${tsconfigFileName}': ${error}`);\n      }\n      return tsconfig;\n    }\n\n    function diagnosticsHost(configFileBase: string): ts.FormatDiagnosticsHost {\n      return {\n        getCanonicalFileName: fileName => path.resolve(fileName),\n        getCurrentDirectory: () => configFileBase,\n        getNewLine: () => os.EOL\n      };\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/TypescriptMutator.ts":{"language":"typescript","mutants":[{"id":"36","location":{"end":{"column":2,"line":14},"start":{"column":97,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"37","location":{"end":{"column":41,"line":17},"start":{"column":31,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"38","location":{"end":{"column":4,"line":29},"start":{"column":47,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"39","location":{"end":{"column":6,"line":27},"start":{"column":54,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"40","location":{"end":{"column":102,"line":25},"start":{"column":47,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"41","location":{"end":{"column":102,"line":25},"start":{"column":47,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"42","location":{"end":{"column":78,"line":25},"start":{"column":76,"line":25}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"43","location":{"end":{"column":75,"line":25},"start":{"column":47,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"44","location":{"end":{"column":75,"line":25},"start":{"column":47,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"45","location":{"end":{"column":58,"line":25},"start":{"column":56,"line":25}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"46","location":{"end":{"column":4,"line":43},"start":{"column":90,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"47","location":{"end":{"column":34,"line":32},"start":{"column":9,"line":32}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"48","location":{"end":{"column":34,"line":32},"start":{"column":9,"line":32}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"49","location":{"end":{"column":6,"line":34},"start":{"column":36,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"50","location":{"end":{"column":16,"line":33},"start":{"column":14,"line":33}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"51","location":{"end":{"column":6,"line":42},"start":{"column":12,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"52","location":{"end":{"column":81,"line":35},"start":{"column":51,"line":35}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"53","location":{"end":{"column":90,"line":36},"start":{"column":47,"line":36}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"54","location":{"end":{"column":8,"line":40},"start":{"column":34,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"55","location":{"end":{"column":2,"line":51},"start":{"column":57,"line":46}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"56","location":{"end":{"column":118,"line":49},"start":{"column":5,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"57","location":{"end":{"column":118,"line":49},"start":{"column":5,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"58","location":{"end":{"column":56,"line":48},"start":{"column":54,"line":48}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"59","location":{"end":{"column":53,"line":48},"start":{"column":5,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"60","location":{"end":{"column":53,"line":48},"start":{"column":5,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"61","location":{"end":{"column":18,"line":48},"start":{"column":15,"line":48}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"62","location":{"end":{"column":117,"line":49},"start":{"column":6,"line":49}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"63","location":{"end":{"column":117,"line":49},"start":{"column":6,"line":49}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"64","location":{"end":{"column":37,"line":49},"start":{"column":35,"line":49}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"65","location":{"end":{"column":34,"line":49},"start":{"column":6,"line":49}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"66","location":{"end":{"column":34,"line":49},"start":{"column":6,"line":49}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"67","location":{"end":{"column":24,"line":49},"start":{"column":21,"line":49}},"mutatorName":"EqualityOperator","replacement":"===","status":"CompileError"},{"id":"68","location":{"end":{"column":116,"line":49},"start":{"column":58,"line":49}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"69","location":{"end":{"column":116,"line":49},"start":{"column":70,"line":49}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"70","location":{"end":{"column":116,"line":49},"start":{"column":70,"line":49}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"71","location":{"end":{"column":87,"line":49},"start":{"column":84,"line":49}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"}],"source":"import { File, StrykerOptions } from '@stryker-mutator/api/core';\nimport { Mutant } from '@stryker-mutator/api/mutant';\nimport { commonTokens, Injector, OptionsContext, tokens } from '@stryker-mutator/api/plugin';\nimport * as ts from 'typescript';\n\nimport flatMap = require('lodash.flatmap');\n\nimport { getTSConfig, parseFile } from './helpers/tsHelpers';\nimport { nodeMutators } from './mutator';\nimport NodeMutator from './mutator/NodeMutator';\n\nexport function typescriptMutatorFactory(injector: Injector<OptionsContext>): TypescriptMutator {\n  return injector.provideValue(MUTATORS_TOKEN, nodeMutators).injectClass(TypescriptMutator);\n}\ntypescriptMutatorFactory.inject = tokens(commonTokens.injector);\n\nexport const MUTATORS_TOKEN = 'mutators';\nexport class TypescriptMutator {\n  public static inject = tokens(commonTokens.options, MUTATORS_TOKEN);\n  constructor(private readonly options: StrykerOptions, public readonly mutators: readonly NodeMutator[]) {}\n\n  public mutate(inputFiles: File[]): Mutant[] {\n    const tsConfig = getTSConfig(this.options);\n    const mutants = flatMap(inputFiles, inputFile => {\n      const sourceFile = parseFile(inputFile, tsConfig && tsConfig.options && tsConfig.options.target);\n      return this.mutateForNode(sourceFile, sourceFile);\n    });\n    return mutants;\n  }\n\n  private mutateForNode<T extends ts.Node>(node: T, sourceFile: ts.SourceFile): Mutant[] {\n    if (shouldNodeBeSkipped(node)) {\n      return [];\n    } else {\n      const targetMutators = this.mutators.filter(mutator => mutator.guard(node));\n      const mutants = flatMap(targetMutators, mutator => mutator.mutate(node, sourceFile));\n      node.forEachChild(child => {\n        // It is important that forEachChild does not return a true, otherwise node visiting is halted!\n        mutants.push(...this.mutateForNode(child, sourceFile));\n      });\n      return mutants;\n    }\n  }\n}\n\nconst shouldNodeBeSkipped = (node: ts.Node): boolean => {\n  return (\n    node.kind === ts.SyntaxKind.InterfaceDeclaration ||\n    (node.modifiers !== undefined && node.modifiers.some(modifier => modifier.kind === ts.SyntaxKind.DeclareKeyword))\n  );\n};\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/TypescriptTranspiler.ts":{"language":"typescript","mutants":[{"id":"72","location":{"end":{"column":4,"line":23},"start":{"column":5,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"73","location":{"end":{"column":4,"line":39},"start":{"column":70,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"74","location":{"end":{"column":29,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"75","location":{"end":{"column":29,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"76","location":{"end":{"column":6,"line":29},"start":{"column":31,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"77","location":{"end":{"column":6,"line":31},"start":{"column":12,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"78","location":{"end":{"column":21,"line":33},"start":{"column":9,"line":33}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"79","location":{"end":{"column":21,"line":33},"start":{"column":9,"line":33}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"80","location":{"end":{"column":6,"line":35},"start":{"column":23,"line":33}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"81","location":{"end":{"column":6,"line":38},"start":{"column":12,"line":35}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"82","location":{"end":{"column":4,"line":43},"start":{"column":69,"line":41}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"83","location":{"end":{"column":66,"line":42},"start":{"column":25,"line":42}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"84","location":{"end":{"column":4,"line":55},"start":{"column":67,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"85","location":{"end":{"column":85,"line":47},"start":{"column":49,"line":47}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"86","location":{"end":{"column":85,"line":47},"start":{"column":49,"line":47}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"87","location":{"end":{"column":82,"line":47},"start":{"column":80,"line":47}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"88","location":{"end":{"column":78,"line":47},"start":{"column":50,"line":47}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"89","location":{"end":{"column":78,"line":47},"start":{"column":50,"line":47}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"90","location":{"end":{"column":61,"line":47},"start":{"column":59,"line":47}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"91","location":{"end":{"column":4,"line":78},"start":{"column":67,"line":57}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"92","location":{"end":{"column":31,"line":58},"start":{"column":26,"line":58}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"93","location":{"end":{"column":61,"line":60},"start":{"column":19,"line":60}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"94","location":{"end":{"column":6,"line":75},"start":{"column":27,"line":61}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"95","location":{"end":{"column":35,"line":62},"start":{"column":11,"line":62}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"96","location":{"end":{"column":35,"line":62},"start":{"column":11,"line":62}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"97","location":{"end":{"column":35,"line":62},"start":{"column":11,"line":62}},"mutatorName":"BooleanLiteral","replacement":"isHeaderFile(file.name)","status":"Killed"},{"id":"98","location":{"end":{"column":8,"line":74},"start":{"column":37,"line":62}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"99","location":{"end":{"column":46,"line":63},"start":{"column":13,"line":63}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"100","location":{"end":{"column":46,"line":63},"start":{"column":13,"line":63}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"101","location":{"end":{"column":10,"line":73},"start":{"column":48,"line":63}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"102","location":{"end":{"column":30,"line":65},"start":{"column":15,"line":65}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"103","location":{"end":{"column":30,"line":65},"start":{"column":15,"line":65}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"104","location":{"end":{"column":30,"line":65},"start":{"column":15,"line":65}},"mutatorName":"BooleanLiteral","replacement":"isSingleOutput","status":"Killed"},{"id":"105","location":{"end":{"column":12,"line":69},"start":{"column":32,"line":65}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"106","location":{"end":{"column":86,"line":68},"start":{"column":44,"line":68}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"107","location":{"end":{"column":72,"line":77},"start":{"column":44,"line":77}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"}],"source":"import { File, StrykerOptions } from '@stryker-mutator/api/core';\nimport { LoggerFactoryMethod } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { Transpiler } from '@stryker-mutator/api/transpile';\nimport * as ts from 'typescript';\n\nimport { getProjectDirectory, getTSConfig, guardTypescriptVersion, isHeaderFile } from './helpers/tsHelpers';\nimport TranspileFilter from './transpiler/TranspileFilter';\nimport TranspilingLanguageService from './transpiler/TranspilingLanguageService';\n\nexport default class TypescriptTranspiler implements Transpiler {\n  private languageService: TranspilingLanguageService;\n  private readonly filter: TranspileFilter;\n\n  public static inject = tokens(commonTokens.options, commonTokens.produceSourceMaps, commonTokens.getLogger);\n  constructor(\n    private readonly options: StrykerOptions,\n    private readonly produceSourceMaps: boolean,\n    private readonly getLogger: LoggerFactoryMethod\n  ) {\n    guardTypescriptVersion();\n    this.filter = TranspileFilter.create(this.options);\n  }\n\n  public transpile(files: readonly File[]): Promise<readonly File[]> {\n    const typescriptFiles = this.filterIsIncluded(files);\n    if (this.languageService) {\n      this.languageService.replace(typescriptFiles);\n    } else {\n      this.languageService = this.createLanguageService(typescriptFiles);\n    }\n    const error = this.languageService.getSemanticDiagnostics(typescriptFiles);\n    if (error.length) {\n      return Promise.reject(new Error(error));\n    } else {\n      const resultFiles = this.transpileFiles(files);\n      return Promise.resolve(resultFiles);\n    }\n  }\n\n  private filterIsIncluded(files: readonly File[]): readonly File[] {\n    return files.filter(file => this.filter.isIncluded(file.name));\n  }\n\n  private createLanguageService(typescriptFiles: readonly File[]) {\n    const tsConfig = getTSConfig(this.options);\n    const compilerOptions: ts.CompilerOptions = (tsConfig && tsConfig.options) || {};\n    return new TranspilingLanguageService(\n      compilerOptions,\n      typescriptFiles,\n      getProjectDirectory(this.options),\n      this.produceSourceMaps,\n      this.getLogger\n    );\n  }\n\n  private transpileFiles(files: readonly File[]): readonly File[] {\n    let isSingleOutput = false;\n    const fileDictionary: { [name: string]: File } = {};\n    files.forEach(file => (fileDictionary[file.name] = file));\n    files.forEach(file => {\n      if (!isHeaderFile(file.name)) {\n        if (this.filter.isIncluded(file.name)) {\n          // File is to be transpiled. Only emit if more output is expected.\n          if (!isSingleOutput) {\n            const emitOutput = this.languageService.emit(file.name);\n            isSingleOutput = emitOutput.singleResult;\n            emitOutput.outputFiles.forEach(file => (fileDictionary[file.name] = file));\n          }\n\n          // Remove original file\n          delete fileDictionary[file.name];\n        }\n      }\n    });\n\n    return Object.keys(fileDictionary).map(name => fileDictionary[name]);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/helpers/keys.ts":{"language":"typescript","mutants":[{"id":"108","location":{"end":{"column":46,"line":1},"start":{"column":32,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"109","location":{"end":{"column":37,"line":2},"start":{"column":27,"line":2}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"export const CONFIG_KEY_FILE = 'tsconfigFile';\nexport const CONFIG_KEY = 'tsconfig';\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/helpers/tsHelpers.ts":{"language":"typescript","mutants":[{"id":"110","location":{"end":{"column":2,"line":12},"start":{"column":76,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"111","location":{"end":{"column":88,"line":11},"start":{"column":59,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"112","location":{"end":{"column":88,"line":11},"start":{"column":59,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"113","location":{"end":{"column":68,"line":11},"start":{"column":66,"line":11}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"114","location":{"end":{"column":113,"line":11},"start":{"column":109,"line":11}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"115","location":{"end":{"column":2,"line":20},"start":{"column":62,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"116","location":{"end":{"column":37,"line":19},"start":{"column":34,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"117","location":{"end":{"column":2,"line":28},"start":{"column":63,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"118","location":{"end":{"column":2,"line":32},"start":{"column":88,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"119","location":{"end":{"column":2,"line":36},"start":{"column":62,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"120","location":{"end":{"column":54,"line":35},"start":{"column":23,"line":35}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"121","location":{"end":{"column":54,"line":35},"start":{"column":23,"line":35}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"122","location":{"end":{"column":50,"line":35},"start":{"column":48,"line":35}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"123","location":{"end":{"column":54,"line":35},"start":{"column":51,"line":35}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"124","location":{"end":{"column":2,"line":47},"start":{"column":42,"line":41}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"125","location":{"end":{"column":45,"line":42},"start":{"column":7,"line":42}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"126","location":{"end":{"column":45,"line":42},"start":{"column":7,"line":42}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"127","location":{"end":{"column":45,"line":42},"start":{"column":7,"line":42}},"mutatorName":"BooleanLiteral","replacement":"semver.satisfies(ts.version, '>=2.4')","status":"Killed"},{"id":"128","location":{"end":{"column":44,"line":42},"start":{"column":37,"line":42}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"129","location":{"end":{"column":4,"line":46},"start":{"column":47,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"130","location":{"end":{"column":163,"line":44},"start":{"column":7,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"131","location":{"end":{"column":2,"line":52},"start":{"column":34,"line":49}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"132","location":{"end":{"column":29,"line":50},"start":{"column":12,"line":50}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"133","location":{"end":{"column":29,"line":50},"start":{"column":12,"line":50}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"134","location":{"end":{"column":22,"line":50},"start":{"column":19,"line":50}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Survived"},{"id":"135","location":{"end":{"column":29,"line":50},"start":{"column":23,"line":50}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"136","location":{"end":{"column":24,"line":51},"start":{"column":19,"line":51}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"137","location":{"end":{"column":2,"line":56},"start":{"column":85,"line":54}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"138","location":{"end":{"column":2,"line":66},"start":{"column":25,"line":58}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"139","location":{"end":{"column":44,"line":60},"start":{"column":7,"line":60}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"140","location":{"end":{"column":44,"line":60},"start":{"column":7,"line":60}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"141","location":{"end":{"column":43,"line":60},"start":{"column":36,"line":60}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"142","location":{"end":{"column":4,"line":62},"start":{"column":46,"line":60}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"143","location":{"end":{"column":107,"line":61},"start":{"column":42,"line":61}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"144","location":{"end":{"column":4,"line":65},"start":{"column":10,"line":62}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"145","location":{"end":{"column":42,"line":64},"start":{"column":12,"line":64}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage"},{"id":"146","location":{"end":{"column":18,"line":64},"start":{"column":13,"line":64}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"147","location":{"end":{"column":26,"line":64},"start":{"column":20,"line":64}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"148","location":{"end":{"column":33,"line":64},"start":{"column":28,"line":64}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"149","location":{"end":{"column":41,"line":64},"start":{"column":35,"line":64}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"150","location":{"end":{"column":2,"line":70},"start":{"column":52,"line":68}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"151","location":{"end":{"column":71,"line":69},"start":{"column":30,"line":69}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"152","location":{"end":{"column":2,"line":74},"start":{"column":55,"line":72}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"153","location":{"end":{"column":65,"line":73},"start":{"column":10,"line":73}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"154","location":{"end":{"column":65,"line":73},"start":{"column":10,"line":73}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"155","location":{"end":{"column":38,"line":73},"start":{"column":36,"line":73}},"mutatorName":"LogicalOperator","replacement":"&&","status":"NoCoverage"},{"id":"156","location":{"end":{"column":34,"line":73},"start":{"column":29,"line":73}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"157","location":{"end":{"column":64,"line":73},"start":{"column":58,"line":73}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"158","location":{"end":{"column":2,"line":78},"start":{"column":48,"line":76}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"159","location":{"end":{"column":35,"line":77},"start":{"column":29,"line":77}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"160","location":{"end":{"column":2,"line":85},"start":{"column":48,"line":83}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"161","location":{"end":{"column":35,"line":84},"start":{"column":28,"line":84}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import * as os from 'os';\nimport * as path from 'path';\n\nimport { File, StrykerOptions } from '@stryker-mutator/api/core';\nimport * as semver from 'semver';\nimport * as ts from 'typescript';\n\nimport { CONFIG_KEY, CONFIG_KEY_FILE } from './keys';\n\nexport function parseFile(file: File, target: ts.ScriptTarget | undefined) {\n  return ts.createSourceFile(file.name, file.textContent, target || ts.ScriptTarget.ES5, /*setParentNodes*/ true);\n}\n\n/**\n * For some reason, typescript on windows doesn't like back slashes\n * @param fileName The file name to be normalized\n */\nexport function normalizeFileForTypescript(fileName: string) {\n  return fileName.replace(/\\\\/g, '/');\n}\n\n/**\n * For some reason, typescript on windows doesn't like back slashes\n * @param fileName The file name to be normalized\n */\nexport function normalizeFileFromTypescript(fileName: string) {\n  return path.normalize(fileName);\n}\n\nexport function getTSConfig(options: StrykerOptions): ts.ParsedCommandLine | undefined {\n  return options[CONFIG_KEY];\n}\n\nexport function getProjectDirectory(options: StrykerOptions) {\n  return path.dirname(options[CONFIG_KEY_FILE] || '.');\n}\n\n/**\n * Verifies that the installed version of typescript satisfies '>=2.4` and otherwise: throws an exception\n */\nexport function guardTypescriptVersion() {\n  if (!semver.satisfies(ts.version, '>=2.4')) {\n    throw new Error(\n      `Installed typescript version ${ts.version} is not supported by stryker-typescript. Please install version 2.5 or higher (\\`npm install typescript@^2.5\\`).`\n    );\n  }\n}\n\nconst printer = ts.createPrinter({\n  newLine: os.EOL === '\\r\\n' ? ts.NewLineKind.CarriageReturnLineFeed : ts.NewLineKind.LineFeed,\n  removeComments: false\n});\n\nexport function printNode(node: ts.Node, originalSourceFile: ts.SourceFile): string {\n  return printer.printNode(ts.EmitHint.Unspecified, node, originalSourceFile);\n}\n\nfunction tsExtensions() {\n  // Since ts 2.5 the ts.Extension enum is a string-based enum\n  if (semver.satisfies(ts.version, '>=2.5')) {\n    return Object.keys(ts.Extension).map(extension => ts.Extension[extension as keyof typeof ts.Extension]);\n  } else {\n    // We know that pre 2.5 should have these extensions:\n    return ['.ts', '.tsx', '.js', '.jsx'];\n  }\n}\n\nexport function isTypescriptFile(fileName: string) {\n  return tsExtensions().some(extension => fileName.endsWith(extension));\n}\n\nexport function isJavaScriptFile(file: ts.OutputFile) {\n  return file.name.endsWith('.js') || file.name.endsWith('.jsx');\n}\n\nexport function isMapFile(file: ts.OutputFile) {\n  return file.name.endsWith('.map');\n}\n\n/**\n * Determines whether or not given file is a typescript header file (*.d.ts)\n */\nexport function isHeaderFile(fileName: string) {\n  return fileName.endsWith('.d.ts');\n}\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/index.ts":{"language":"typescript","mutants":[{"id":"162","location":{"end":{"column":2,"line":11},"start":{"column":31,"line":7}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage"},{"id":"163","location":{"end":{"column":59,"line":8},"start":{"column":47,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"164","location":{"end":{"column":57,"line":9},"start":{"column":45,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"165","location":{"end":{"column":56,"line":10},"start":{"column":44,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"}],"source":"import { declareClassPlugin, declareFactoryPlugin, PluginKind } from '@stryker-mutator/api/plugin';\n\nimport TypescriptConfigEditor from './TypescriptConfigEditor';\nimport { typescriptMutatorFactory } from './TypescriptMutator';\nimport TypescriptTranspiler from './TypescriptTranspiler';\n\nexport const strykerPlugins = [\n  declareClassPlugin(PluginKind.ConfigEditor, 'typescript', TypescriptConfigEditor),\n  declareClassPlugin(PluginKind.Transpiler, 'typescript', TypescriptTranspiler),\n  declareFactoryPlugin(PluginKind.Mutator, 'typescript', typescriptMutatorFactory)\n];\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/mutator/ArithmeticOperatorMutator.ts":{"language":"typescript","mutants":[{"id":"166","location":{"end":{"column":2,"line":11},"start":{"column":43,"line":5}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"167","location":{"end":{"column":33,"line":6},"start":{"column":30,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"168","location":{"end":{"column":34,"line":7},"start":{"column":31,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"169","location":{"end":{"column":34,"line":8},"start":{"column":31,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"170","location":{"end":{"column":37,"line":9},"start":{"column":34,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"171","location":{"end":{"column":36,"line":10},"start":{"column":33,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"172","location":{"end":{"column":45,"line":14},"start":{"column":25,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"173","location":{"end":{"column":4,"line":18},"start":{"column":60,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"174","location":{"end":{"column":56,"line":17},"start":{"column":12,"line":17}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"175","location":{"end":{"column":56,"line":17},"start":{"column":12,"line":17}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"176","location":{"end":{"column":25,"line":17},"start":{"column":22,"line":17}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"177","location":{"end":{"column":4,"line":27},"start":{"column":77,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"178","location":{"end":{"column":20,"line":22},"start":{"column":9,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"179","location":{"end":{"column":20,"line":22},"start":{"column":9,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"180","location":{"end":{"column":6,"line":24},"start":{"column":22,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"181","location":{"end":{"column":57,"line":23},"start":{"column":14,"line":23}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"182","location":{"end":{"column":56,"line":23},"start":{"column":15,"line":23}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"183","location":{"end":{"column":6,"line":26},"start":{"column":12,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"184","location":{"end":{"column":16,"line":25},"start":{"column":14,"line":25}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"}],"source":"import * as ts from 'typescript';\n\nimport NodeMutator, { NodeReplacement } from './NodeMutator';\n\nconst replaceTokens: ts.MapLike<string> = {\n  [ts.SyntaxKind.PlusToken]: '-',\n  [ts.SyntaxKind.MinusToken]: '+',\n  [ts.SyntaxKind.SlashToken]: '*',\n  [ts.SyntaxKind.AsteriskToken]: '/',\n  [ts.SyntaxKind.PercentToken]: '*'\n};\n\nexport default class ArithmeticOperatorMutator extends NodeMutator<ts.BinaryExpression> {\n  public name: string = 'ArithmeticOperator';\n\n  public guard(node: ts.Node): node is ts.BinaryExpression {\n    return node.kind === ts.SyntaxKind.BinaryExpression;\n  }\n\n  public identifyReplacements(node: ts.BinaryExpression): NodeReplacement[] {\n    const replacement = replaceTokens[node.operatorToken.kind];\n    if (replacement) {\n      return [{ node: node.operatorToken, replacement }];\n    } else {\n      return [];\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/mutator/ArrayDeclarationMutator.ts":{"language":"typescript","mutants":[{"id":"185","location":{"end":{"column":35,"line":6},"start":{"column":17,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"186","location":{"end":{"column":4,"line":12},"start":{"column":105,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"187","location":{"end":{"column":148,"line":10},"start":{"column":7,"line":10}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"188","location":{"end":{"column":148,"line":10},"start":{"column":7,"line":10}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"189","location":{"end":{"column":106,"line":10},"start":{"column":104,"line":10}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"190","location":{"end":{"column":103,"line":10},"start":{"column":7,"line":10}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"191","location":{"end":{"column":103,"line":10},"start":{"column":7,"line":10}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"192","location":{"end":{"column":60,"line":10},"start":{"column":58,"line":10}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"193","location":{"end":{"column":57,"line":10},"start":{"column":7,"line":10}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"194","location":{"end":{"column":57,"line":10},"start":{"column":7,"line":10}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"195","location":{"end":{"column":20,"line":10},"start":{"column":17,"line":10}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"196","location":{"end":{"column":103,"line":10},"start":{"column":61,"line":10}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"197","location":{"end":{"column":103,"line":10},"start":{"column":61,"line":10}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"198","location":{"end":{"column":74,"line":10},"start":{"column":71,"line":10}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"199","location":{"end":{"column":148,"line":10},"start":{"column":107,"line":10}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"200","location":{"end":{"column":148,"line":10},"start":{"column":107,"line":10}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"201","location":{"end":{"column":120,"line":10},"start":{"column":117,"line":10}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"202","location":{"end":{"column":4,"line":36},"start":{"column":24,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"203","location":{"end":{"column":59,"line":18},"start":{"column":9,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"204","location":{"end":{"column":59,"line":18},"start":{"column":9,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"205","location":{"end":{"column":22,"line":18},"start":{"column":19,"line":18}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"206","location":{"end":{"column":6,"line":24},"start":{"column":61,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"207","location":{"end":{"column":31,"line":19},"start":{"column":11,"line":19}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"208","location":{"end":{"column":31,"line":19},"start":{"column":11,"line":19}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"209","location":{"end":{"column":8,"line":21},"start":{"column":33,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"210","location":{"end":{"column":45,"line":20},"start":{"column":16,"line":20}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"211","location":{"end":{"column":44,"line":20},"start":{"column":17,"line":20}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"212","location":{"end":{"column":42,"line":20},"start":{"column":38,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"213","location":{"end":{"column":8,"line":23},"start":{"column":14,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"214","location":{"end":{"column":63,"line":22},"start":{"column":16,"line":22}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"215","location":{"end":{"column":62,"line":22},"start":{"column":17,"line":22}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"216","location":{"end":{"column":60,"line":22},"start":{"column":38,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"217","location":{"end":{"column":111,"line":24},"start":{"column":16,"line":24}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"218","location":{"end":{"column":111,"line":24},"start":{"column":16,"line":24}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"219","location":{"end":{"column":61,"line":24},"start":{"column":59,"line":24}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"220","location":{"end":{"column":29,"line":24},"start":{"column":26,"line":24}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Survived"},{"id":"221","location":{"end":{"column":86,"line":24},"start":{"column":83,"line":24}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"222","location":{"end":{"column":6,"line":27},"start":{"column":113,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"223","location":{"end":{"column":16,"line":26},"start":{"column":14,"line":26}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"224","location":{"end":{"column":6,"line":35},"start":{"column":12,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"225","location":{"end":{"column":69,"line":28},"start":{"column":11,"line":28}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"226","location":{"end":{"column":69,"line":28},"start":{"column":11,"line":28}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"227","location":{"end":{"column":61,"line":28},"start":{"column":58,"line":28}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"228","location":{"end":{"column":69,"line":28},"start":{"column":62,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"229","location":{"end":{"column":8,"line":32},"start":{"column":71,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"230","location":{"end":{"column":68,"line":29},"start":{"column":27,"line":29}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"231","location":{"end":{"column":68,"line":29},"start":{"column":27,"line":29}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"232","location":{"end":{"column":40,"line":29},"start":{"column":37,"line":29}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"233","location":{"end":{"column":77,"line":29},"start":{"column":71,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"234","location":{"end":{"column":82,"line":29},"start":{"column":80,"line":29}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"235","location":{"end":{"column":72,"line":30},"start":{"column":33,"line":30}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"236","location":{"end":{"column":72,"line":30},"start":{"column":33,"line":30}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"237","location":{"end":{"column":50,"line":30},"start":{"column":48,"line":30}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"238","location":{"end":{"column":77,"line":30},"start":{"column":75,"line":30}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"239","location":{"end":{"column":84,"line":30},"start":{"column":80,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"240","location":{"end":{"column":80,"line":31},"start":{"column":16,"line":31}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"241","location":{"end":{"column":79,"line":31},"start":{"column":17,"line":31}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"242","location":{"end":{"column":77,"line":31},"start":{"column":38,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"243","location":{"end":{"column":8,"line":34},"start":{"column":14,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"244","location":{"end":{"column":18,"line":33},"start":{"column":16,"line":33}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"}],"source":"import * as ts from 'typescript';\n\nimport NodeMutator, { NodeReplacement } from './NodeMutator';\n\nexport default class ArrayDeclarationMutator extends NodeMutator<ts.ArrayLiteralExpression | ts.CallExpression | ts.NewExpression> {\n  public name = 'ArrayDeclaration';\n\n  public guard(node: ts.Node): node is ts.ArrayLiteralExpression | ts.CallExpression | ts.NewExpression {\n    return (\n      node.kind === ts.SyntaxKind.ArrayLiteralExpression || node.kind === ts.SyntaxKind.CallExpression || node.kind === ts.SyntaxKind.NewExpression\n    );\n  }\n\n  protected identifyReplacements(\n    node: ts.ArrayLiteralExpression | ts.CallExpression | ts.NewExpression,\n    sourceFile: ts.SourceFile\n  ): NodeReplacement[] {\n    if (node.kind === ts.SyntaxKind.ArrayLiteralExpression) {\n      if (node.elements.length) {\n        return [{ node, replacement: '[]' }];\n      } else {\n        return [{ node, replacement: '[\"Stryker was here\"]' }];\n      }\n    } else if (node.kind === ts.SyntaxKind.CallExpression && node.expression.kind !== ts.SyntaxKind.Identifier) {\n      // extra guard in case of a function call expression\n      return [];\n    } else {\n      if (node.expression.getFullText(sourceFile).trim() === 'Array') {\n        const newPrefix = node.kind === ts.SyntaxKind.NewExpression ? 'new ' : '';\n        const mutatedCallArgs = node.arguments && node.arguments.length ? '' : '[]';\n        return [{ node, replacement: `${newPrefix}Array(${mutatedCallArgs})` }];\n      } else {\n        return [];\n      }\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/mutator/ArrowFunctionMutator.ts":{"language":"typescript","mutants":[{"id":"245","location":{"end":{"column":32,"line":6},"start":{"column":17,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"246","location":{"end":{"column":4,"line":10},"start":{"column":57,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"247","location":{"end":{"column":53,"line":9},"start":{"column":12,"line":9}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"248","location":{"end":{"column":53,"line":9},"start":{"column":12,"line":9}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"249","location":{"end":{"column":25,"line":9},"start":{"column":22,"line":9}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"250","location":{"end":{"column":4,"line":19},"start":{"column":75,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"251","location":{"end":{"column":45,"line":13},"start":{"column":9,"line":13}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"252","location":{"end":{"column":45,"line":13},"start":{"column":9,"line":13}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"253","location":{"end":{"column":25,"line":13},"start":{"column":22,"line":13}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"254","location":{"end":{"column":6,"line":16},"start":{"column":47,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"255","location":{"end":{"column":16,"line":15},"start":{"column":14,"line":15}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"256","location":{"end":{"column":58,"line":18},"start":{"column":12,"line":18}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"257","location":{"end":{"column":57,"line":18},"start":{"column":13,"line":18}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"258","location":{"end":{"column":55,"line":18},"start":{"column":38,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import * as ts from 'typescript';\n\nimport NodeMutator, { NodeReplacement } from './NodeMutator';\n\nexport default class ArrowFunctionMutator extends NodeMutator<ts.ArrowFunction> {\n  public name = 'ArrowFunction';\n\n  public guard(node: ts.Node): node is ts.ArrowFunction {\n    return node.kind === ts.SyntaxKind.ArrowFunction;\n  }\n\n  protected identifyReplacements(fn: ts.ArrowFunction): NodeReplacement[] {\n    if (fn.body.kind === ts.SyntaxKind.Block) {\n      // This case is already handled by the BlockMutator.\n      return [];\n    }\n\n    return [{ node: fn, replacement: '() => undefined' }];\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/mutator/BlockStatementMutator.ts":{"language":"typescript","mutants":[{"id":"259","location":{"end":{"column":33,"line":6},"start":{"column":17,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"260","location":{"end":{"column":4,"line":10},"start":{"column":49,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"261","location":{"end":{"column":45,"line":9},"start":{"column":12,"line":9}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"262","location":{"end":{"column":45,"line":9},"start":{"column":12,"line":9}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"263","location":{"end":{"column":25,"line":9},"start":{"column":22,"line":9}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"264","location":{"end":{"column":4,"line":18},"start":{"column":70,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"265","location":{"end":{"column":32,"line":13},"start":{"column":9,"line":13}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"266","location":{"end":{"column":32,"line":13},"start":{"column":9,"line":13}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"267","location":{"end":{"column":6,"line":15},"start":{"column":34,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"268","location":{"end":{"column":50,"line":14},"start":{"column":14,"line":14}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"269","location":{"end":{"column":49,"line":14},"start":{"column":15,"line":14}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"270","location":{"end":{"column":47,"line":14},"start":{"column":43,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"271","location":{"end":{"column":6,"line":17},"start":{"column":12,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"272","location":{"end":{"column":16,"line":16},"start":{"column":14,"line":16}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"}],"source":"import * as ts from 'typescript';\n\nimport NodeMutator, { NodeReplacement } from './NodeMutator';\n\nexport default class BlockStatementMutator extends NodeMutator<ts.Block> {\n  public name = 'BlockStatement';\n\n  public guard(node: ts.Node): node is ts.Block {\n    return node.kind === ts.SyntaxKind.Block;\n  }\n\n  protected identifyReplacements(block: ts.Block): NodeReplacement[] {\n    if (block.statements.length) {\n      return [{ node: block, replacement: '{}' }];\n    } else {\n      return [];\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/mutator/BooleanLiteralMutator.ts":{"language":"typescript","mutants":[{"id":"273","location":{"end":{"column":41,"line":8},"start":{"column":25,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"274","location":{"end":{"column":4,"line":12},"start":{"column":85,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"275","location":{"end":{"column":148,"line":11},"start":{"column":12,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"276","location":{"end":{"column":148,"line":11},"start":{"column":12,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"277","location":{"end":{"column":98,"line":11},"start":{"column":96,"line":11}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"278","location":{"end":{"column":95,"line":11},"start":{"column":12,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"279","location":{"end":{"column":95,"line":11},"start":{"column":12,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"280","location":{"end":{"column":55,"line":11},"start":{"column":53,"line":11}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"281","location":{"end":{"column":52,"line":11},"start":{"column":12,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"282","location":{"end":{"column":52,"line":11},"start":{"column":12,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"283","location":{"end":{"column":25,"line":11},"start":{"column":22,"line":11}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"284","location":{"end":{"column":95,"line":11},"start":{"column":56,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"285","location":{"end":{"column":95,"line":11},"start":{"column":56,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"286","location":{"end":{"column":69,"line":11},"start":{"column":66,"line":11}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"287","location":{"end":{"column":148,"line":11},"start":{"column":99,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"288","location":{"end":{"column":148,"line":11},"start":{"column":99,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"289","location":{"end":{"column":112,"line":11},"start":{"column":109,"line":11}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"290","location":{"end":{"column":4,"line":24},"start":{"column":132,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"291","location":{"end":{"column":49,"line":15},"start":{"column":9,"line":15}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"292","location":{"end":{"column":49,"line":15},"start":{"column":9,"line":15}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"293","location":{"end":{"column":22,"line":15},"start":{"column":19,"line":15}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"294","location":{"end":{"column":6,"line":17},"start":{"column":51,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"295","location":{"end":{"column":45,"line":16},"start":{"column":14,"line":16}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"296","location":{"end":{"column":44,"line":16},"start":{"column":15,"line":16}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"297","location":{"end":{"column":42,"line":16},"start":{"column":36,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"298","location":{"end":{"column":55,"line":17},"start":{"column":16,"line":17}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"299","location":{"end":{"column":55,"line":17},"start":{"column":16,"line":17}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"300","location":{"end":{"column":29,"line":17},"start":{"column":26,"line":17}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"301","location":{"end":{"column":6,"line":19},"start":{"column":57,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"302","location":{"end":{"column":46,"line":18},"start":{"column":14,"line":18}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"303","location":{"end":{"column":45,"line":18},"start":{"column":15,"line":18}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"304","location":{"end":{"column":43,"line":18},"start":{"column":36,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"305","location":{"end":{"column":117,"line":19},"start":{"column":16,"line":19}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"306","location":{"end":{"column":117,"line":19},"start":{"column":16,"line":19}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"307","location":{"end":{"column":68,"line":19},"start":{"column":66,"line":19}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"308","location":{"end":{"column":29,"line":19},"start":{"column":26,"line":19}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"309","location":{"end":{"column":86,"line":19},"start":{"column":83,"line":19}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"310","location":{"end":{"column":6,"line":21},"start":{"column":119,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"311","location":{"end":{"column":74,"line":20},"start":{"column":14,"line":20}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"312","location":{"end":{"column":73,"line":20},"start":{"column":15,"line":20}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"313","location":{"end":{"column":6,"line":23},"start":{"column":12,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"314","location":{"end":{"column":16,"line":22},"start":{"column":14,"line":22}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"}],"source":"import * as ts from 'typescript';\n\nimport { printNode } from '../helpers/tsHelpers';\n\nimport NodeMutator, { NodeReplacement } from './NodeMutator';\n\nexport default class BooleanLiteralMutator extends NodeMutator<ts.BooleanLiteral | ts.PrefixUnaryExpression> {\n  public name: string = 'BooleanLiteral';\n\n  public guard(node: ts.Node): node is ts.BooleanLiteral | ts.PrefixUnaryExpression {\n    return node.kind === ts.SyntaxKind.FalseKeyword || node.kind === ts.SyntaxKind.TrueKeyword || node.kind === ts.SyntaxKind.PrefixUnaryExpression;\n  }\n\n  protected identifyReplacements(node: ts.BooleanLiteral | ts.PrefixUnaryExpression, sourceFile: ts.SourceFile): NodeReplacement[] {\n    if (node.kind === ts.SyntaxKind.FalseKeyword) {\n      return [{ node, replacement: 'true' }];\n    } else if (node.kind === ts.SyntaxKind.TrueKeyword) {\n      return [{ node, replacement: 'false' }];\n    } else if (node.kind === ts.SyntaxKind.PrefixUnaryExpression && node.operator === ts.SyntaxKind.ExclamationToken) {\n      return [{ node, replacement: printNode(node.operand, sourceFile) }];\n    } else {\n      return [];\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/mutator/ConditionalExpressionMutator.ts":{"language":"typescript","mutants":[{"id":"315","location":{"end":{"column":2,"line":12},"start":{"column":82,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"316","location":{"end":{"column":51,"line":11},"start":{"column":10,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"317","location":{"end":{"column":51,"line":11},"start":{"column":10,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"318","location":{"end":{"column":23,"line":11},"start":{"column":20,"line":11}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"319","location":{"end":{"column":40,"line":17},"start":{"column":17,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"320","location":{"end":{"column":4,"line":29},"start":{"column":60,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"321","location":{"end":{"column":49,"line":27},"start":{"column":7,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"322","location":{"end":{"column":49,"line":27},"start":{"column":7,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"323","location":{"end":{"column":49,"line":26},"start":{"column":47,"line":26}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"324","location":{"end":{"column":46,"line":26},"start":{"column":7,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"325","location":{"end":{"column":46,"line":26},"start":{"column":7,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"326","location":{"end":{"column":50,"line":25},"start":{"column":48,"line":25}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"327","location":{"end":{"column":47,"line":25},"start":{"column":7,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"328","location":{"end":{"column":47,"line":25},"start":{"column":7,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"329","location":{"end":{"column":49,"line":24},"start":{"column":47,"line":24}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"330","location":{"end":{"column":46,"line":24},"start":{"column":7,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"331","location":{"end":{"column":46,"line":24},"start":{"column":7,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"332","location":{"end":{"column":51,"line":23},"start":{"column":49,"line":23}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"333","location":{"end":{"column":48,"line":23},"start":{"column":7,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"334","location":{"end":{"column":48,"line":23},"start":{"column":7,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"335","location":{"end":{"column":48,"line":22},"start":{"column":46,"line":22}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"336","location":{"end":{"column":45,"line":22},"start":{"column":7,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"337","location":{"end":{"column":45,"line":22},"start":{"column":7,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"338","location":{"end":{"column":54,"line":21},"start":{"column":52,"line":21}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"339","location":{"end":{"column":51,"line":21},"start":{"column":7,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"340","location":{"end":{"column":51,"line":21},"start":{"column":7,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"341","location":{"end":{"column":20,"line":21},"start":{"column":17,"line":21}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"342","location":{"end":{"column":45,"line":22},"start":{"column":7,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"343","location":{"end":{"column":45,"line":22},"start":{"column":7,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"344","location":{"end":{"column":20,"line":22},"start":{"column":17,"line":22}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"345","location":{"end":{"column":48,"line":23},"start":{"column":7,"line":23}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"346","location":{"end":{"column":48,"line":23},"start":{"column":7,"line":23}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"347","location":{"end":{"column":20,"line":23},"start":{"column":17,"line":23}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"348","location":{"end":{"column":46,"line":24},"start":{"column":7,"line":24}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"349","location":{"end":{"column":46,"line":24},"start":{"column":7,"line":24}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"350","location":{"end":{"column":20,"line":24},"start":{"column":17,"line":24}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"351","location":{"end":{"column":47,"line":25},"start":{"column":7,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"352","location":{"end":{"column":47,"line":25},"start":{"column":7,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"353","location":{"end":{"column":20,"line":25},"start":{"column":17,"line":25}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"354","location":{"end":{"column":46,"line":26},"start":{"column":7,"line":26}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"355","location":{"end":{"column":46,"line":26},"start":{"column":7,"line":26}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"356","location":{"end":{"column":20,"line":26},"start":{"column":17,"line":26}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"357","location":{"end":{"column":49,"line":27},"start":{"column":7,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"358","location":{"end":{"column":49,"line":27},"start":{"column":7,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"359","location":{"end":{"column":20,"line":27},"start":{"column":17,"line":27}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"360","location":{"end":{"column":4,"line":44},"start":{"column":53,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"361","location":{"end":{"column":21,"line":40},"start":{"column":7,"line":39}},"mutatorName":"ConditionalExpression","replacement":"case ts.SyntaxKind.DefaultClause:","status":"Killed"},{"id":"362","location":{"end":{"column":20,"line":40},"start":{"column":16,"line":40}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"363","location":{"end":{"column":22,"line":42},"start":{"column":7,"line":41}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"CompileError"},{"id":"364","location":{"end":{"column":21,"line":42},"start":{"column":16,"line":42}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"365","location":{"end":{"column":4,"line":58},"start":{"column":77,"line":46}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"366","location":{"end":{"column":21,"line":54},"start":{"column":7,"line":53}},"mutatorName":"ConditionalExpression","replacement":"case ts.SyntaxKind.EqualsToken:","status":"Killed"},{"id":"367","location":{"end":{"column":20,"line":54},"start":{"column":16,"line":54}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"368","location":{"end":{"column":22,"line":56},"start":{"column":7,"line":55}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"CompileError"},{"id":"369","location":{"end":{"column":21,"line":56},"start":{"column":16,"line":56}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"370","location":{"end":{"column":4,"line":103},"start":{"column":24,"line":63}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"371","location":{"end":{"column":94,"line":64},"start":{"column":9,"line":64}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"372","location":{"end":{"column":94,"line":64},"start":{"column":9,"line":64}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"373","location":{"end":{"column":51,"line":64},"start":{"column":49,"line":64}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"374","location":{"end":{"column":22,"line":64},"start":{"column":19,"line":64}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"375","location":{"end":{"column":65,"line":64},"start":{"column":62,"line":64}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"376","location":{"end":{"column":6,"line":66},"start":{"column":96,"line":64}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"377","location":{"end":{"column":63,"line":65},"start":{"column":14,"line":65}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"378","location":{"end":{"column":62,"line":65},"start":{"column":15,"line":65}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"379","location":{"end":{"column":60,"line":65},"start":{"column":53,"line":65}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"380","location":{"end":{"column":56,"line":66},"start":{"column":16,"line":66}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"381","location":{"end":{"column":56,"line":66},"start":{"column":16,"line":66}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"382","location":{"end":{"column":29,"line":66},"start":{"column":26,"line":66}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"383","location":{"end":{"column":6,"line":75},"start":{"column":58,"line":66}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"384","location":{"end":{"column":25,"line":67},"start":{"column":11,"line":67}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"385","location":{"end":{"column":25,"line":67},"start":{"column":11,"line":67}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"386","location":{"end":{"column":8,"line":69},"start":{"column":27,"line":67}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"387","location":{"end":{"column":64,"line":68},"start":{"column":16,"line":68}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"388","location":{"end":{"column":63,"line":68},"start":{"column":17,"line":68}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"389","location":{"end":{"column":61,"line":68},"start":{"column":54,"line":68}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"390","location":{"end":{"column":8,"line":74},"start":{"column":14,"line":69}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"391","location":{"end":{"column":39,"line":73},"start":{"column":16,"line":73}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"392","location":{"end":{"column":38,"line":73},"start":{"column":17,"line":73}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"393","location":{"end":{"column":55,"line":75},"start":{"column":16,"line":75}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"394","location":{"end":{"column":55,"line":75},"start":{"column":16,"line":75}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"395","location":{"end":{"column":29,"line":75},"start":{"column":26,"line":75}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"396","location":{"end":{"column":6,"line":80},"start":{"column":57,"line":75}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"397","location":{"end":{"column":8,"line":79},"start":{"column":14,"line":76}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"398","location":{"end":{"column":55,"line":77},"start":{"column":9,"line":77}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"399","location":{"end":{"column":53,"line":77},"start":{"column":47,"line":77}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"400","location":{"end":{"column":56,"line":78},"start":{"column":9,"line":78}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"401","location":{"end":{"column":54,"line":78},"start":{"column":47,"line":78}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"402","location":{"end":{"column":99,"line":80},"start":{"column":16,"line":80}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"403","location":{"end":{"column":99,"line":80},"start":{"column":16,"line":80}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"404","location":{"end":{"column":57,"line":80},"start":{"column":55,"line":80}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"405","location":{"end":{"column":29,"line":80},"start":{"column":26,"line":80}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"406","location":{"end":{"column":71,"line":80},"start":{"column":68,"line":80}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"407","location":{"end":{"column":6,"line":89},"start":{"column":101,"line":80}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"408","location":{"end":{"column":37,"line":82},"start":{"column":11,"line":82}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"409","location":{"end":{"column":37,"line":82},"start":{"column":11,"line":82}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"410","location":{"end":{"column":35,"line":82},"start":{"column":34,"line":82}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"411","location":{"end":{"column":35,"line":82},"start":{"column":34,"line":82}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"412","location":{"end":{"column":8,"line":86},"start":{"column":39,"line":82}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"413","location":{"end":{"column":73,"line":83},"start":{"column":71,"line":83}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"414","location":{"end":{"column":116,"line":83},"start":{"column":114,"line":83}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"415","location":{"end":{"column":39,"line":85},"start":{"column":16,"line":85}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"416","location":{"end":{"column":38,"line":85},"start":{"column":17,"line":85}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"417","location":{"end":{"column":8,"line":88},"start":{"column":14,"line":86}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"418","location":{"end":{"column":18,"line":87},"start":{"column":16,"line":87}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"419","location":{"end":{"column":6,"line":102},"start":{"column":12,"line":89}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"420","location":{"end":{"column":51,"line":93},"start":{"column":9,"line":91}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"421","location":{"end":{"column":51,"line":93},"start":{"column":9,"line":91}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"422","location":{"end":{"column":91,"line":92},"start":{"column":89,"line":92}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"423","location":{"end":{"column":62,"line":91},"start":{"column":60,"line":91}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"424","location":{"end":{"column":58,"line":91},"start":{"column":10,"line":91}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"425","location":{"end":{"column":58,"line":91},"start":{"column":10,"line":91}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"426","location":{"end":{"column":24,"line":91},"start":{"column":22,"line":91}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"427","location":{"end":{"column":87,"line":92},"start":{"column":10,"line":92}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"428","location":{"end":{"column":87,"line":92},"start":{"column":10,"line":92}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"429","location":{"end":{"column":46,"line":92},"start":{"column":44,"line":92}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"430","location":{"end":{"column":43,"line":92},"start":{"column":10,"line":92}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"431","location":{"end":{"column":43,"line":92},"start":{"column":10,"line":92}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"432","location":{"end":{"column":24,"line":92},"start":{"column":22,"line":92}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"433","location":{"end":{"column":8,"line":96},"start":{"column":9,"line":94}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"434","location":{"end":{"column":18,"line":95},"start":{"column":16,"line":95}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"435","location":{"end":{"column":8,"line":101},"start":{"column":14,"line":98}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"436","location":{"end":{"column":39,"line":99},"start":{"column":9,"line":99}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"437","location":{"end":{"column":37,"line":99},"start":{"column":30,"line":99}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"438","location":{"end":{"column":38,"line":100},"start":{"column":9,"line":100}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"439","location":{"end":{"column":36,"line":100},"start":{"column":30,"line":100}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import * as ts from 'typescript';\n\nimport { printNode } from '../helpers/tsHelpers';\n\nimport NodeMutator, { NodeReplacement } from './NodeMutator';\n\n/**\n * Type guard for seperating default clause from case clauses.\n */\nfunction isDefaultClause(node: ts.CaseOrDefaultClause): node is ts.DefaultClause {\n  return node.kind === ts.SyntaxKind.DefaultClause;\n}\n\nexport default class ConditionalExpressionMutator extends NodeMutator<\n  ts.BinaryExpression | ts.DoStatement | ts.ForStatement | ts.IfStatement | ts.CaseOrDefaultClause | ts.WhileStatement\n> {\n  public name = 'ConditionalExpression';\n\n  public guard(node: ts.Node): node is ts.BinaryExpression {\n    return (\n      node.kind === ts.SyntaxKind.BinaryExpression ||\n      node.kind === ts.SyntaxKind.CaseClause ||\n      node.kind === ts.SyntaxKind.DefaultClause ||\n      node.kind === ts.SyntaxKind.DoStatement ||\n      node.kind === ts.SyntaxKind.ForStatement ||\n      node.kind === ts.SyntaxKind.IfStatement ||\n      node.kind === ts.SyntaxKind.WhileStatement\n    );\n  }\n\n  private isInvalidParent(parent: ts.Node): boolean {\n    switch (parent.kind) {\n      case ts.SyntaxKind.IfStatement:\n      case ts.SyntaxKind.ForStatement:\n      case ts.SyntaxKind.WhileStatement:\n      case ts.SyntaxKind.DoStatement:\n      case ts.SyntaxKind.LiteralType:\n      case ts.SyntaxKind.CaseClause:\n      case ts.SyntaxKind.DefaultClause:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  private isInvalidOperator(operatorToken: ts.BinaryOperatorToken): boolean {\n    switch (operatorToken.kind) {\n      case ts.SyntaxKind.PlusToken:\n      case ts.SyntaxKind.MinusToken:\n      case ts.SyntaxKind.SlashToken:\n      case ts.SyntaxKind.AsteriskToken:\n      case ts.SyntaxKind.PercentToken:\n      case ts.SyntaxKind.EqualsToken:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected identifyReplacements(\n    node: ts.BinaryExpression | ts.DoStatement | ts.ForStatement | ts.IfStatement | ts.CaseOrDefaultClause | ts.WhileStatement,\n    sourceFile: ts.SourceFile\n  ): NodeReplacement[] {\n    if (node.kind === ts.SyntaxKind.DoStatement || node.kind === ts.SyntaxKind.WhileStatement) {\n      return [{ node: node.expression, replacement: 'false' }];\n    } else if (node.kind === ts.SyntaxKind.ForStatement) {\n      if (node.condition) {\n        return [{ node: node.condition, replacement: 'false' }];\n      } else {\n        // No node to replace. Happens when for statement is defined as `for(let i=0;;i++)`\n        // Replace the entire node\n        const replacement = printNode(ts.createFor(node.initializer, ts.createFalse(), node.incrementor, node.statement), sourceFile);\n        return [{ node, replacement }];\n      }\n    } else if (node.kind === ts.SyntaxKind.IfStatement) {\n      return [\n        { node: node.expression, replacement: 'true' },\n        { node: node.expression, replacement: 'false' }\n      ];\n    } else if (node.kind === ts.SyntaxKind.CaseClause || node.kind === ts.SyntaxKind.DefaultClause) {\n      // if not a fallthrough case\n      if (node.statements.length > 0) {\n        const clause = isDefaultClause(node) ? ts.createDefaultClause([]) : ts.createCaseClause(node.expression, []);\n        const replacement = printNode(clause, sourceFile);\n        return [{ node, replacement }];\n      } else {\n        return [];\n      }\n    } else {\n      if (\n        (node.parent && this.isInvalidParent(node.parent)) ||\n        (node.parent && node.parent.parent && this.isInvalidParent(node.parent.parent)) ||\n        this.isInvalidOperator(node.operatorToken)\n      ) {\n        return [];\n      }\n\n      return [\n        { node, replacement: 'false' },\n        { node, replacement: 'true' }\n      ];\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/mutator/EqualityOperatorMutator.ts":{"language":"typescript","mutants":[{"id":"440","location":{"end":{"column":2,"line":14},"start":{"column":45,"line":5}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"441","location":{"end":{"column":46,"line":6},"start":{"column":34,"line":6}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"442","location":{"end":{"column":39,"line":6},"start":{"column":35,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"443","location":{"end":{"column":45,"line":6},"start":{"column":41,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"444","location":{"end":{"column":50,"line":7},"start":{"column":40,"line":7}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"445","location":{"end":{"column":44,"line":7},"start":{"column":41,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"446","location":{"end":{"column":49,"line":7},"start":{"column":46,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"447","location":{"end":{"column":49,"line":8},"start":{"column":37,"line":8}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"448","location":{"end":{"column":42,"line":8},"start":{"column":38,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"449","location":{"end":{"column":48,"line":8},"start":{"column":44,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"450","location":{"end":{"column":53,"line":9},"start":{"column":43,"line":9}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"451","location":{"end":{"column":47,"line":9},"start":{"column":44,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"452","location":{"end":{"column":52,"line":9},"start":{"column":49,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"453","location":{"end":{"column":44,"line":10},"start":{"column":38,"line":10}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"454","location":{"end":{"column":43,"line":10},"start":{"column":39,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"455","location":{"end":{"column":49,"line":11},"start":{"column":43,"line":11}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"456","location":{"end":{"column":48,"line":11},"start":{"column":44,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"457","location":{"end":{"column":51,"line":12},"start":{"column":44,"line":12}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"458","location":{"end":{"column":50,"line":12},"start":{"column":45,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"459","location":{"end":{"column":56,"line":13},"start":{"column":49,"line":13}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"460","location":{"end":{"column":55,"line":13},"start":{"column":50,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"461","location":{"end":{"column":43,"line":17},"start":{"column":25,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"462","location":{"end":{"column":4,"line":21},"start":{"column":60,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"463","location":{"end":{"column":56,"line":20},"start":{"column":12,"line":20}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"464","location":{"end":{"column":56,"line":20},"start":{"column":12,"line":20}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"465","location":{"end":{"column":25,"line":20},"start":{"column":22,"line":20}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"466","location":{"end":{"column":4,"line":29},"start":{"column":77,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"467","location":{"end":{"column":47,"line":24},"start":{"column":9,"line":24}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"468","location":{"end":{"column":47,"line":24},"start":{"column":9,"line":24}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"469","location":{"end":{"column":6,"line":26},"start":{"column":49,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"470","location":{"end":{"column":115,"line":25},"start":{"column":57,"line":25}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"471","location":{"end":{"column":114,"line":25},"start":{"column":73,"line":25}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"472","location":{"end":{"column":6,"line":28},"start":{"column":12,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"473","location":{"end":{"column":16,"line":27},"start":{"column":14,"line":27}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"}],"source":"import * as ts from 'typescript';\n\nimport NodeMutator, { NodeReplacement } from './NodeMutator';\n\nconst replaceTokens: ts.MapLike<string[]> = {\n  [ts.SyntaxKind.LessThanToken]: ['<=', '>='],\n  [ts.SyntaxKind.LessThanEqualsToken]: ['<', '>'],\n  [ts.SyntaxKind.GreaterThanToken]: ['<=', '>='],\n  [ts.SyntaxKind.GreaterThanEqualsToken]: ['<', '>'],\n  [ts.SyntaxKind.EqualsEqualsToken]: ['!='],\n  [ts.SyntaxKind.ExclamationEqualsToken]: ['=='],\n  [ts.SyntaxKind.EqualsEqualsEqualsToken]: ['!=='],\n  [ts.SyntaxKind.ExclamationEqualsEqualsToken]: ['===']\n};\n\nexport default class EqualityOperatorMutator extends NodeMutator<ts.BinaryExpression> {\n  public name: string = 'EqualityOperator';\n\n  public guard(node: ts.Node): node is ts.BinaryExpression {\n    return node.kind === ts.SyntaxKind.BinaryExpression;\n  }\n\n  public identifyReplacements(node: ts.BinaryExpression): NodeReplacement[] {\n    if (replaceTokens[node.operatorToken.kind]) {\n      return replaceTokens[node.operatorToken.kind].map(replacement => ({ node: node.operatorToken, replacement }));\n    } else {\n      return [];\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/mutator/LogicalOperatorMutator.ts":{"language":"typescript","mutants":[{"id":"474","location":{"end":{"column":2,"line":8},"start":{"column":43,"line":5}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"475","location":{"end":{"column":36,"line":6},"start":{"column":32,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"476","location":{"end":{"column":48,"line":7},"start":{"column":44,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"477","location":{"end":{"column":42,"line":11},"start":{"column":25,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"478","location":{"end":{"column":4,"line":15},"start":{"column":60,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"479","location":{"end":{"column":56,"line":14},"start":{"column":12,"line":14}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"480","location":{"end":{"column":56,"line":14},"start":{"column":12,"line":14}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"481","location":{"end":{"column":25,"line":14},"start":{"column":22,"line":14}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"482","location":{"end":{"column":4,"line":24},"start":{"column":77,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"483","location":{"end":{"column":20,"line":19},"start":{"column":9,"line":19}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"484","location":{"end":{"column":20,"line":19},"start":{"column":9,"line":19}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"485","location":{"end":{"column":6,"line":21},"start":{"column":22,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"486","location":{"end":{"column":57,"line":20},"start":{"column":14,"line":20}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"487","location":{"end":{"column":56,"line":20},"start":{"column":15,"line":20}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"488","location":{"end":{"column":6,"line":23},"start":{"column":12,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"489","location":{"end":{"column":16,"line":22},"start":{"column":14,"line":22}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"}],"source":"import * as ts from 'typescript';\n\nimport NodeMutator, { NodeReplacement } from './NodeMutator';\n\nconst replaceTokens: ts.MapLike<string> = {\n  [ts.SyntaxKind.BarBarToken]: '&&',\n  [ts.SyntaxKind.AmpersandAmpersandToken]: '||'\n};\n\nexport default class LogicalOperatorMutator extends NodeMutator<ts.BinaryExpression> {\n  public name: string = 'LogicalOperator';\n\n  public guard(node: ts.Node): node is ts.BinaryExpression {\n    return node.kind === ts.SyntaxKind.BinaryExpression;\n  }\n\n  public identifyReplacements(node: ts.BinaryExpression): NodeReplacement[] {\n    const replacement = replaceTokens[node.operatorToken.kind];\n    if (replacement) {\n      return [{ node: node.operatorToken, replacement }];\n    } else {\n      return [];\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/mutator/NodeMutator.ts":{"language":"typescript","mutants":[{"id":"490","location":{"end":{"column":4,"line":17},"start":{"column":63,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"491","location":{"end":{"column":147,"line":16},"start":{"column":60,"line":16}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"492","location":{"end":{"column":4,"line":28},"start":{"column":99,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"493","location":{"end":{"column":6,"line":27},"start":{"column":12,"line":22}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"494","location":{"end":{"column":64,"line":25},"start":{"column":14,"line":25}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"CompileError"}],"source":"import * as path from 'path';\n\nimport { Mutant } from '@stryker-mutator/api/mutant';\nimport * as ts from 'typescript';\n\nexport interface NodeReplacement {\n  node: ts.Node;\n  replacement: string;\n}\n\nexport default abstract class NodeMutator<T extends ts.Node = ts.Node> {\n  public abstract name: string;\n  public abstract guard(node: ts.Node): node is T;\n\n  public mutate(node: T, sourceFile: ts.SourceFile): Mutant[] {\n    return this.identifyReplacements(node, sourceFile).map(replacement => this.createMutant(replacement.node, replacement.replacement, sourceFile));\n  }\n\n  protected abstract identifyReplacements(node: T, sourceFile: ts.SourceFile): NodeReplacement[];\n\n  private createMutant(original: ts.Node, replacement: string, sourceFile: ts.SourceFile): Mutant {\n    return {\n      fileName: sourceFile.fileName.replace(/\\//g, path.sep),\n      mutatorName: this.name,\n      range: [original.getStart(sourceFile), original.getEnd()],\n      replacement\n    };\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/mutator/ObjectLiteralMutator.ts":{"language":"typescript","mutants":[{"id":"495","location":{"end":{"column":32,"line":6},"start":{"column":17,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"496","location":{"end":{"column":4,"line":10},"start":{"column":67,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"497","location":{"end":{"column":63,"line":9},"start":{"column":12,"line":9}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"498","location":{"end":{"column":63,"line":9},"start":{"column":12,"line":9}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"499","location":{"end":{"column":25,"line":9},"start":{"column":22,"line":9}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"500","location":{"end":{"column":4,"line":18},"start":{"column":84,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"501","location":{"end":{"column":32,"line":13},"start":{"column":9,"line":13}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"502","location":{"end":{"column":32,"line":13},"start":{"column":9,"line":13}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"503","location":{"end":{"column":30,"line":13},"start":{"column":29,"line":13}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"504","location":{"end":{"column":30,"line":13},"start":{"column":29,"line":13}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"505","location":{"end":{"column":6,"line":15},"start":{"column":34,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"506","location":{"end":{"column":46,"line":14},"start":{"column":14,"line":14}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"507","location":{"end":{"column":45,"line":14},"start":{"column":15,"line":14}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"508","location":{"end":{"column":43,"line":14},"start":{"column":39,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"509","location":{"end":{"column":6,"line":17},"start":{"column":12,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"510","location":{"end":{"column":16,"line":16},"start":{"column":14,"line":16}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"}],"source":"import * as ts from 'typescript';\n\nimport NodeMutator, { NodeReplacement } from './NodeMutator';\n\nexport default class ObjectLiteralMutator extends NodeMutator<ts.ObjectLiteralExpression> {\n  public name = 'ObjectLiteral';\n\n  public guard(node: ts.Node): node is ts.ObjectLiteralExpression {\n    return node.kind === ts.SyntaxKind.ObjectLiteralExpression;\n  }\n\n  protected identifyReplacements(o: ts.ObjectLiteralExpression): NodeReplacement[] {\n    if (o.properties.length > 0) {\n      return [{ node: o, replacement: '{}' }];\n    } else {\n      return [];\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/mutator/StringLiteralMutator.ts":{"language":"typescript","mutants":[{"id":"511","location":{"end":{"column":32,"line":14},"start":{"column":17,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"512","location":{"end":{"column":4,"line":25},"start":{"column":58,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"513","location":{"end":{"column":21,"line":21},"start":{"column":7,"line":20}},"mutatorName":"ConditionalExpression","replacement":"case ts.SyntaxKind.FirstTemplateToken:","status":"Killed"},{"id":"514","location":{"end":{"column":20,"line":21},"start":{"column":16,"line":21}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"515","location":{"end":{"column":22,"line":23},"start":{"column":7,"line":22}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"CompileError"},{"id":"516","location":{"end":{"column":21,"line":23},"start":{"column":16,"line":23}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"517","location":{"end":{"column":4,"line":41},"start":{"column":53,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"518","location":{"end":{"column":21,"line":37},"start":{"column":7,"line":36}},"mutatorName":"ConditionalExpression","replacement":"case ts.SyntaxKind.LiteralType:","status":"Killed"},{"id":"519","location":{"end":{"column":20,"line":37},"start":{"column":16,"line":37}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"520","location":{"end":{"column":22,"line":39},"start":{"column":7,"line":38}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"CompileError"},{"id":"521","location":{"end":{"column":21,"line":39},"start":{"column":16,"line":39}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"522","location":{"end":{"column":4,"line":53},"start":{"column":77,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"523","location":{"end":{"column":55,"line":44},"start":{"column":9,"line":44}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"524","location":{"end":{"column":55,"line":44},"start":{"column":9,"line":44}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"525","location":{"end":{"column":22,"line":44},"start":{"column":20,"line":44}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"526","location":{"end":{"column":6,"line":46},"start":{"column":57,"line":44}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"527","location":{"end":{"column":16,"line":45},"start":{"column":14,"line":45}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"528","location":{"end":{"column":26,"line":48},"start":{"column":9,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"529","location":{"end":{"column":26,"line":48},"start":{"column":9,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"530","location":{"end":{"column":6,"line":50},"start":{"column":28,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"531","location":{"end":{"column":65,"line":49},"start":{"column":14,"line":49}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"532","location":{"end":{"column":64,"line":49},"start":{"column":15,"line":49}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"533","location":{"end":{"column":62,"line":49},"start":{"column":41,"line":49}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"534","location":{"end":{"column":6,"line":52},"start":{"column":12,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"535","location":{"end":{"column":48,"line":51},"start":{"column":14,"line":51}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"536","location":{"end":{"column":47,"line":51},"start":{"column":15,"line":51}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"537","location":{"end":{"column":45,"line":51},"start":{"column":41,"line":51}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"538","location":{"end":{"column":4,"line":65},"start":{"column":43,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"539","location":{"end":{"column":6,"line":58},"start":{"column":30,"line":56}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"540","location":{"end":{"column":73,"line":57},"start":{"column":14,"line":57}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"541","location":{"end":{"column":73,"line":57},"start":{"column":14,"line":57}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"542","location":{"end":{"column":57,"line":57},"start":{"column":55,"line":57}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"543","location":{"end":{"column":54,"line":57},"start":{"column":14,"line":57}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"544","location":{"end":{"column":54,"line":57},"start":{"column":14,"line":57}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"545","location":{"end":{"column":26,"line":57},"start":{"column":23,"line":57}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"546","location":{"end":{"column":73,"line":57},"start":{"column":58,"line":57}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"547","location":{"end":{"column":73,"line":57},"start":{"column":58,"line":57}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"548","location":{"end":{"column":70,"line":57},"start":{"column":67,"line":57}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"549","location":{"end":{"column":73,"line":57},"start":{"column":71,"line":57}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"550","location":{"end":{"column":6,"line":62},"start":{"column":32,"line":60}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"551","location":{"end":{"column":116,"line":61},"start":{"column":14,"line":61}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"552","location":{"end":{"column":116,"line":61},"start":{"column":14,"line":61}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"553","location":{"end":{"column":62,"line":61},"start":{"column":60,"line":61}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"554","location":{"end":{"column":59,"line":61},"start":{"column":14,"line":61}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"555","location":{"end":{"column":59,"line":61},"start":{"column":14,"line":61}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"556","location":{"end":{"column":26,"line":61},"start":{"column":23,"line":61}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"557","location":{"end":{"column":116,"line":61},"start":{"column":63,"line":61}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"558","location":{"end":{"column":116,"line":61},"start":{"column":63,"line":61}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"559","location":{"end":{"column":113,"line":61},"start":{"column":110,"line":61}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"560","location":{"end":{"column":116,"line":61},"start":{"column":114,"line":61}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"561","location":{"end":{"column":48,"line":64},"start":{"column":12,"line":64}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"562","location":{"end":{"column":48,"line":64},"start":{"column":12,"line":64}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"563","location":{"end":{"column":30,"line":64},"start":{"column":28,"line":64}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"}],"source":"import * as ts from 'typescript';\n\nimport NodeMutator, { NodeReplacement } from './NodeMutator';\n\nexport type AllStringLiterals =\n  // Regular quoted string.\n  | ts.StringLiteral\n  // Templates string with values embedded.\n  | ts.TemplateExpression\n  // A raw token is emitted if the template string has no embeds.\n  | ts.Token<ts.SyntaxKind.FirstTemplateToken>;\n\nexport default class StringLiteralMutator extends NodeMutator<AllStringLiterals> {\n  public name = 'StringLiteral';\n\n  public guard(node: ts.Node): node is AllStringLiterals {\n    switch (node.kind) {\n      case ts.SyntaxKind.StringLiteral:\n      case ts.SyntaxKind.TemplateExpression:\n      case ts.SyntaxKind.FirstTemplateToken:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  private isInvalidParent(parent: ts.Node): boolean {\n    switch (parent.kind) {\n      case ts.SyntaxKind.ImportDeclaration:\n      case ts.SyntaxKind.ExportDeclaration:\n      case ts.SyntaxKind.ModuleDeclaration:\n      case ts.SyntaxKind.ExternalModuleReference:\n      case ts.SyntaxKind.LastTypeNode:\n      case ts.SyntaxKind.JsxAttribute:\n      case ts.SyntaxKind.ExpressionStatement:\n      case ts.SyntaxKind.LiteralType:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected identifyReplacements(str: AllStringLiterals): NodeReplacement[] {\n    if (str.parent && this.isInvalidParent(str.parent)) {\n      return [];\n    }\n\n    if (this.isEmpty(str)) {\n      return [{ node: str, replacement: '\"Stryker was here!\"' }];\n    } else {\n      return [{ node: str, replacement: '\"\"' }];\n    }\n  }\n\n  private isEmpty(str: AllStringLiterals) {\n    function isEmptyString() {\n      return str.kind === ts.SyntaxKind.StringLiteral && str.text === '';\n    }\n\n    function isEmptyTemplate() {\n      return str.kind === ts.SyntaxKind.FirstTemplateToken && (str as ts.NoSubstitutionTemplateLiteral).text === '';\n    }\n\n    return isEmptyString() || isEmptyTemplate();\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/mutator/UnaryOperatorMutator.ts":{"language":"typescript","mutants":[{"id":"564","location":{"end":{"column":2,"line":11},"start":{"column":43,"line":7}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"565","location":{"end":{"column":33,"line":8},"start":{"column":30,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"566","location":{"end":{"column":34,"line":9},"start":{"column":31,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"567","location":{"end":{"column":33,"line":10},"start":{"column":31,"line":10}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"568","location":{"end":{"column":32,"line":14},"start":{"column":17,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"569","location":{"end":{"column":4,"line":18},"start":{"column":65,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"570","location":{"end":{"column":61,"line":17},"start":{"column":12,"line":17}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"571","location":{"end":{"column":61,"line":17},"start":{"column":12,"line":17}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"572","location":{"end":{"column":25,"line":17},"start":{"column":22,"line":17}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"573","location":{"end":{"column":4,"line":27},"start":{"column":112,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"574","location":{"end":{"column":40,"line":22},"start":{"column":9,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"575","location":{"end":{"column":40,"line":22},"start":{"column":9,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"576","location":{"end":{"column":31,"line":22},"start":{"column":28,"line":22}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"577","location":{"end":{"column":40,"line":22},"start":{"column":32,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"578","location":{"end":{"column":6,"line":24},"start":{"column":42,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"579","location":{"end":{"column":88,"line":23},"start":{"column":14,"line":23}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"580","location":{"end":{"column":87,"line":23},"start":{"column":15,"line":23}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"581","location":{"end":{"column":49,"line":23},"start":{"column":48,"line":23}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"582","location":{"end":{"column":6,"line":26},"start":{"column":12,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"583","location":{"end":{"column":16,"line":25},"start":{"column":14,"line":25}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"}],"source":"import * as ts from 'typescript';\n\nimport { printNode } from '../helpers/tsHelpers';\n\nimport NodeMutator, { NodeReplacement } from './NodeMutator';\n\nconst replaceTokens: ts.MapLike<string> = {\n  [ts.SyntaxKind.PlusToken]: '-',\n  [ts.SyntaxKind.MinusToken]: '+',\n  [ts.SyntaxKind.TildeToken]: ''\n};\n\nexport default class UnaryOperatorMutator extends NodeMutator<ts.PrefixUnaryExpression> {\n  public name = 'UnaryOperator';\n\n  public guard(node: ts.Node): node is ts.PrefixUnaryExpression {\n    return node.kind === ts.SyntaxKind.PrefixUnaryExpression;\n  }\n\n  protected identifyReplacements(node: ts.PrefixUnaryExpression, sourceFile: ts.SourceFile): NodeReplacement[] {\n    const replacement = replaceTokens[node.operator];\n    if (typeof replacement === 'string') {\n      return [{ node, replacement: replacement + printNode(node.operand, sourceFile) }];\n    } else {\n      return [];\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/mutator/UpdateOperatorMutator.ts":{"language":"typescript","mutants":[{"id":"584","location":{"end":{"column":2,"line":10},"start":{"column":43,"line":7}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"585","location":{"end":{"column":38,"line":8},"start":{"column":34,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"586","location":{"end":{"column":40,"line":9},"start":{"column":36,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"587","location":{"end":{"column":33,"line":13},"start":{"column":17,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"588","location":{"end":{"column":4,"line":17},"start":{"column":65,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"589","location":{"end":{"column":115,"line":16},"start":{"column":12,"line":16}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"590","location":{"end":{"column":115,"line":16},"start":{"column":12,"line":16}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"591","location":{"end":{"column":64,"line":16},"start":{"column":62,"line":16}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"592","location":{"end":{"column":61,"line":16},"start":{"column":12,"line":16}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"593","location":{"end":{"column":61,"line":16},"start":{"column":12,"line":16}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"594","location":{"end":{"column":25,"line":16},"start":{"column":22,"line":16}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"595","location":{"end":{"column":115,"line":16},"start":{"column":65,"line":16}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"596","location":{"end":{"column":115,"line":16},"start":{"column":65,"line":16}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"597","location":{"end":{"column":78,"line":16},"start":{"column":75,"line":16}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"598","location":{"end":{"column":4,"line":28},"start":{"column":140,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"599","location":{"end":{"column":45,"line":21},"start":{"column":9,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"600","location":{"end":{"column":45,"line":21},"start":{"column":9,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"601","location":{"end":{"column":36,"line":21},"start":{"column":33,"line":21}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"602","location":{"end":{"column":45,"line":21},"start":{"column":37,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"603","location":{"end":{"column":6,"line":25},"start":{"column":47,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"604","location":{"end":{"column":76,"line":23},"start":{"column":27,"line":23}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"605","location":{"end":{"column":76,"line":23},"start":{"column":27,"line":23}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"606","location":{"end":{"column":40,"line":23},"start":{"column":37,"line":23}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"607","location":{"end":{"column":97,"line":23},"start":{"column":96,"line":23}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"608","location":{"end":{"column":117,"line":23},"start":{"column":116,"line":23}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"609","location":{"end":{"column":37,"line":24},"start":{"column":14,"line":24}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"610","location":{"end":{"column":36,"line":24},"start":{"column":15,"line":24}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"611","location":{"end":{"column":6,"line":27},"start":{"column":12,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"612","location":{"end":{"column":16,"line":26},"start":{"column":14,"line":26}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"}],"source":"import * as ts from 'typescript';\n\nimport { printNode } from '../helpers/tsHelpers';\n\nimport NodeMutator, { NodeReplacement } from './NodeMutator';\n\nconst replaceTokens: ts.MapLike<string> = {\n  [ts.SyntaxKind.PlusPlusToken]: '--',\n  [ts.SyntaxKind.MinusMinusToken]: '++'\n};\n\nexport default class UpdateOperatorMutator extends NodeMutator<ts.PrefixUnaryExpression | ts.PostfixUnaryExpression> {\n  public name = 'UpdateOperator';\n\n  public guard(node: ts.Node): node is ts.PrefixUnaryExpression {\n    return node.kind === ts.SyntaxKind.PrefixUnaryExpression || node.kind === ts.SyntaxKind.PostfixUnaryExpression;\n  }\n\n  protected identifyReplacements(node: ts.PrefixUnaryExpression | ts.PostfixUnaryExpression, sourceFile: ts.SourceFile): NodeReplacement[] {\n    const replacementToken = replaceTokens[node.operator];\n    if (typeof replacementToken === 'string') {\n      const operand = printNode(node.operand, sourceFile);\n      const replacement = node.kind === ts.SyntaxKind.PrefixUnaryExpression ? replacementToken + operand : operand + replacementToken;\n      return [{ node, replacement }];\n    } else {\n      return [];\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/mutator/index.ts":{"language":"typescript","mutants":[{"id":"613","location":{"end":{"column":2,"line":28},"start":{"column":53,"line":15}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"}],"source":"import ArithmeticOperatorMutator from './ArithmeticOperatorMutator';\nimport ArrayDeclarationMutator from './ArrayDeclarationMutator';\nimport ArrowFunctionMutator from './ArrowFunctionMutator';\nimport BlockStatementMutator from './BlockStatementMutator';\nimport BooleanLiteralMutator from './BooleanLiteralMutator';\nimport ConditionalExpressionMutator from './ConditionalExpressionMutator';\nimport EqualityOperatorMutator from './EqualityOperatorMutator';\nimport ObjectLiteralMutator from './ObjectLiteralMutator';\nimport StringLiteralMutator from './StringLiteralMutator';\nimport LogicalOperatorMutator from './LogicalOperatorMutator';\nimport UnaryOperatorMutator from './UnaryOperatorMutator';\nimport UpdateOperatorMutator from './UpdateOperatorMutator';\nimport NodeMutator from './NodeMutator';\n\nexport const nodeMutators: readonly NodeMutator[] = [\n  new ArithmeticOperatorMutator(),\n  new ArrayDeclarationMutator(),\n  new BlockStatementMutator(),\n  new BooleanLiteralMutator(),\n  new ConditionalExpressionMutator(),\n  new EqualityOperatorMutator(),\n  new LogicalOperatorMutator(),\n  new ObjectLiteralMutator(),\n  new StringLiteralMutator(),\n  new UnaryOperatorMutator(),\n  new UpdateOperatorMutator(),\n  new ArrowFunctionMutator()\n];\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/transpiler/ScriptFile.ts":{"language":"typescript","mutants":[{"id":"614","location":{"end":{"column":4,"line":7},"start":{"column":38,"line":4}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"615","location":{"end":{"column":19,"line":6},"start":{"column":5,"line":6}},"mutatorName":"UpdateOperator","replacement":"this.version--","status":"NoCoverage"}],"source":"export default class ScriptFile {\n  constructor(public name: string, public content: string, public version = 0) {}\n\n  public replace(newContent: string) {\n    this.content = newContent;\n    this.version++;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/transpiler/TranspileFilter.ts":{"language":"typescript","mutants":[{"id":"616","location":{"end":{"column":4,"line":21},"start":{"column":66,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"617","location":{"end":{"column":26,"line":16},"start":{"column":9,"line":16}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"618","location":{"end":{"column":26,"line":16},"start":{"column":9,"line":16}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"619","location":{"end":{"column":6,"line":18},"start":{"column":28,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"620","location":{"end":{"column":6,"line":20},"start":{"column":12,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"621","location":{"end":{"column":4,"line":33},"start":{"column":55,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"622","location":{"end":{"column":4,"line":37},"start":{"column":48,"line":35}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"623","location":{"end":{"column":4,"line":46},"start":{"column":48,"line":44}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import { StrykerOptions } from '@stryker-mutator/api/core';\n\nimport { getTSConfig, isTypescriptFile, normalizeFileFromTypescript } from '../helpers/tsHelpers';\n\n/**\n * Represents a transpile filter. This is the component that decides on which files needs to be transpiled.\n *\n * It is implemented using the composite pattern.\n * If there is a tsConfig, that will be used. If not, a default is used (transpile all TS-like files)\n */\nexport default abstract class TranspileFilter {\n  public abstract isIncluded(fileName: string): boolean;\n\n  public static create(options: StrykerOptions): TranspileFilter {\n    const parsedCommandLine = getTSConfig(options);\n    if (parsedCommandLine) {\n      return new TSConfigFilter(parsedCommandLine);\n    } else {\n      return new DefaultFilter();\n    }\n  }\n}\n\n/**\n * A transpile filter based on ts config\n */\nexport class TSConfigFilter extends TranspileFilter {\n  private readonly fileNames: string[];\n\n  constructor({ fileNames }: { fileNames: string[] }) {\n    super();\n    this.fileNames = fileNames.map(normalizeFileFromTypescript);\n  }\n\n  public isIncluded(fileName: string): boolean {\n    return this.fileNames.includes(fileName);\n  }\n}\n\n/**\n * A default transpile filter based on file extension\n */\nexport class DefaultFilter extends TranspileFilter {\n  public isIncluded(fileName: string): boolean {\n    return isTypescriptFile(fileName);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/typescript/src/transpiler/TranspilingLanguageService.ts":{"language":"typescript","mutants":[{"id":"624","location":{"end":{"column":4,"line":46},"start":{"column":5,"line":35}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"625","location":{"end":{"column":100,"line":37},"start":{"column":23,"line":37}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage"},{"id":"626","location":{"end":{"column":6,"line":45},"start":{"column":33,"line":41}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"627","location":{"end":{"column":49,"line":42},"start":{"column":29,"line":42}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"628","location":{"end":{"column":50,"line":43},"start":{"column":28,"line":43}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"629","location":{"end":{"column":31,"line":44},"start":{"column":19,"line":44}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"630","location":{"end":{"column":4,"line":59},"start":{"column":60,"line":53}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"631","location":{"end":{"column":44,"line":56},"start":{"column":39,"line":56}},"mutatorName":"BooleanLiteral","replacement":"true","status":"NoCoverage"},{"id":"632","location":{"end":{"column":40,"line":57},"start":{"column":35,"line":57}},"mutatorName":"BooleanLiteral","replacement":"true","status":"NoCoverage"},{"id":"633","location":{"end":{"column":4,"line":67},"start":{"column":49,"line":65}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"634","location":{"end":{"column":102,"line":66},"start":{"column":26,"line":66}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage"},{"id":"635","location":{"end":{"column":4,"line":73},"start":{"column":57,"line":69}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"636","location":{"end":{"column":50,"line":70},"start":{"column":33,"line":70}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"637","location":{"end":{"column":132,"line":71},"start":{"column":39,"line":71}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"638","location":{"end":{"column":4,"line":94},"start":{"column":45,"line":81}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"639","location":{"end":{"column":15,"line":85},"start":{"column":9,"line":85}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"640","location":{"end":{"column":15,"line":85},"start":{"column":9,"line":85}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"641","location":{"end":{"column":6,"line":91},"start":{"column":17,"line":85}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"642","location":{"end":{"column":100,"line":86},"start":{"column":35,"line":86}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage"},{"id":"643","location":{"end":{"column":18,"line":87},"start":{"column":11,"line":87}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"644","location":{"end":{"column":18,"line":87},"start":{"column":11,"line":87}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"645","location":{"end":{"column":8,"line":89},"start":{"column":20,"line":87}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"646","location":{"end":{"column":75,"line":90},"start":{"column":14,"line":90}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"647","location":{"end":{"column":60,"line":90},"start":{"column":30,"line":90}},"mutatorName":"BooleanLiteral","replacement":"!this.compilerOptions.outFile","status":"NoCoverage"},{"id":"648","location":{"end":{"column":60,"line":90},"start":{"column":31,"line":90}},"mutatorName":"BooleanLiteral","replacement":"this.compilerOptions.outFile","status":"NoCoverage"},{"id":"649","location":{"end":{"column":6,"line":93},"start":{"column":12,"line":91}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"650","location":{"end":{"column":68,"line":92},"start":{"column":23,"line":92}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"651","location":{"end":{"column":4,"line":116},"start":{"column":63,"line":96}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"652","location":{"end":{"column":6,"line":115},"start":{"column":12,"line":97}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"653","location":{"end":{"column":57,"line":100},"start":{"column":31,"line":100}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"654","location":{"end":{"column":69,"line":101},"start":{"column":28,"line":101}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"655","location":{"end":{"column":56,"line":104},"start":{"column":27,"line":104}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"656","location":{"end":{"column":8,"line":108},"start":{"column":38,"line":105}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"657","location":{"end":{"column":98,"line":107},"start":{"column":16,"line":107}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"658","location":{"end":{"column":98,"line":107},"start":{"column":16,"line":107}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"659","location":{"end":{"column":39,"line":107},"start":{"column":37,"line":107}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"660","location":{"end":{"column":8,"line":112},"start":{"column":37,"line":109}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"661","location":{"end":{"column":79,"line":111},"start":{"column":16,"line":111}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"662","location":{"end":{"column":79,"line":111},"start":{"column":16,"line":111}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"663","location":{"end":{"column":39,"line":111},"start":{"column":37,"line":111}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"664","location":{"end":{"column":4,"line":128},"start":{"column":56,"line":118}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"665","location":{"end":{"column":30,"line":119},"start":{"column":9,"line":119}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"666","location":{"end":{"column":30,"line":119},"start":{"column":9,"line":119}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"667","location":{"end":{"column":30,"line":119},"start":{"column":9,"line":119}},"mutatorName":"BooleanLiteral","replacement":"this.files[fileName]","status":"NoCoverage"},{"id":"668","location":{"end":{"column":6,"line":127},"start":{"column":32,"line":119}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"669","location":{"end":{"column":38,"line":121},"start":{"column":11,"line":121}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"670","location":{"end":{"column":38,"line":121},"start":{"column":11,"line":121}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"671","location":{"end":{"column":8,"line":124},"start":{"column":40,"line":121}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"672","location":{"end":{"column":57,"line":122},"start":{"column":27,"line":122}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"673","location":{"end":{"column":93,"line":123},"start":{"column":87,"line":123}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"674","location":{"end":{"column":8,"line":126},"start":{"column":14,"line":124}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"675","location":{"end":{"column":65,"line":125},"start":{"column":27,"line":125}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"676","location":{"end":{"column":4,"line":139},"start":{"column":45,"line":130}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"677","location":{"end":{"column":32,"line":131},"start":{"column":9,"line":131}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"678","location":{"end":{"column":32,"line":131},"start":{"column":9,"line":131}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"679","location":{"end":{"column":6,"line":136},"start":{"column":34,"line":131}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"680","location":{"end":{"column":62,"line":132},"start":{"column":50,"line":132}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"681","location":{"end":{"column":75,"line":134},"start":{"column":25,"line":134}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"}],"source":"import * as fs from 'fs';\nimport * as os from 'os';\nimport * as path from 'path';\n\nimport { Logger, LoggerFactoryMethod } from '@stryker-mutator/api/logging';\nimport { File } from '@stryker-mutator/api/core';\nimport * as ts from 'typescript';\n\nimport flatMap = require('lodash.flatmap');\n\nimport { isJavaScriptFile, isMapFile, normalizeFileForTypescript, normalizeFileFromTypescript } from '../helpers/tsHelpers';\n\nimport ScriptFile from './ScriptFile';\n\nconst libRegex = /^lib\\.(?:\\w|\\.)*\\.?d\\.ts$/;\n\nexport interface EmitOutput {\n  singleResult: boolean;\n  outputFiles: File[];\n}\n\nexport default class TranspilingLanguageService {\n  private readonly languageService: ts.LanguageService;\n  private readonly logger: Logger;\n  private readonly compilerOptions: ts.CompilerOptions;\n  private readonly files: ts.MapLike<ScriptFile> = Object.create(null);\n  private readonly diagnosticsFormatter: ts.FormatDiagnosticsHost;\n\n  constructor(\n    compilerOptions: Readonly<ts.CompilerOptions>,\n    rootFiles: readonly File[],\n    private readonly projectDirectory: string,\n    private readonly produceSourceMaps: boolean,\n    getLogger: LoggerFactoryMethod\n  ) {\n    this.compilerOptions = this.adaptCompilerOptions(compilerOptions);\n    rootFiles.forEach(file => (this.files[file.name] = new ScriptFile(file.name, file.textContent)));\n    const host = this.createLanguageServiceHost();\n    this.languageService = ts.createLanguageService(host);\n    this.logger = getLogger(TranspilingLanguageService.name);\n    this.diagnosticsFormatter = {\n      getCanonicalFileName: fileName => fileName,\n      getCurrentDirectory: () => projectDirectory,\n      getNewLine: () => os.EOL\n    };\n  }\n\n  /**\n   * Adapts compiler options to emit sourceMap files and disable other options for performance reasons\n   *\n   * @param source The unchanged compiler options\n   */\n  private adaptCompilerOptions(source: ts.CompilerOptions) {\n    const compilerOptions = Object.assign({}, source);\n    compilerOptions.sourceMap = this.produceSourceMaps;\n    compilerOptions.inlineSourceMap = false;\n    compilerOptions.declaration = false;\n    return compilerOptions;\n  }\n\n  /**\n   * Replaces the content of the given text files\n   * @param mutantCandidate The mutant used to replace the original source\n   */\n  public replace(replacements: readonly File[]) {\n    replacements.forEach(replacement => this.files[replacement.name].replace(replacement.textContent));\n  }\n\n  public getSemanticDiagnostics(files: readonly File[]) {\n    const fileNames = files.map(file => file.name);\n    const errors = flatMap(fileNames, fileName => this.languageService.getSemanticDiagnostics(normalizeFileForTypescript(fileName)));\n    return ts.formatDiagnostics(errors, this.diagnosticsFormatter);\n  }\n\n  /**\n   * Get the output text file for given source file\n   * @param sourceFile Emit output file based on this source file\n   * @return  Map<TextFile> Returns a map of source file names with their output files.\n   *          If all output files are bundled together, only returns the output file once using the first file as key\n   */\n  public emit(fileName: string): EmitOutput {\n    const emittedFiles = this.languageService.getEmitOutput(fileName).outputFiles;\n    const jsFile = emittedFiles.find(isJavaScriptFile);\n    const mapFile = emittedFiles.find(isMapFile);\n    if (jsFile) {\n      const outputFiles: File[] = [new File(normalizeFileFromTypescript(jsFile.name), jsFile.text)];\n      if (mapFile) {\n        outputFiles.push(new File(normalizeFileFromTypescript(mapFile.name), mapFile.text));\n      }\n      return { singleResult: !!this.compilerOptions.outFile, outputFiles };\n    } else {\n      throw new Error(`Emit error! Could not emit file ${fileName}`);\n    }\n  }\n\n  private createLanguageServiceHost(): ts.LanguageServiceHost {\n    return {\n      directoryExists: ts.sys.directoryExists,\n      fileExists: ts.sys.fileExists,\n      getCompilationSettings: () => this.compilerOptions,\n      getCurrentDirectory: () => path.resolve(this.projectDirectory),\n      getDefaultLibFileName: ts.getDefaultLibFileName,\n      getDirectories: ts.sys.getDirectories,\n      getScriptFileNames: () => Object.keys(this.files),\n      getScriptSnapshot: fileName => {\n        this.pullFileIntoMemoryIfNeeded(fileName);\n        return this.files[fileName] && ts.ScriptSnapshot.fromString(this.files[fileName].content);\n      },\n      getScriptVersion: fileName => {\n        this.pullFileIntoMemoryIfNeeded(fileName);\n        return this.files[fileName] && this.files[fileName].version.toString();\n      },\n      readDirectory: ts.sys.readDirectory,\n      readFile: ts.sys.readFile\n    };\n  }\n\n  private pullFileIntoMemoryIfNeeded(fileName: string) {\n    if (!this.files[fileName]) {\n      const resolvedFile = this.resolveFileName(fileName);\n      if (fs.existsSync(resolvedFile)) {\n        this.logger.debug('Pulling file into memory: %s', fileName);\n        this.files[fileName] = new ScriptFile(fileName, fs.readFileSync(resolvedFile, 'utf8'));\n      } else {\n        this.logger.error(`File ${resolvedFile} does not exist.`);\n      }\n    }\n  }\n\n  private resolveFileName(fileName: string) {\n    if (libRegex.exec(fileName)) {\n      const typescriptLocation = require.resolve('typescript');\n      const newFileName = path.resolve(path.dirname(typescriptLocation), fileName);\n      this.logger.debug(`Resolving lib file ${fileName} to ${newFileName}`);\n      return newFileName;\n    }\n\n    return fileName;\n  }\n}\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}}