{"files":{"/home/runner/work/stryker/stryker/packages/wct-runner/src/WctLogger.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":4,"line":11},"start":{"column":31,"line":6}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"1","location":{"end":{"column":17,"line":7},"start":{"column":6,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2","location":{"end":{"column":17,"line":8},"start":{"column":6,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3","location":{"end":{"column":16,"line":9},"start":{"column":6,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"4","location":{"end":{"column":16,"line":10},"start":{"column":6,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"5","location":{"end":{"column":4,"line":19},"start":{"column":103,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"6","location":{"end":{"column":16,"line":14},"start":{"column":9,"line":14}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"7","location":{"end":{"column":16,"line":14},"start":{"column":9,"line":14}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"8","location":{"end":{"column":6,"line":16},"start":{"column":18,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"9","location":{"end":{"column":108,"line":15},"start":{"column":42,"line":15}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"10","location":{"end":{"column":6,"line":18},"start":{"column":12,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"11","location":{"end":{"column":129,"line":17},"start":{"column":22,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"12","location":{"end":{"column":4,"line":23},"start":{"column":20,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"13","location":{"end":{"column":123,"line":22},"start":{"column":40,"line":22}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"}],"source":"import { EventEmitter } from 'events';\n\nimport { Logger } from '@stryker-mutator/api/logging';\n\nexport default class WctLogger {\n  private readonly logProxy = {\n    ['log:debug']: this.log.debug.bind(this.log),\n    ['log:error']: this.log.error.bind(this.log),\n    ['log:info']: this.log.info.bind(this.log),\n    ['log:warn']: this.log.warn.bind(this.log)\n  };\n\n  constructor(private readonly context: EventEmitter, verbose: boolean, private readonly log: Logger) {\n    if (verbose) {\n      Object.keys(this.logProxy).forEach(logEvent => context.on(logEvent, (this.logProxy as any)[logEvent]));\n    } else {\n      this.log.debug('Keeping wct quiet. To enable wct logging, set `wct.verbose` to `true` in your Stryker configuration file.');\n    }\n  }\n\n  public dispose() {\n    Object.keys(this.logProxy).forEach(logEvent => this.context.removeListener(logEvent, (this.logProxy as any)[logEvent]));\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/wct-runner/src/WctReporter.ts":{"language":"typescript","mutants":[{"id":"14","location":{"end":{"column":38,"line":7},"start":{"column":26,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"15","location":{"end":{"column":34,"line":8},"start":{"column":24,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"16","location":{"end":{"column":36,"line":11},"start":{"column":34,"line":11}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"17","location":{"end":{"column":4,"line":17},"start":{"column":55,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"18","location":{"end":{"column":4,"line":22},"start":{"column":20,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"19","location":{"end":{"column":4,"line":27},"start":{"column":38,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"20","location":{"end":{"column":4,"line":36},"start":{"column":77,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"21","location":{"end":{"column":6,"line":35},"start":{"column":23,"line":30}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"22","location":{"end":{"column":42,"line":34},"start":{"column":41,"line":34}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"23","location":{"end":{"column":4,"line":57},"start":{"column":63,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"24","location":{"end":{"column":26,"line":41},"start":{"column":7,"line":40}},"mutatorName":"ConditionalExpression","replacement":"case 'undefined':","status":"CompileError"},{"id":"25","location":{"end":{"column":23,"line":40},"start":{"column":12,"line":40}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"26","location":{"end":{"column":24,"line":43},"start":{"column":7,"line":42}},"mutatorName":"ConditionalExpression","replacement":"case 'string':","status":"Killed"},{"id":"27","location":{"end":{"column":20,"line":42},"start":{"column":12,"line":42}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"28","location":{"end":{"column":23,"line":43},"start":{"column":16,"line":43}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"29","location":{"end":{"column":10,"line":53},"start":{"column":7,"line":44}},"mutatorName":"ConditionalExpression","replacement":"case 'object':","status":"Killed"},{"id":"30","location":{"end":{"column":20,"line":44},"start":{"column":12,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"31","location":{"end":{"column":18,"line":45},"start":{"column":13,"line":45}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"32","location":{"end":{"column":18,"line":45},"start":{"column":13,"line":45}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"33","location":{"end":{"column":10,"line":51},"start":{"column":20,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"34","location":{"end":{"column":26,"line":46},"start":{"column":15,"line":46}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"35","location":{"end":{"column":26,"line":46},"start":{"column":15,"line":46}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"36","location":{"end":{"column":12,"line":48},"start":{"column":28,"line":46}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"37","location":{"end":{"column":33,"line":47},"start":{"column":20,"line":47}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"38","location":{"end":{"column":12,"line":50},"start":{"column":18,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"39","location":{"end":{"column":43,"line":49},"start":{"column":20,"line":49}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"40","location":{"end":{"column":10,"line":53},"start":{"column":16,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"41","location":{"end":{"column":35,"line":55},"start":{"column":7,"line":54}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"CompileError"},{"id":"42","location":{"end":{"column":34,"line":55},"start":{"column":16,"line":55}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"43","location":{"end":{"column":4,"line":65},"start":{"column":66,"line":59}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"44","location":{"end":{"column":16,"line":63},"start":{"column":13,"line":63}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"45","location":{"end":{"column":4,"line":76},"start":{"column":65,"line":67}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"46","location":{"end":{"column":34,"line":70},"start":{"column":7,"line":69}},"mutatorName":"ConditionalExpression","replacement":"case 'failing':","status":"Killed"},{"id":"47","location":{"end":{"column":21,"line":69},"start":{"column":12,"line":69}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"48","location":{"end":{"column":35,"line":72},"start":{"column":7,"line":71}},"mutatorName":"ConditionalExpression","replacement":"case 'passing':","status":"Killed"},{"id":"49","location":{"end":{"column":21,"line":71},"start":{"column":12,"line":71}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"50","location":{"end":{"column":35,"line":74},"start":{"column":7,"line":73}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"CompileError"}],"source":"import { EventEmitter } from 'events';\n\nimport { TestResult, TestStatus } from '@stryker-mutator/api/test_runner';\nimport { BrowserDef } from 'web-component-tester/runner/browserrunner';\nimport { CompletedState, TestEndData } from 'web-component-tester/runner/clireporter';\n\nconst TEST_START_EVENT = 'test-start';\nconst TEST_END_EVENT = 'test-end';\n\nexport default class WctReporter {\n  public results: TestResult[] = [];\n  private before = new Date();\n\n  constructor(private readonly context: EventEmitter) {\n    context.on(TEST_START_EVENT, this.testStart);\n    context.on(TEST_END_EVENT, this.testEnd);\n  }\n\n  public dispose() {\n    this.context.removeListener(TEST_START_EVENT, this.testStart);\n    this.context.removeListener(TEST_END_EVENT, this.testEnd);\n  }\n\n  // Both testStart and testEnd are properties here, rather than methods. This is deliberate to allow for `this` pointer to work\n  private readonly testStart = () => {\n    this.before = new Date();\n  };\n\n  private readonly testEnd = (_browser: BrowserDef, result: TestEndData) => {\n    this.results.push({\n      failureMessages: this.toFailureMessages(result.error),\n      name: this.testNamePartsToString(result.test),\n      status: this.toTestResultStatus(result.state),\n      timeSpentMs: new Date().getTime() - this.before.getTime()\n    });\n  };\n\n  private toFailureMessages(error: any): string[] | undefined {\n    switch (typeof error) {\n      case 'undefined':\n        return undefined;\n      case 'string':\n        return [error];\n      case 'object':\n        if (error) {\n          if (error.stack) {\n            return [error.stack];\n          } else {\n            return [JSON.stringify(error)];\n          }\n        } else {\n          return undefined;\n        }\n      default:\n        return [error.toString()];\n    }\n  }\n\n  private testNamePartsToString(testNameParts: string[]): string {\n    // First part is the file name\n    return testNameParts\n      .splice(1)\n      .join(' ')\n      .trim();\n  }\n\n  private toTestResultStatus(state: CompletedState): TestStatus {\n    switch (state) {\n      case 'failing':\n        return TestStatus.Failed;\n      case 'passing':\n        return TestStatus.Success;\n      default:\n        return TestStatus.Skipped;\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/wct-runner/src/WctTestRunner.ts":{"language":"typescript","mutants":[{"id":"51","location":{"end":{"column":43,"line":11},"start":{"column":21,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"52","location":{"end":{"column":2,"line":14},"start":{"column":42,"line":12}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"53","location":{"end":{"column":20,"line":13},"start":{"column":15,"line":13}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"54","location":{"end":{"column":4,"line":32},"start":{"column":70,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"55","location":{"end":{"column":43,"line":23},"start":{"column":9,"line":23}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"56","location":{"end":{"column":43,"line":23},"start":{"column":9,"line":23}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"57","location":{"end":{"column":37,"line":23},"start":{"column":34,"line":23}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"58","location":{"end":{"column":43,"line":23},"start":{"column":38,"line":23}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"59","location":{"end":{"column":6,"line":27},"start":{"column":45,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"60","location":{"end":{"column":181,"line":25},"start":{"column":9,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"61","location":{"end":{"column":52,"line":28},"start":{"column":20,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"62","location":{"end":{"column":91,"line":28},"start":{"column":62,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"63","location":{"end":{"column":84,"line":30},"start":{"column":47,"line":30}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"64","location":{"end":{"column":84,"line":30},"start":{"column":47,"line":30}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"65","location":{"end":{"column":78,"line":30},"start":{"column":76,"line":30}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"66","location":{"end":{"column":84,"line":30},"start":{"column":79,"line":30}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"67","location":{"end":{"column":4,"line":40},"start":{"column":48,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"68","location":{"end":{"column":34,"line":36},"start":{"column":9,"line":36}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"69","location":{"end":{"column":34,"line":36},"start":{"column":9,"line":36}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"70","location":{"end":{"column":6,"line":38},"start":{"column":36,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"71","location":{"end":{"column":39,"line":37},"start":{"column":22,"line":37}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"72","location":{"end":{"column":4,"line":47},"start":{"column":38,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"73","location":{"end":{"column":4,"line":64},"start":{"column":42,"line":49}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"74","location":{"end":{"column":31,"line":50},"start":{"column":29,"line":50}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"75","location":{"end":{"column":6,"line":57},"start":{"column":9,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"76","location":{"end":{"column":8,"line":56},"start":{"column":14,"line":53}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"77","location":{"end":{"column":6,"line":63},"start":{"column":21,"line":57}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"78","location":{"end":{"column":8,"line":62},"start":{"column":14,"line":58}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"79","location":{"end":{"column":37,"line":59},"start":{"column":24,"line":59}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"80","location":{"end":{"column":18,"line":61},"start":{"column":16,"line":61}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"81","location":{"end":{"column":4,"line":69},"start":{"column":20,"line":66}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"82","location":{"end":{"column":4,"line":75},"start":{"column":50,"line":71}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"83","location":{"end":{"column":49,"line":72},"start":{"column":9,"line":72}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"84","location":{"end":{"column":49,"line":72},"start":{"column":9,"line":72}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"85","location":{"end":{"column":49,"line":72},"start":{"column":9,"line":72}},"mutatorName":"BooleanLiteral","replacement":"/\\d+ failed tests?/.exec(error.message)","status":"Killed"},{"id":"86","location":{"end":{"column":6,"line":74},"start":{"column":51,"line":72}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import { StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { RunResult, RunStatus, TestRunner } from '@stryker-mutator/api/test_runner';\nimport { steps } from 'web-component-tester';\nimport { Context } from 'web-component-tester/runner/context';\n\nimport WctLogger from './WctLogger';\nimport WctReporter from './WctReporter';\n\nconst WCT_PACKAGE = 'web-component-tester';\nconst FORCED_WCT_OPTIONS = Object.freeze({\n  persistent: false\n});\n\nexport default class WctTestRunner implements TestRunner {\n  private readonly reporter: WctReporter;\n  private readonly context: Context;\n  private readonly logger: WctLogger;\n\n  public static inject = tokens(commonTokens.logger, commonTokens.options);\n  constructor(private readonly log: Logger, options: StrykerOptions) {\n    if (options.coverageAnalysis !== 'off') {\n      throw new Error(\n        `Coverage analysis \"${options.coverageAnalysis}\" is not (yet) supported by the WCT test runner plugin. Please set \\`coverageAnalysis: \"off\"\\` in your stryker.conf.js file.`\n      );\n    }\n    this.log.debug('Running wct version %s from %s', require(`${WCT_PACKAGE}/package.json`).version, require.resolve(WCT_PACKAGE));\n    this.context = this.loadContext(options);\n    this.logger = new WctLogger(this.context, this.context.options.verbose || false, this.log);\n    this.reporter = new WctReporter(this.context);\n  }\n\n  private loadContext(options: StrykerOptions) {\n    const context = new Context(Object.assign({}, options.wct, FORCED_WCT_OPTIONS));\n    if (this.log.isDebugEnabled()) {\n      this.log.debug('WCT options: %s', JSON.stringify(this.context.options));\n    }\n    return context;\n  }\n\n  public async init(): Promise<void> {\n    await steps.setupOverrides(this.context);\n    await steps.loadPlugins(this.context);\n    await steps.configure(this.context);\n    await steps.prepare(this.context);\n  }\n\n  public async run(): Promise<RunResult> {\n    this.reporter.results = [];\n    try {\n      await steps.runTests(this.context).catch(WctTestRunner.ignoreFailedTests);\n      return {\n        status: RunStatus.Complete,\n        tests: this.reporter.results\n      };\n    } catch (error) {\n      return {\n        errorMessages: [error.stack],\n        status: RunStatus.Error,\n        tests: []\n      };\n    }\n  }\n\n  public dispose() {\n    this.reporter.dispose();\n    this.logger.dispose();\n  }\n\n  private static ignoreFailedTests(error: Error) {\n    if (!/\\d+ failed tests?/.exec(error.message)) {\n      throw error;\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/wct-runner/src/index.ts":{"language":"typescript","mutants":[{"id":"87","location":{"end":{"column":96,"line":5},"start":{"column":31,"line":5}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"88","location":{"end":{"column":79,"line":5},"start":{"column":74,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import { declareClassPlugin, PluginKind } from '@stryker-mutator/api/plugin';\n\nimport WctTestRunner from './WctTestRunner';\n\nexport const strykerPlugins = [declareClassPlugin(PluginKind.TestRunner, 'wct', WctTestRunner)];\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}}