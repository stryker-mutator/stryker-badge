{"files":{"/home/runner/work/stryker/stryker/packages/jasmine-runner/src/JasmineTestRunner.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":4,"line":17},"start":{"column":87,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1","location":{"end":{"column":4,"line":53},"start":{"column":67,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2","location":{"end":{"column":35,"line":21},"start":{"column":33,"line":21}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"3","location":{"end":{"column":26,"line":25},"start":{"column":9,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"4","location":{"end":{"column":26,"line":25},"start":{"column":9,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"5","location":{"end":{"column":6,"line":27},"start":{"column":28,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"6","location":{"end":{"column":6,"line":48},"start":{"column":46,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"7","location":{"end":{"column":8,"line":45},"start":{"column":48,"line":29}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"8","location":{"end":{"column":10,"line":32},"start":{"column":23,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"9","location":{"end":{"column":10,"line":36},"start":{"column":56,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"10","location":{"end":{"column":77,"line":35},"start":{"column":76,"line":35}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Survived"},{"id":"11","location":{"end":{"column":10,"line":44},"start":{"column":23,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"12","location":{"end":{"column":12,"line":43},"start":{"column":19,"line":39}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"13","location":{"end":{"column":30,"line":40},"start":{"column":28,"line":40}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"14","location":{"end":{"column":7,"line":52},"start":{"column":14,"line":48}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"15","location":{"end":{"column":6,"line":52},"start":{"column":24,"line":48}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"16","location":{"end":{"column":105,"line":49},"start":{"column":22,"line":49}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"17","location":{"end":{"column":104,"line":49},"start":{"column":23,"line":49}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"18","location":{"end":{"column":16,"line":51},"start":{"column":14,"line":51}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"19","location":{"end":{"column":4,"line":67},"start":{"column":33,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"20","location":{"end":{"column":66,"line":56},"start":{"column":33,"line":56}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"21","location":{"end":{"column":46,"line":59},"start":{"column":42,"line":59}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"22","location":{"end":{"column":47,"line":60},"start":{"column":43,"line":60}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"23","location":{"end":{"column":23,"line":61},"start":{"column":17,"line":61}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"24","location":{"end":{"column":33,"line":65},"start":{"column":28,"line":65}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"25","location":{"end":{"column":4,"line":73},"start":{"column":30,"line":69}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"26","location":{"end":{"column":6,"line":72},"start":{"column":40,"line":70}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import { EOL } from 'os';\n\nimport { StrykerOptions } from '@stryker-mutator/api/core';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { RunResult, RunStatus, TestResult, TestRunner } from '@stryker-mutator/api/test_runner';\nimport { errorToString } from '@stryker-mutator/util';\n\nimport { evalGlobal, Jasmine, toStrykerTestResult } from './helpers';\n\nexport default class JasmineTestRunner implements TestRunner {\n  private readonly jasmineConfigFile: string | undefined;\n  private readonly Date: typeof Date = Date; // take Date prototype now we still can (user might choose to mock it away)\n\n  public static inject = tokens(commonTokens.sandboxFileNames, commonTokens.options);\n  constructor(private readonly fileNames: readonly string[], options: StrykerOptions) {\n    this.jasmineConfigFile = options.jasmineConfigFile;\n  }\n\n  public run(options: { testHooks?: string }): Promise<RunResult> {\n    this.clearRequireCache();\n    const tests: TestResult[] = [];\n    let startTimeCurrentSpec = 0;\n    const jasmine = this.createJasmineRunner();\n    const self = this;\n    if (options.testHooks) {\n      evalGlobal(options.testHooks);\n    }\n    return new Promise<RunResult>(resolve => {\n      const reporter: jasmine.CustomReporter = {\n        specStarted() {\n          startTimeCurrentSpec = new self.Date().getTime();\n        },\n\n        specDone(result: jasmine.CustomReporterResult) {\n          tests.push(toStrykerTestResult(result, new self.Date().getTime() - startTimeCurrentSpec));\n        },\n\n        jasmineDone() {\n          resolve({\n            errorMessages: [],\n            status: RunStatus.Complete,\n            tests\n          });\n        }\n      };\n      jasmine.addReporter(reporter);\n      jasmine.execute();\n    }).catch(error => ({\n      errorMessages: [`An error occurred while loading your jasmine specs${EOL}${errorToString(error)}`],\n      status: RunStatus.Error,\n      tests: []\n    }));\n  }\n\n  private createJasmineRunner() {\n    const jasmine = new Jasmine({ projectBaseDir: process.cwd() });\n    // The `loadConfigFile` will fallback on the default\n    jasmine.loadConfigFile(this.jasmineConfigFile);\n    jasmine.stopSpecOnExpectationFailure(true);\n    jasmine.env.throwOnExpectationFailure(true);\n    console.log('test');\n\n    jasmine.exit = () => {};\n    jasmine.clearReporters();\n    jasmine.randomizeTests(false);\n    return jasmine;\n  }\n\n  public clearRequireCache() {\n    this.fileNames.forEach(fileName => {\n      delete require.cache[fileName];\n    });\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/jasmine-runner/src/helpers.ts":{"language":"typescript","mutants":[{"id":"27","location":{"end":{"column":2,"line":21},"start":{"column":112,"line":5}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"28","location":{"end":{"column":110,"line":8},"start":{"column":7,"line":8}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"29","location":{"end":{"column":110,"line":8},"start":{"column":7,"line":8}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"30","location":{"end":{"column":77,"line":8},"start":{"column":75,"line":8}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"31","location":{"end":{"column":42,"line":8},"start":{"column":40,"line":8}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"32","location":{"end":{"column":39,"line":8},"start":{"column":7,"line":8}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"33","location":{"end":{"column":39,"line":8},"start":{"column":7,"line":8}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"34","location":{"end":{"column":28,"line":8},"start":{"column":25,"line":8}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"35","location":{"end":{"column":39,"line":8},"start":{"column":29,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"36","location":{"end":{"column":74,"line":8},"start":{"column":43,"line":8}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"37","location":{"end":{"column":74,"line":8},"start":{"column":43,"line":8}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"38","location":{"end":{"column":64,"line":8},"start":{"column":61,"line":8}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"39","location":{"end":{"column":74,"line":8},"start":{"column":65,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"40","location":{"end":{"column":99,"line":8},"start":{"column":96,"line":8}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"41","location":{"end":{"column":110,"line":8},"start":{"column":100,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"42","location":{"end":{"column":4,"line":10},"start":{"column":112,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"43","location":{"end":{"column":90,"line":10},"start":{"column":14,"line":10}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"44","location":{"end":{"column":90,"line":10},"start":{"column":14,"line":10}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"45","location":{"end":{"column":47,"line":10},"start":{"column":45,"line":10}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"46","location":{"end":{"column":44,"line":10},"start":{"column":14,"line":10}},"mutatorName":"BooleanLiteral","replacement":"specResult.failedExpectations","status":"CompileError"},{"id":"47","location":{"end":{"column":88,"line":10},"start":{"column":85,"line":10}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"48","location":{"end":{"column":4,"line":12},"start":{"column":92,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"49","location":{"end":{"column":4,"line":14},"start":{"column":10,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"50","location":{"end":{"column":103,"line":13},"start":{"column":57,"line":13}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"51","location":{"end":{"column":4,"line":20},"start":{"column":10,"line":15}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"52","location":{"end":{"column":2,"line":26},"start":{"column":42,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"53","location":{"end":{"column":36,"line":24},"start":{"column":27,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import { TestResult, TestStatus } from '@stryker-mutator/api/test_runner';\n\nimport JasmineConstructor = require('jasmine');\n\nexport function toStrykerTestResult(specResult: jasmine.CustomReporterResult, timeSpentMs: number): TestResult {\n  let status = TestStatus.Failed;\n  let failureMessages: string[] | undefined;\n  if (specResult.status === 'disabled' || specResult.status === 'pending' || specResult.status === 'excluded') {\n    status = TestStatus.Skipped;\n  } else if (!specResult.failedExpectations || specResult.failedExpectations.length === 0) {\n    status = TestStatus.Success;\n  } else {\n    failureMessages = specResult.failedExpectations.map(failedExpectation => failedExpectation.message);\n  }\n  return {\n    failureMessages,\n    name: specResult.fullName,\n    status,\n    timeSpentMs\n  };\n}\n\nexport function evalGlobal(body: string) {\n  const fn = new Function('require', body);\n  fn(require);\n}\n\nexport const Jasmine = JasmineConstructor;\n"},"/home/runner/work/stryker/stryker/packages/jasmine-runner/src/index.ts":{"language":"typescript","mutants":[{"id":"54","location":{"end":{"column":104,"line":5},"start":{"column":31,"line":5}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"55","location":{"end":{"column":83,"line":5},"start":{"column":74,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import { declareClassPlugin, PluginKind } from '@stryker-mutator/api/plugin';\n\nimport JasmineTestRunner from './JasmineTestRunner';\n\nexport const strykerPlugins = [declareClassPlugin(PluginKind.TestRunner, 'jasmine', JasmineTestRunner)];\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}}