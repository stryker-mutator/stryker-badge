{"files":{"/home/runner/work/stryker/stryker/packages/webpack-transpiler/src/WebpackTranspiler.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":117,"line":9},"start":{"column":54,"line":9}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1","location":{"end":{"column":91,"line":9},"start":{"column":87,"line":9}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"2","location":{"end":{"column":4,"line":23},"start":{"column":113,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3","location":{"end":{"column":26,"line":17},"start":{"column":9,"line":17}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"4","location":{"end":{"column":26,"line":17},"start":{"column":9,"line":17}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"5","location":{"end":{"column":6,"line":21},"start":{"column":28,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"6","location":{"end":{"column":213,"line":19},"start":{"column":9,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"7","location":{"end":{"column":4,"line":35},"start":{"column":76,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"8","location":{"end":{"column":30,"line":26},"start":{"column":9,"line":26}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"9","location":{"end":{"column":30,"line":26},"start":{"column":9,"line":26}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"10","location":{"end":{"column":30,"line":26},"start":{"column":9,"line":26}},"mutatorName":"BooleanLiteral","replacement":"this.webpackCompiler","status":"Killed"},{"id":"11","location":{"end":{"column":6,"line":30},"start":{"column":32,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"12","location":{"end":{"column":38,"line":34},"start":{"column":12,"line":34}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"13","location":{"end":{"column":4,"line":39},"start":{"column":111,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import { File, StrykerOptions } from '@stryker-mutator/api/core';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { Transpiler } from '@stryker-mutator/api/transpile';\n\nimport ConfigLoader from './compiler/ConfigLoader';\nimport WebpackCompiler from './compiler/WebpackCompiler';\nimport { pluginTokens } from './pluginTokens';\n\nconst DEFAULT_STRYKER_WEBPACK_CONFIG = Object.freeze({ configFile: undefined, silent: true, context: process.cwd() });\n\nexport default class WebpackTranspiler implements Transpiler {\n  private readonly config: StrykerWebpackConfig;\n  private webpackCompiler: WebpackCompiler;\n\n  public static inject = tokens(commonTokens.options, commonTokens.produceSourceMaps, pluginTokens.configLoader);\n  constructor(options: StrykerOptions, produceSourceMaps: boolean, private readonly configLoader: ConfigLoader) {\n    if (produceSourceMaps) {\n      throw new Error(\n        `Invalid \\`coverageAnalysis\\` \"${options.coverageAnalysis}\" is not supported by the stryker-webpack-transpiler (yet). It is not able to produce source maps yet. Please set it \"coverageAnalysis\" to \"off\".`\n      );\n    }\n    this.config = this.getStrykerWebpackConfig(options.webpack);\n  }\n\n  public async transpile(files: readonly File[]): Promise<readonly File[]> {\n    if (!this.webpackCompiler) {\n      // Initialize the webpack compiler with the current directory (process.cwd)\n      const config = await this.configLoader.load(this.config);\n      this.webpackCompiler = new WebpackCompiler(config);\n    }\n\n    this.webpackCompiler.writeFilesToFs(files);\n    const outputFiles = await this.webpackCompiler.emit();\n    return [...files, ...outputFiles];\n  }\n\n  private getStrykerWebpackConfig(strykerWebpackConfig?: Partial<StrykerWebpackConfig>): StrykerWebpackConfig {\n    return Object.assign({}, DEFAULT_STRYKER_WEBPACK_CONFIG, strykerWebpackConfig);\n  }\n}\n\nexport interface StrykerWebpackConfig {\n  configFile?: string;\n  silent: boolean;\n  configFileArgs?: any[];\n  // TODO: Remove this when stryker implements projectRoot, see https://github.com/stryker-mutator/stryker/issues/650 */\n  context?: string;\n}\n"},"/home/runner/work/stryker/stryker/packages/webpack-transpiler/src/compiler/ConfigLoader.ts":{"language":"typescript","mutants":[{"id":"14","location":{"end":{"column":46,"line":11},"start":{"column":30,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"15","location":{"end":{"column":4,"line":34},"start":{"column":75,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"16","location":{"end":{"column":26,"line":20},"start":{"column":9,"line":20}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"17","location":{"end":{"column":26,"line":20},"start":{"column":9,"line":20}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"18","location":{"end":{"column":6,"line":28},"start":{"column":28,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"19","location":{"end":{"column":44,"line":22},"start":{"column":11,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"20","location":{"end":{"column":44,"line":22},"start":{"column":11,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"21","location":{"end":{"column":8,"line":24},"start":{"column":46,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"22","location":{"end":{"column":24,"line":25},"start":{"column":11,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"23","location":{"end":{"column":24,"line":25},"start":{"column":11,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"24","location":{"end":{"column":8,"line":27},"start":{"column":26,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"25","location":{"end":{"column":6,"line":31},"start":{"column":12,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"26","location":{"end":{"column":83,"line":29},"start":{"column":22,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"27","location":{"end":{"column":50,"line":30},"start":{"column":23,"line":30}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"28","location":{"end":{"column":4,"line":44},"start":{"column":72,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"29","location":{"end":{"column":37,"line":39},"start":{"column":9,"line":39}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"30","location":{"end":{"column":37,"line":39},"start":{"column":9,"line":39}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"31","location":{"end":{"column":37,"line":39},"start":{"column":9,"line":39}},"mutatorName":"BooleanLiteral","replacement":"fs.existsSync(resolvedName)","status":"Killed"},{"id":"32","location":{"end":{"column":6,"line":41},"start":{"column":39,"line":39}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"33","location":{"end":{"column":92,"line":40},"start":{"column":23,"line":40}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"34","location":{"end":{"column":4,"line":60},"start":{"column":57,"line":46}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"35","location":{"end":{"column":30,"line":47},"start":{"column":9,"line":47}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"36","location":{"end":{"column":30,"line":47},"start":{"column":9,"line":47}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"37","location":{"end":{"column":6,"line":59},"start":{"column":32,"line":47}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"38","location":{"end":{"column":8,"line":58},"start":{"column":70,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"39","location":{"end":{"column":83,"line":49},"start":{"column":13,"line":49}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"40","location":{"end":{"column":83,"line":49},"start":{"column":13,"line":49}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"41","location":{"end":{"column":34,"line":49},"start":{"column":32,"line":49}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"42","location":{"end":{"column":62,"line":49},"start":{"column":59,"line":49}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"43","location":{"end":{"column":10,"line":55},"start":{"column":85,"line":49}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"44","location":{"end":{"column":163,"line":51},"start":{"column":13,"line":51}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"45","location":{"end":{"column":23,"line":54},"start":{"column":18,"line":54}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"46","location":{"end":{"column":10,"line":57},"start":{"column":16,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"47","location":{"end":{"column":22,"line":56},"start":{"column":18,"line":56}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"}],"source":"import * as fs from 'fs';\nimport * as path from 'path';\n\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { Configuration } from 'webpack';\n\nimport { pluginTokens } from '../pluginTokens';\nimport { StrykerWebpackConfig } from '../WebpackTranspiler';\n\nconst PROGRESS_PLUGIN_NAME = 'ProgressPlugin';\n\nexport default class ConfigLoader {\n  public static inject = tokens(commonTokens.logger, pluginTokens.require);\n  constructor(private readonly log: Logger, private readonly requireFn: NodeRequireFunction) {}\n\n  public async load(config: StrykerWebpackConfig): Promise<Configuration> {\n    let webpackConfig: Configuration;\n\n    if (config.configFile) {\n      webpackConfig = await this.loadWebpackConfigFromProjectRoot(config.configFile);\n      if (webpackConfig instanceof Function) {\n        webpackConfig = webpackConfig.apply(null, config.configFileArgs);\n      }\n      if (config.silent) {\n        this.configureSilent(webpackConfig);\n      }\n    } else {\n      this.log.debug('Webpack config \"%s\" not found, trying Webpack 4 zero config', config.configFile);\n      webpackConfig = { context: config.context };\n    }\n\n    return webpackConfig;\n  }\n\n  private loadWebpackConfigFromProjectRoot(configFileLocation: string) {\n    const resolvedName = path.resolve(configFileLocation);\n\n    if (!fs.existsSync(resolvedName)) {\n      throw new Error(`Could not load webpack config at \"${resolvedName}\", file not found.`);\n    }\n\n    return this.requireFn(resolvedName);\n  }\n\n  private configureSilent(webpackConfig: Configuration) {\n    if (webpackConfig.plugins) {\n      webpackConfig.plugins = webpackConfig.plugins.filter(plugin => {\n        if (plugin.constructor && plugin.constructor.name === PROGRESS_PLUGIN_NAME) {\n          this.log.debug(\n            'Removing webpack plugin \"%s\" to keep webpack bundling silent. Set `webpack: { silent: false }` in your stryker.conf.js file to disable this feature.',\n            PROGRESS_PLUGIN_NAME\n          );\n          return false;\n        } else {\n          return true;\n        }\n      });\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/webpack-transpiler/src/compiler/WebpackCompiler.ts":{"language":"typescript","mutants":[{"id":"48","location":{"end":{"column":4,"line":14},"start":{"column":149,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"49","location":{"end":{"column":4,"line":25},"start":{"column":66,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"50","location":{"end":{"column":4,"line":29},"start":{"column":55,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"51","location":{"end":{"column":47,"line":28},"start":{"column":19,"line":28}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"52","location":{"end":{"column":4,"line":33},"start":{"column":39,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"53","location":{"end":{"column":4,"line":41},"start":{"column":34,"line":35}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"54","location":{"end":{"column":6,"line":40},"start":{"column":38,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"55","location":{"end":{"column":4,"line":55},"start":{"column":45,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"56","location":{"end":{"column":6,"line":54},"start":{"column":60,"line":44}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"57","location":{"end":{"column":8,"line":53},"start":{"column":42,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"58","location":{"end":{"column":16,"line":46},"start":{"column":13,"line":46}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"59","location":{"end":{"column":16,"line":46},"start":{"column":13,"line":46}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"60","location":{"end":{"column":10,"line":48},"start":{"column":18,"line":46}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"61","location":{"end":{"column":37,"line":48},"start":{"column":20,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"62","location":{"end":{"column":37,"line":48},"start":{"column":20,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"63","location":{"end":{"column":10,"line":50},"start":{"column":39,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"64","location":{"end":{"column":52,"line":49},"start":{"column":39,"line":49}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"65","location":{"end":{"column":10,"line":52},"start":{"column":16,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import { File } from '@stryker-mutator/api/core';\nimport { Compiler, Configuration } from 'webpack';\n\nimport InputFileSystem from '../fs/InputFileSystem';\nimport OutputFileSystem from '../fs/OutputFileSystem';\n\nimport webpack from './Webpack';\n\nexport default class WebpackCompiler {\n  private readonly _compiler: Compiler;\n\n  constructor(webpackConfig: Configuration, private readonly _inputFS = new InputFileSystem(), private readonly _outputFS = new OutputFileSystem()) {\n    this._compiler = this.createCompiler(webpackConfig);\n  }\n\n  private createCompiler(webpackConfig: Configuration): Compiler {\n    const compiler = webpack(webpackConfig);\n    // Setting filesystem to provided fs so compilation can be done in memory\n    (compiler as any).inputFileSystem = this._inputFS;\n    compiler.outputFileSystem = this._outputFS;\n    (compiler as any).resolvers.normal.fileSystem = this._inputFS;\n    (compiler as any).resolvers.context.fileSystem = this._inputFS;\n\n    return compiler;\n  }\n\n  public writeFilesToFs(files: readonly File[]): void {\n    files.forEach(file => this.writeToFs(file));\n  }\n\n  private writeToFs(file: File): void {\n    this._inputFS.writeFileSync(file.name, file.content);\n  }\n\n  public emit(): Promise<File[]> {\n    return this.compile().then(() => {\n      const outputFiles = this._outputFS.collectFiles();\n      this._outputFS.purge();\n      return outputFiles;\n    });\n  }\n\n  private compile(): Promise<webpack.Stats> {\n    return new Promise<webpack.Stats>((resolve, reject) => {\n      this._compiler.run((err, stats) => {\n        if (err) {\n          reject(err);\n        } else if (stats.hasErrors()) {\n          reject(Error(stats.toString('errors-only')));\n        } else {\n          resolve(stats);\n        }\n      });\n    });\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/webpack-transpiler/src/fs/InputFileSystem.ts":{"language":"typescript","mutants":[{"id":"66","location":{"end":{"column":4,"line":19},"start":{"column":54,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"67","location":{"end":{"column":4,"line":28},"start":{"column":64,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"68","location":{"end":{"column":23,"line":23},"start":{"column":9,"line":23}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"69","location":{"end":{"column":23,"line":23},"start":{"column":9,"line":23}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"70","location":{"end":{"column":20,"line":23},"start":{"column":17,"line":23}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"71","location":{"end":{"column":23,"line":23},"start":{"column":21,"line":23}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"72","location":{"end":{"column":6,"line":26},"start":{"column":25,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"73","location":{"end":{"column":20,"line":25},"start":{"column":17,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"74","location":{"end":{"column":4,"line":38},"start":{"column":65,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"75","location":{"end":{"column":6,"line":37},"start":{"column":67,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"76","location":{"end":{"column":14,"line":32},"start":{"column":11,"line":32}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"77","location":{"end":{"column":14,"line":32},"start":{"column":11,"line":32}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"78","location":{"end":{"column":8,"line":34},"start":{"column":16,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"79","location":{"end":{"column":8,"line":36},"start":{"column":14,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"80","location":{"end":{"column":4,"line":52},"start":{"column":35,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"81","location":{"end":{"column":48,"line":41},"start":{"column":47,"line":41}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"82","location":{"end":{"column":6,"line":48},"start":{"column":73,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"83","location":{"end":{"column":16,"line":43},"start":{"column":11,"line":43}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"84","location":{"end":{"column":16,"line":43},"start":{"column":11,"line":43}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"85","location":{"end":{"column":8,"line":45},"start":{"column":18,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"86","location":{"end":{"column":8,"line":47},"start":{"column":14,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"87","location":{"end":{"column":53,"line":49},"start":{"column":52,"line":49}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"88","location":{"end":{"column":4,"line":60},"start":{"column":56,"line":54}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"89","location":{"end":{"column":6,"line":57},"start":{"column":9,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"90","location":{"end":{"column":6,"line":59},"start":{"column":19,"line":57}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"91","location":{"end":{"column":4,"line":68},"start":{"column":40,"line":62}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"92","location":{"end":{"column":6,"line":65},"start":{"column":9,"line":63}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"93","location":{"end":{"column":6,"line":67},"start":{"column":19,"line":65}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import * as fs from 'fs';\nimport { dirname } from 'path';\n\nimport { CachedInputFileSystem, NodeJsInputFileSystem, Stats } from 'enhanced-resolve';\n\nimport { Callback, webpack } from '../types';\n\nimport MemoryFS from './MemoryFS';\n\n// Cache duration is same as webpack has\n// => https://github.com/webpack/webpack/blob/efc576c8b744e7a015ab26f1f46932ba3ca7d4f1/lib/node/NodeEnvironmentPlugin.js#L14\nconst CACHE_DURATION = 60000;\n\nexport default class InputFileSystem extends CachedInputFileSystem implements webpack.InputFileSystem {\n  private readonly memoryFS = new MemoryFS();\n\n  constructor(innerFS = new NodeJsInputFileSystem()) {\n    super(innerFS, CACHE_DURATION);\n  }\n\n  public writeFileSync(name: string, content: string | Buffer) {\n    this.memoryFS.mkdirpSync(dirname(name));\n    if (content === '') {\n      // The in-memory fs doesn't like empty strings.\n      content = ' ';\n    }\n    this.memoryFS.writeFileSync(name, content);\n  }\n\n  public stat(path: string, callback: Callback<fs.Stats>): void {\n    this.memoryFS.stat(path, (err?: Error | null, stats?: any) => {\n      if (err) {\n        super.stat(path, callback as Callback<Stats>);\n      } else {\n        callback(err, stats);\n      }\n    });\n  }\n\n  public readFile(...args: any[]) {\n    const originalCallback = args[args.length - 1];\n    const newCallback = (error: NodeJS.ErrnoException, content: any) => {\n      if (error) {\n        super.readFile.apply(this, args);\n      } else {\n        originalCallback(error, content);\n      }\n    };\n    const memoryFSArgs = args.slice(0, args.length - 1);\n    memoryFSArgs.push(newCallback);\n    this.memoryFS.readFile.apply(this.memoryFS, memoryFSArgs);\n  }\n\n  public readFileSync(path: string, encoding?: string) {\n    try {\n      return this.memoryFS.readFileSync(path, encoding);\n    } catch (err) {\n      return super.readFileSync(path, encoding);\n    }\n  }\n\n  public statSync(path: string): Stats {\n    try {\n      return this.memoryFS.statSync(path);\n    } catch (err) {\n      return super.statSync(path);\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/webpack-transpiler/src/fs/OutputFileSystem.ts":{"language":"typescript","mutants":[{"id":"94","location":{"end":{"column":4,"line":15},"start":{"column":17,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"95","location":{"end":{"column":4,"line":19},"start":{"column":18,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"96","location":{"end":{"column":4,"line":23},"start":{"column":33,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"97","location":{"end":{"column":94,"line":22},"start":{"column":41,"line":22}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"98","location":{"end":{"column":4,"line":28},"start":{"column":71,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"99","location":{"end":{"column":50,"line":26},"start":{"column":40,"line":26}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"100","location":{"end":{"column":50,"line":26},"start":{"column":40,"line":26}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"101","location":{"end":{"column":45,"line":26},"start":{"column":43,"line":26}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"102","location":{"end":{"column":4,"line":32},"start":{"column":64,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"103","location":{"end":{"column":4,"line":36},"start":{"column":64,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"104","location":{"end":{"column":4,"line":42},"start":{"column":64,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"105","location":{"end":{"column":4,"line":48},"start":{"column":96,"line":44}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"106","location":{"end":{"column":50,"line":45},"start":{"column":37,"line":45}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"107","location":{"end":{"column":50,"line":45},"start":{"column":37,"line":45}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"108","location":{"end":{"column":42,"line":45},"start":{"column":40,"line":45}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"109","location":{"end":{"column":4,"line":52},"start":{"column":43,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import { PathLike } from 'fs';\nimport * as path from 'path';\n\nimport { File } from '@stryker-mutator/api/core';\n\nimport { Callback, EmptyCallback, webpack } from '../types';\n\nexport default class OutputFileSystem implements webpack.OutputFileSystem {\n  private _files: {\n    [name: string]: string | Buffer;\n  };\n\n  constructor() {\n    this.purge();\n  }\n\n  public purge() {\n    this._files = Object.create(null);\n  }\n\n  public collectFiles(): File[] {\n    return Object.keys(this._files).map(fileName => new File(fileName, this._files[fileName]));\n  }\n\n  public mkdirp(_dir: string, opts: any, cb?: Callback<string>): void {\n    const callback: Callback<string> = cb || opts;\n    callback(null);\n  }\n\n  public rmdir(_name: PathLike, callback: EmptyCallback): void {\n    callback();\n  }\n\n  public mkdir(_name: PathLike, callback: EmptyCallback): void {\n    callback();\n  }\n\n  public unlink(name: PathLike, callback: EmptyCallback): void {\n    const fullName = path.resolve(name.toString());\n    delete this._files[fullName];\n    callback();\n  }\n\n  public writeFile(name: PathLike | number, data: any, options: any, cb?: EmptyCallback): void {\n    const callback: EmptyCallback = cb || options;\n    this._files[path.resolve(name.toString())] = data;\n    callback();\n  }\n\n  public join(...paths: string[]): string {\n    return path.join(...paths);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/webpack-transpiler/src/index.ts":{"language":"typescript","mutants":[{"id":"110","location":{"end":{"column":113,"line":7},"start":{"column":31,"line":7}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"111","location":{"end":{"column":85,"line":7},"start":{"column":76,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"112","location":{"end":{"column":2,"line":14},"start":{"column":80,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import { commonTokens, declareFactoryPlugin, Injector, PluginKind, tokens, TranspilerPluginContext } from '@stryker-mutator/api/plugin';\n\nimport ConfigLoader from './compiler/ConfigLoader';\nimport { pluginTokens } from './pluginTokens';\nimport WebpackTranspiler from './WebpackTranspiler';\n\nexport const strykerPlugins = [declareFactoryPlugin(PluginKind.Transpiler, 'webpack', webpackTranspilerFactory)];\n\nfunction webpackTranspilerFactory(injector: Injector<TranspilerPluginContext>) {\n  return injector\n    .provideValue(pluginTokens.require, require)\n    .provideClass(pluginTokens.configLoader, ConfigLoader)\n    .injectClass(WebpackTranspiler);\n}\nwebpackTranspilerFactory.inject = tokens(commonTokens.injector);\n"},"/home/runner/work/stryker/stryker/packages/webpack-transpiler/src/pluginTokens.ts":{"language":"typescript","mutants":[{"id":"113","location":{"end":{"column":2,"line":3},"start":{"column":54,"line":1}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"114","location":{"end":{"column":2,"line":8},"start":{"column":43,"line":5}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"115","location":{"end":{"column":45,"line":6},"start":{"column":31,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"116","location":{"end":{"column":35,"line":7},"start":{"column":26,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"function stringLiteral<T extends string>(literal: T) {\n  return literal;\n}\n\nexport const pluginTokens = Object.freeze({\n  configLoader: stringLiteral('configLoader'),\n  require: stringLiteral('require')\n});\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}}