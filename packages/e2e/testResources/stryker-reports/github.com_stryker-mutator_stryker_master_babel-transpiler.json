{"files":{"/home/runner/work/stryker/stryker/packages/babel-transpiler/src/BabelConfigReader.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":34,"line":17},"start":{"column":27,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1","location":{"end":{"column":64,"line":18},"start":{"column":51,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2","location":{"end":{"column":63,"line":19},"start":{"column":54,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"3","location":{"end":{"column":69,"line":20},"start":{"column":57,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"4","location":{"end":{"column":2,"line":26},"start":{"column":74,"line":22}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"5","location":{"end":{"column":31,"line":23},"start":{"column":29,"line":23}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"6","location":{"end":{"column":26,"line":25},"start":{"column":16,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"7","location":{"end":{"column":4,"line":43},"start":{"column":73,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"8","location":{"end":{"column":6,"line":36},"start":{"column":45,"line":33}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"9","location":{"end":{"column":6,"line":40},"start":{"column":27,"line":37}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"10","location":{"end":{"column":78,"line":41},"start":{"column":20,"line":41}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"11","location":{"end":{"column":4,"line":72},"start":{"column":132,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"12","location":{"end":{"column":25,"line":46},"start":{"column":9,"line":46}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"13","location":{"end":{"column":25,"line":46},"start":{"column":9,"line":46}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"14","location":{"end":{"column":6,"line":70},"start":{"column":27,"line":46}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"15","location":{"end":{"column":72,"line":48},"start":{"column":22,"line":48}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"16","location":{"end":{"column":37,"line":49},"start":{"column":11,"line":49}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"17","location":{"end":{"column":37,"line":49},"start":{"column":11,"line":49}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"18","location":{"end":{"column":8,"line":67},"start":{"column":39,"line":49}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"19","location":{"end":{"column":10,"line":64},"start":{"column":13,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"20","location":{"end":{"column":59,"line":51},"start":{"column":15,"line":51}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"21","location":{"end":{"column":59,"line":51},"start":{"column":15,"line":51}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"22","location":{"end":{"column":45,"line":51},"start":{"column":42,"line":51}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"23","location":{"end":{"column":59,"line":51},"start":{"column":46,"line":51}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"24","location":{"end":{"column":12,"line":53},"start":{"column":61,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"25","location":{"end":{"column":63,"line":54},"start":{"column":15,"line":54}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"26","location":{"end":{"column":63,"line":54},"start":{"column":15,"line":54}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"27","location":{"end":{"column":45,"line":54},"start":{"column":42,"line":54}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"28","location":{"end":{"column":63,"line":54},"start":{"column":46,"line":54}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"29","location":{"end":{"column":12,"line":62},"start":{"column":65,"line":54}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"30","location":{"end":{"column":45,"line":56},"start":{"column":17,"line":56}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"31","location":{"end":{"column":45,"line":56},"start":{"column":17,"line":56}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"32","location":{"end":{"column":34,"line":56},"start":{"column":31,"line":56}},"mutatorName":"EqualityOperator","replacement":"!==","status":"NoCoverage"},{"id":"33","location":{"end":{"column":45,"line":56},"start":{"column":35,"line":56}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"34","location":{"end":{"column":14,"line":59},"start":{"column":47,"line":56}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"35","location":{"end":{"column":14,"line":61},"start":{"column":20,"line":59}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"36","location":{"end":{"column":64,"line":63},"start":{"column":58,"line":63}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"37","location":{"end":{"column":10,"line":66},"start":{"column":25,"line":64}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"38","location":{"end":{"column":79,"line":65},"start":{"column":26,"line":65}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"39","location":{"end":{"column":8,"line":69},"start":{"column":14,"line":67}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"40","location":{"end":{"column":72,"line":68},"start":{"column":24,"line":68}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import * as fs from 'fs';\nimport * as path from 'path';\n\nimport { StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\n\nimport * as babel from './helpers/babelWrapper';\n\nexport interface StrykerBabelConfig {\n  extensions: readonly string[];\n  options: babel.TransformOptions;\n  optionsFile: string | null;\n  optionsApi?: Partial<babel.ConfigAPI>;\n}\n\nexport const CONFIG_KEY = 'babel';\nexport const FILE_KEY: keyof StrykerBabelConfig = 'optionsFile';\nexport const OPTIONS_KEY: keyof StrykerBabelConfig = 'options';\nexport const EXTENSIONS_KEY: keyof StrykerBabelConfig = 'extensions';\n\nconst DEFAULT_BABEL_CONFIG: Readonly<StrykerBabelConfig> = Object.freeze({\n  extensions: Object.freeze([]),\n  options: Object.freeze({}),\n  optionsFile: '.babelrc'\n});\n\nexport class BabelConfigReader {\n  public static inject = tokens(commonTokens.logger);\n  constructor(private readonly log: Logger) {}\n\n  public readConfig(strykerOptions: StrykerOptions): StrykerBabelConfig {\n    const babelConfig: StrykerBabelConfig = {\n      ...DEFAULT_BABEL_CONFIG,\n      ...strykerOptions[CONFIG_KEY]\n    };\n    babelConfig.options = {\n      ...this.readBabelOptionsFromFile(babelConfig.optionsFile, babelConfig.optionsApi),\n      ...babelConfig.options\n    };\n    this.log.debug(`Babel config is: ${JSON.stringify(babelConfig, null, 2)}`);\n    return babelConfig;\n  }\n\n  private readBabelOptionsFromFile(relativeFileName: string | null, optionsApi?: Partial<babel.ConfigAPI>): babel.TransformOptions {\n    if (relativeFileName) {\n      const babelrcPath = path.resolve(relativeFileName);\n      this.log.debug(`Reading .babelrc file from path \"${babelrcPath}\"`);\n      if (fs.existsSync(babelrcPath)) {\n        try {\n          if (path.basename(babelrcPath) === '.babelrc.js') {\n            return require(babelrcPath) as babel.TransformOptions;\n          }\n          if (path.basename(babelrcPath) === 'babel.config.js') {\n            const config = require(babelrcPath);\n            if (typeof config === 'function') {\n              const configFunction = config as babel.ConfigFunction;\n              return configFunction(optionsApi as babel.ConfigAPI);\n            } else {\n              return config as babel.TransformOptions;\n            }\n          }\n          return JSON.parse(fs.readFileSync(babelrcPath, 'utf8')) as babel.TransformOptions;\n        } catch (error) {\n          this.log.error(`Error while reading \"${babelrcPath}\" file: ${error}`);\n        }\n      } else {\n        this.log.error(`babelrc file does not exist at: ${babelrcPath}`);\n      }\n    }\n    return {};\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/babel-transpiler/src/BabelTranspiler.ts":{"language":"typescript","mutants":[{"id":"41","location":{"end":{"column":2,"line":16},"start":{"column":85,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"42","location":{"end":{"column":51,"line":15},"start":{"column":32,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"43","location":{"end":{"column":106,"line":24},"start":{"column":87,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"44","location":{"end":{"column":4,"line":34},"start":{"column":106,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"45","location":{"end":{"column":26,"line":26},"start":{"column":9,"line":26}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"46","location":{"end":{"column":26,"line":26},"start":{"column":9,"line":26}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"47","location":{"end":{"column":6,"line":30},"start":{"column":28,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"48","location":{"end":{"column":180,"line":28},"start":{"column":9,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"49","location":{"end":{"column":78,"line":33},"start":{"column":23,"line":33}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"50","location":{"end":{"column":4,"line":38},"start":{"column":76,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"51","location":{"end":{"column":62,"line":37},"start":{"column":22,"line":37}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"52","location":{"end":{"column":4,"line":50},"start":{"column":51,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"53","location":{"end":{"column":69,"line":41},"start":{"column":9,"line":41}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"54","location":{"end":{"column":69,"line":41},"start":{"column":9,"line":41}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"55","location":{"end":{"column":68,"line":41},"start":{"column":30,"line":41}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"56","location":{"end":{"column":68,"line":41},"start":{"column":37,"line":41}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"57","location":{"end":{"column":68,"line":41},"start":{"column":37,"line":41}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"58","location":{"end":{"column":44,"line":41},"start":{"column":41,"line":41}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"59","location":{"end":{"column":6,"line":47},"start":{"column":71,"line":41}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"60","location":{"end":{"column":8,"line":44},"start":{"column":11,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"61","location":{"end":{"column":8,"line":46},"start":{"column":23,"line":44}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"62","location":{"end":{"column":72,"line":45},"start":{"column":32,"line":45}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"63","location":{"end":{"column":6,"line":49},"start":{"column":12,"line":47}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"64","location":{"end":{"column":4,"line":68},"start":{"column":37,"line":52}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"65","location":{"end":{"column":6,"line":57},"start":{"column":53,"line":53}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"66","location":{"end":{"column":96,"line":58},"start":{"column":45,"line":58}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"67","location":{"end":{"column":16,"line":60},"start":{"column":9,"line":60}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"68","location":{"end":{"column":16,"line":60},"start":{"column":9,"line":60}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"69","location":{"end":{"column":16,"line":60},"start":{"column":9,"line":60}},"mutatorName":"BooleanLiteral","replacement":"result","status":"CompileError"},{"id":"70","location":{"end":{"column":6,"line":63},"start":{"column":18,"line":60}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"71","location":{"end":{"column":65,"line":63},"start":{"column":16,"line":63}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"72","location":{"end":{"column":65,"line":63},"start":{"column":16,"line":63}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"73","location":{"end":{"column":44,"line":63},"start":{"column":42,"line":63}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"74","location":{"end":{"column":31,"line":63},"start":{"column":28,"line":63}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"75","location":{"end":{"column":60,"line":63},"start":{"column":57,"line":63}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"76","location":{"end":{"column":6,"line":65},"start":{"column":67,"line":63}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"77","location":{"end":{"column":115,"line":64},"start":{"column":23,"line":64}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"78","location":{"end":{"column":6,"line":67},"start":{"column":12,"line":65}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"79","location":{"end":{"column":4,"line":77},"start":{"column":42,"line":70}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"80","location":{"end":{"column":19,"line":72},"start":{"column":9,"line":72}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"81","location":{"end":{"column":19,"line":72},"start":{"column":9,"line":72}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"82","location":{"end":{"column":6,"line":74},"start":{"column":21,"line":72}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"83","location":{"end":{"column":6,"line":76},"start":{"column":12,"line":74}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import * as path from 'path';\n\nimport { File, StrykerOptions } from '@stryker-mutator/api/core';\nimport { commonTokens, Injector, tokens, TranspilerPluginContext } from '@stryker-mutator/api/plugin';\nimport { Transpiler } from '@stryker-mutator/api/transpile';\nimport { StrykerError } from '@stryker-mutator/util';\n\nimport { BabelConfigReader, StrykerBabelConfig } from './BabelConfigReader';\nimport * as babel from './helpers/babelWrapper';\nimport { toJSFileName } from './helpers/helpers';\n\nconst DEFAULT_EXTENSIONS: readonly string[] = (babel as any).DEFAULT_EXTENSIONS;\n\nexport function babelTranspilerFactory(injector: Injector<TranspilerPluginContext>) {\n  return injector.provideClass('babelConfigReader', BabelConfigReader).injectClass(BabelTranspiler);\n}\nbabelTranspilerFactory.inject = tokens(commonTokens.injector);\n\nexport class BabelTranspiler implements Transpiler {\n  private readonly babelConfig: StrykerBabelConfig;\n  private readonly projectRoot: string;\n  private readonly extensions: readonly string[];\n\n  public static inject = tokens(commonTokens.options, commonTokens.produceSourceMaps, 'babelConfigReader');\n  constructor(options: StrykerOptions, produceSourceMaps: boolean, babelConfigReader: BabelConfigReader) {\n    if (produceSourceMaps) {\n      throw new Error(\n        `Invalid \\`coverageAnalysis\\` \"${options.coverageAnalysis}\" is not supported by the stryker-babel-transpiler. Not able to produce source maps yet. Please set it to \"off\".`\n      );\n    }\n    this.babelConfig = babelConfigReader.readConfig(options);\n    this.projectRoot = this.determineProjectRoot();\n    this.extensions = [...DEFAULT_EXTENSIONS, ...this.babelConfig.extensions];\n  }\n\n  public async transpile(files: readonly File[]): Promise<readonly File[]> {\n    return files.map(file => this.transpileFileIfNeeded(file));\n  }\n\n  private transpileFileIfNeeded(file: File): File {\n    if (this.extensions.some(ext => ext === path.extname(file.name))) {\n      try {\n        return this.transpileFile(file);\n      } catch (error) {\n        throw new StrykerError(`Error while transpiling \"${file.name}\"`, error);\n      }\n    } else {\n      return file; // pass through\n    }\n  }\n\n  private transpileFile(file: File) {\n    const relativeOptions: babel.TransformOptions = {\n      cwd: this.projectRoot,\n      filename: file.name,\n      filenameRelative: path.relative(this.projectRoot, file.name)\n    };\n    const options: babel.TransformOptions = { ...this.babelConfig.options, ...relativeOptions };\n    const result: babel.BabelFileResult | null = babel.transformSync(file.textContent, options);\n    if (!result) {\n      // File is ignored by babel\n      return file;\n    } else if (result.code === undefined || result.code === null) {\n      throw new Error(`Could not transpile file \"${file.name}\". Babel transform function delivered \\`undefined\\`.`);\n    } else {\n      return new File(toJSFileName(file.name), result.code);\n    }\n  }\n\n  private determineProjectRoot(): string {\n    const configFile = this.babelConfig.optionsFile;\n    if (configFile) {\n      return path.dirname(configFile);\n    } else {\n      return process.cwd();\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/babel-transpiler/src/helpers/helpers.ts":{"language":"typescript","mutants":[{"id":"84","location":{"end":{"column":2,"line":7},"start":{"column":48,"line":3}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"85","location":{"end":{"column":70,"line":5},"start":{"column":69,"line":5}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"86","location":{"end":{"column":76,"line":5},"start":{"column":71,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import * as path from 'path';\n\nexport function toJSFileName(fileName: string) {\n  const fileNameInfo = path.parse(fileName);\n  const newFileName = path.join(fileNameInfo.dir, fileNameInfo.name + '.js');\n  return newFileName;\n}\n"},"/home/runner/work/stryker/stryker/packages/babel-transpiler/src/index.ts":{"language":"typescript","mutants":[{"id":"87","location":{"end":{"column":109,"line":5},"start":{"column":31,"line":5}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage"},{"id":"88","location":{"end":{"column":83,"line":5},"start":{"column":76,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"}],"source":"import { declareFactoryPlugin, PluginKind } from '@stryker-mutator/api/plugin';\n\nimport { babelTranspilerFactory } from './BabelTranspiler';\n\nexport const strykerPlugins = [declareFactoryPlugin(PluginKind.Transpiler, 'babel', babelTranspilerFactory)];\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}}