{"files":{"/home/runner/work/stryker/stryker/packages/jest-runner/src/JestConfigEditor.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":38,"line":10},"start":{"column":30,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1","location":{"end":{"column":4,"line":25},"start":{"column":44,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2","location":{"end":{"column":50,"line":15},"start":{"column":26,"line":15}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3","location":{"end":{"column":50,"line":15},"start":{"column":26,"line":15}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"4","location":{"end":{"column":47,"line":15},"start":{"column":45,"line":15}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"5","location":{"end":{"column":122,"line":18},"start":{"column":38,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"6","location":{"end":{"column":122,"line":18},"start":{"column":38,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"7","location":{"end":{"column":101,"line":18},"start":{"column":99,"line":18}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"8","location":{"end":{"column":98,"line":18},"start":{"column":38,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"9","location":{"end":{"column":98,"line":18},"start":{"column":38,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"10","location":{"end":{"column":71,"line":18},"start":{"column":69,"line":18}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"11","location":{"end":{"column":127,"line":21},"start":{"column":33,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"12","location":{"end":{"column":127,"line":21},"start":{"column":33,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"13","location":{"end":{"column":61,"line":21},"start":{"column":59,"line":21}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"14","location":{"end":{"column":4,"line":38},"start":{"column":66,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"15","location":{"end":{"column":58,"line":30},"start":{"column":7,"line":29}},"mutatorName":"ConditionalExpression","replacement":"case DEFAULT_PROJECT_NAME:","status":"Killed"},{"id":"16","location":{"end":{"column":64,"line":32},"start":{"column":7,"line":31}},"mutatorName":"ConditionalExpression","replacement":"case 'react':","status":"Killed"},{"id":"17","location":{"end":{"column":19,"line":31},"start":{"column":12,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"18","location":{"end":{"column":66,"line":34},"start":{"column":7,"line":33}},"mutatorName":"ConditionalExpression","replacement":"case 'react-ts':","status":"Killed"},{"id":"19","location":{"end":{"column":22,"line":33},"start":{"column":12,"line":33}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"20","location":{"end":{"column":73,"line":36},"start":{"column":7,"line":35}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"CompileError"},{"id":"21","location":{"end":{"column":71,"line":36},"start":{"column":25,"line":36}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"22","location":{"end":{"column":4,"line":42},"start":{"column":58,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import { Config, ConfigEditor } from '@stryker-mutator/api/config';\nimport jest from 'jest';\n\nimport CustomJestConfigLoader from './configLoaders/CustomJestConfigLoader';\nimport JestConfigLoader from './configLoaders/JestConfigLoader';\nimport ReactScriptsJestConfigLoader from './configLoaders/ReactScriptsJestConfigLoader';\nimport ReactScriptsTSJestConfigLoader from './configLoaders/ReactScriptsTSJestConfigLoader';\nimport JEST_OVERRIDE_OPTIONS from './jestOverrideOptions';\n\nconst DEFAULT_PROJECT_NAME = 'custom';\n\nexport default class JestConfigEditor implements ConfigEditor {\n  public edit(strykerConfig: Config): void {\n    // If there is no Jest property on the Stryker config create it\n    strykerConfig.jest = strykerConfig.jest || {};\n\n    // When no projectType is set, set it to the default\n    strykerConfig.jest.projectType = strykerConfig.jest.projectType || strykerConfig.jest.project || DEFAULT_PROJECT_NAME;\n\n    // When no config property is set, load the configuration with the project type\n    strykerConfig.jest.config = strykerConfig.jest.config || this.getConfigLoader(strykerConfig.jest.projectType).loadConfig();\n\n    // Override some of the config properties to optimise Jest for Stryker\n    strykerConfig.jest.config = this.overrideProperties(strykerConfig.jest.config);\n  }\n\n  private getConfigLoader(projectType: string): JestConfigLoader {\n    switch (projectType.toLowerCase()) {\n      case DEFAULT_PROJECT_NAME:\n        return new CustomJestConfigLoader(process.cwd());\n      case 'react':\n        return new ReactScriptsJestConfigLoader(process.cwd());\n      case 'react-ts':\n        return new ReactScriptsTSJestConfigLoader(process.cwd());\n      default:\n        throw new Error(`No configLoader available for ${projectType}`);\n    }\n  }\n\n  private overrideProperties(config: jest.Configuration) {\n    return Object.assign(config, JEST_OVERRIDE_OPTIONS);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/jest-runner/src/JestTestRunner.ts":{"language":"typescript","mutants":[{"id":"23","location":{"end":{"column":2,"line":16},"start":{"column":75,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"24","location":{"end":{"column":66,"line":13},"start":{"column":47,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"25","location":{"end":{"column":53,"line":19},"start":{"column":34,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"26","location":{"end":{"column":57,"line":20},"start":{"column":40,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"27","location":{"end":{"column":4,"line":56},"start":{"column":5,"line":33}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"28","location":{"end":{"column":50,"line":39},"start":{"column":9,"line":39}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"29","location":{"end":{"column":50,"line":39},"start":{"column":9,"line":39}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"30","location":{"end":{"column":40,"line":39},"start":{"column":37,"line":39}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Survived"},{"id":"31","location":{"end":{"column":6,"line":41},"start":{"column":52,"line":39}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"32","location":{"end":{"column":41,"line":40},"start":{"column":37,"line":40}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"33","location":{"end":{"column":36,"line":43},"start":{"column":9,"line":43}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"34","location":{"end":{"column":36,"line":43},"start":{"column":9,"line":43}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"35","location":{"end":{"column":6,"line":45},"start":{"column":38,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"36","location":{"end":{"column":141,"line":44},"start":{"column":22,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"37","location":{"end":{"column":6,"line":49},"start":{"column":12,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"38","location":{"end":{"column":140,"line":47},"start":{"column":9,"line":47}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"39","location":{"end":{"column":64,"line":54},"start":{"column":31,"line":54}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"40","location":{"end":{"column":64,"line":54},"start":{"column":31,"line":54}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"41","location":{"end":{"column":50,"line":54},"start":{"column":48,"line":54}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"42","location":{"end":{"column":64,"line":55},"start":{"column":20,"line":55}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"43","location":{"end":{"column":4,"line":76},"start":{"column":61,"line":58}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"44","location":{"end":{"column":68,"line":68},"start":{"column":12,"line":68}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"45","location":{"end":{"column":43,"line":69},"start":{"column":15,"line":69}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"46","location":{"end":{"column":6,"line":75},"start":{"column":12,"line":71}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"47","location":{"end":{"column":52,"line":73},"start":{"column":15,"line":73}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"48","location":{"end":{"column":52,"line":73},"start":{"column":15,"line":73}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"49","location":{"end":{"column":50,"line":73},"start":{"column":49,"line":73}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"50","location":{"end":{"column":50,"line":73},"start":{"column":49,"line":73}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"51","location":{"end":{"column":4,"line":84},"start":{"column":24,"line":78}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"52","location":{"end":{"column":37,"line":81},"start":{"column":9,"line":81}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"53","location":{"end":{"column":37,"line":81},"start":{"column":9,"line":81}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"54","location":{"end":{"column":37,"line":81},"start":{"column":9,"line":81}},"mutatorName":"BooleanLiteral","replacement":"this.processEnvRef.NODE_ENV","status":"Killed"},{"id":"55","location":{"end":{"column":6,"line":83},"start":{"column":39,"line":81}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"56","location":{"end":{"column":43,"line":82},"start":{"column":37,"line":82}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"57","location":{"end":{"column":4,"line":101},"start":{"column":77,"line":86}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"58","location":{"end":{"column":41,"line":87},"start":{"column":39,"line":87}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"59","location":{"end":{"column":6,"line":98},"start":{"column":45,"line":89}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"60","location":{"end":{"column":8,"line":97},"start":{"column":57,"line":90}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"61","location":{"end":{"column":10,"line":96},"start":{"column":26,"line":91}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"62","location":{"end":{"column":4,"line":114},"start":{"column":53,"line":103}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"63","location":{"end":{"column":35,"line":106},"start":{"column":7,"line":105}},"mutatorName":"ConditionalExpression","replacement":"case 'passed':","status":"Killed"},{"id":"64","location":{"end":{"column":20,"line":105},"start":{"column":12,"line":105}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"65","location":{"end":{"column":35,"line":108},"start":{"column":7,"line":107}},"mutatorName":"ConditionalExpression","replacement":"case 'pending':","status":"Survived"},{"id":"66","location":{"end":{"column":21,"line":107},"start":{"column":12,"line":107}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"67","location":{"end":{"column":35,"line":110},"start":{"column":7,"line":109}},"mutatorName":"ConditionalExpression","replacement":"case 'todo':","status":"Killed"},{"id":"68","location":{"end":{"column":18,"line":109},"start":{"column":12,"line":109}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"69","location":{"end":{"column":34,"line":112},"start":{"column":7,"line":111}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"CompileError"}],"source":"import { StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, Injector, OptionsContext, tokens } from '@stryker-mutator/api/plugin';\nimport { RunOptions, RunResult, RunStatus, TestResult, TestRunner, TestStatus } from '@stryker-mutator/api/test_runner';\nimport jest from 'jest';\n\nimport { JEST_VERSION_TOKEN, jestTestAdapterFactory } from './jestTestAdapters';\nimport JestTestAdapter from './jestTestAdapters/JestTestAdapter';\n\nexport function jestTestRunnerFactory(injector: Injector<OptionsContext>) {\n  return injector\n    .provideValue(PROCESS_ENV_TOKEN, process.env)\n    .provideValue(JEST_VERSION_TOKEN, require('jest/package.json').version as string)\n    .provideFactory(JEST_TEST_ADAPTER_TOKEN, jestTestAdapterFactory)\n    .injectClass(JestTestRunner);\n}\njestTestRunnerFactory.inject = tokens(commonTokens.injector);\n\nexport const PROCESS_ENV_TOKEN = 'PROCESS_ENV_TOKEN';\nexport const JEST_TEST_ADAPTER_TOKEN = 'jestTestAdapter';\n\nexport default class JestTestRunner implements TestRunner {\n  private readonly jestConfig: jest.Configuration;\n\n  private readonly enableFindRelatedTests: boolean;\n\n  public static inject = tokens(commonTokens.logger, commonTokens.options, PROCESS_ENV_TOKEN, JEST_TEST_ADAPTER_TOKEN);\n  constructor(\n    private readonly log: Logger,\n    options: StrykerOptions,\n    private readonly processEnvRef: NodeJS.ProcessEnv,\n    private readonly jestTestAdapter: JestTestAdapter\n  ) {\n    // Get jest configuration from stryker options and assign it to jestConfig\n    this.jestConfig = options.jest.config;\n\n    // Get enableFindRelatedTests from stryker jest options or default to true\n    this.enableFindRelatedTests = options.jest.enableFindRelatedTests;\n    if (this.enableFindRelatedTests === undefined) {\n      this.enableFindRelatedTests = true;\n    }\n\n    if (this.enableFindRelatedTests) {\n      this.log.debug('Running jest with --findRelatedTests flag. Set jest.enableFindRelatedTests to false to run all tests on every mutant.');\n    } else {\n      this.log.debug(\n        'Running jest without --findRelatedTests flag. Set jest.enableFindRelatedTests to true to run only relevant tests on every mutant.'\n      );\n    }\n\n    // basePath will be used in future releases of Stryker as a way to define the project root\n    // Default to process.cwd when basePath is not set for now, should be removed when issue is solved\n    // https://github.com/stryker-mutator/stryker/issues/650\n    this.jestConfig.rootDir = options.basePath || process.cwd();\n    this.log.debug(`Project root is ${this.jestConfig.rootDir}`);\n  }\n\n  public async run(options: RunOptions): Promise<RunResult> {\n    this.setNodeEnv();\n    const { results } = await this.jestTestAdapter.run(\n      this.jestConfig,\n      process.cwd(),\n      this.enableFindRelatedTests ? options.mutatedFileName : undefined\n    );\n\n    // Get the non-empty errorMessages from the jest RunResult, it's safe to cast to Array<string> here because we filter the empty error messages\n    const errorMessages = results.testResults\n      .map((testSuite: jest.TestResult) => testSuite.failureMessage)\n      .filter(errorMessage => errorMessage) as string[];\n\n    return {\n      errorMessages,\n      status: results.numRuntimeErrorTestSuites > 0 ? RunStatus.Error : RunStatus.Complete,\n      tests: this.processTestResults(results.testResults)\n    };\n  }\n\n  private setNodeEnv() {\n    // Jest CLI will set process.env.NODE_ENV to 'test' when it's null, do the same here\n    // https://github.com/facebook/jest/blob/master/packages/jest-cli/bin/jest.js#L12-L14\n    if (!this.processEnvRef.NODE_ENV) {\n      this.processEnvRef.NODE_ENV = 'test';\n    }\n  }\n\n  private processTestResults(suiteResults: jest.TestResult[]): TestResult[] {\n    const testResults: TestResult[] = [];\n\n    for (const suiteResult of suiteResults) {\n      for (const testResult of suiteResult.testResults) {\n        testResults.push({\n          failureMessages: testResult.failureMessages,\n          name: testResult.fullName,\n          status: this.determineTestResultStatus(testResult.status),\n          timeSpentMs: testResult.duration ? testResult.duration : 0\n        });\n      }\n    }\n\n    return testResults;\n  }\n\n  private determineTestResultStatus(status: string) {\n    switch (status) {\n      case 'passed':\n        return TestStatus.Success;\n      case 'pending':\n        return TestStatus.Skipped;\n      case 'todo':\n        return TestStatus.Skipped;\n      default:\n        return TestStatus.Failed;\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/jest-runner/src/configLoaders/CustomJestConfigLoader.ts":{"language":"typescript","mutants":[{"id":"70","location":{"end":{"column":4,"line":16},"start":{"column":93,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"71","location":{"end":{"column":4,"line":21},"start":{"column":43,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"72","location":{"end":{"column":101,"line":19},"start":{"column":24,"line":19}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"73","location":{"end":{"column":101,"line":19},"start":{"column":24,"line":19}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"74","location":{"end":{"column":98,"line":19},"start":{"column":96,"line":19}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"75","location":{"end":{"column":95,"line":19},"start":{"column":24,"line":19}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"76","location":{"end":{"column":95,"line":19},"start":{"column":24,"line":19}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"77","location":{"end":{"column":62,"line":19},"start":{"column":60,"line":19}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"78","location":{"end":{"column":4,"line":29},"start":{"column":42,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"79","location":{"end":{"column":6,"line":26},"start":{"column":9,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"80","location":{"end":{"column":72,"line":25},"start":{"column":56,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"81","location":{"end":{"column":4,"line":37},"start":{"column":39,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"82","location":{"end":{"column":6,"line":34},"start":{"column":9,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"83","location":{"end":{"column":84,"line":33},"start":{"column":70,"line":33}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"84","location":{"end":{"column":93,"line":33},"start":{"column":87,"line":33}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import fs = require('fs');\nimport path from 'path';\n\nimport jest from 'jest';\n\nimport JestConfigLoader from './JestConfigLoader';\n\n/**\n * The Default config loader will load the Jest configuration using the package.json in the package root\n */\nexport default class CustomJestConfigLoader implements JestConfigLoader {\n  private readonly _projectRoot: string;\n\n  constructor(projectRoot: string, private readonly _loader: NodeRequireFunction = require) {\n    this._projectRoot = projectRoot;\n  }\n\n  public loadConfig(): jest.Configuration {\n    const jestConfig = this.readConfigFromJestConfigFile() || this.readConfigFromPackageJson() || {};\n    return jestConfig;\n  }\n\n  private readConfigFromJestConfigFile() {\n    try {\n      return this._loader(path.join(this._projectRoot, 'jest.config.js'));\n    } catch {\n      /* Don't return anything (implicitly return undefined) */\n    }\n  }\n\n  private readConfigFromPackageJson() {\n    try {\n      return JSON.parse(fs.readFileSync(path.join(this._projectRoot, 'package.json'), 'utf8')).jest;\n    } catch {\n      /* Don't return anything (implicitly return undefined) */\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/jest-runner/src/configLoaders/ReactScriptsJestConfigLoader.ts":{"language":"typescript","mutants":[{"id":"85","location":{"end":{"column":4,"line":14},"start":{"column":96,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"86","location":{"end":{"column":4,"line":34},"start":{"column":43,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"87","location":{"end":{"column":6,"line":28},"start":{"column":9,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"88","location":{"end":{"column":87,"line":19},"start":{"column":59,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"89","location":{"end":{"column":94,"line":19},"start":{"column":90,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"90","location":{"end":{"column":50,"line":25},"start":{"column":43,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"91","location":{"end":{"column":6,"line":33},"start":{"column":17,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"92","location":{"end":{"column":72,"line":29},"start":{"column":11,"line":29}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"93","location":{"end":{"column":72,"line":29},"start":{"column":11,"line":29}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"94","location":{"end":{"column":42,"line":29},"start":{"column":40,"line":29}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"95","location":{"end":{"column":53,"line":29},"start":{"column":50,"line":29}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"96","location":{"end":{"column":72,"line":29},"start":{"column":54,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"97","location":{"end":{"column":8,"line":31},"start":{"column":74,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"98","location":{"end":{"column":123,"line":30},"start":{"column":21,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"99","location":{"end":{"column":4,"line":38},"start":{"column":72,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"100","location":{"end":{"column":34,"line":37},"start":{"column":12,"line":37}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"101","location":{"end":{"column":34,"line":37},"start":{"column":12,"line":37}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"102","location":{"end":{"column":24,"line":37},"start":{"column":21,"line":37}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"103","location":{"end":{"column":4,"line":42},"start":{"column":78,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"104","location":{"end":{"column":113,"line":41},"start":{"column":34,"line":41}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"105","location":{"end":{"column":138,"line":41},"start":{"column":133,"line":41}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"}],"source":"import path from 'path';\n\nimport jest from 'jest';\n\nimport { createReactJestConfig } from '../utils/createReactJestConfig';\n\nimport JestConfigLoader from './JestConfigLoader';\n\nexport default class ReactScriptsJestConfigLoader implements JestConfigLoader {\n  private readonly projectRoot: string;\n\n  constructor(projectRoot: string, private readonly resolve: RequireResolve = require.resolve) {\n    this.projectRoot = projectRoot;\n  }\n\n  public loadConfig(): jest.Configuration {\n    try {\n      // Get the location of react script, this is later used to generate the Jest configuration used for React projects.\n      const reactScriptsLocation = path.join(this.resolve('react-scripts/package.json'), '..');\n\n      // Create the React configuration for Jest\n      const jestConfiguration = this.createJestConfig(reactScriptsLocation);\n\n      // Set test environment to jsdom (otherwise Jest won't run)\n      jestConfiguration.testEnvironment = 'jsdom';\n\n      return jestConfiguration;\n    } catch (e) {\n      if (this.isNodeErrnoException(e) && e.code === 'MODULE_NOT_FOUND') {\n        throw Error('Unable to locate package react-scripts. This package is required when projectType is set to \"react\".');\n      }\n      throw e;\n    }\n  }\n\n  private isNodeErrnoException(arg: any): arg is NodeJS.ErrnoException {\n    return arg.code !== undefined;\n  }\n\n  private createJestConfig(reactScriptsLocation: string): jest.Configuration {\n    return createReactJestConfig((relativePath: string): string => path.join(reactScriptsLocation, relativePath), this.projectRoot, false);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/jest-runner/src/configLoaders/ReactScriptsTSJestConfigLoader.ts":{"language":"typescript","mutants":[{"id":"106","location":{"end":{"column":4,"line":14},"start":{"column":80,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"107","location":{"end":{"column":4,"line":34},"start":{"column":43,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"108","location":{"end":{"column":6,"line":28},"start":{"column":9,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"109","location":{"end":{"column":92,"line":19},"start":{"column":61,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"110","location":{"end":{"column":99,"line":19},"start":{"column":95,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"111","location":{"end":{"column":50,"line":25},"start":{"column":43,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"112","location":{"end":{"column":6,"line":33},"start":{"column":17,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"113","location":{"end":{"column":72,"line":29},"start":{"column":11,"line":29}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"114","location":{"end":{"column":72,"line":29},"start":{"column":11,"line":29}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"115","location":{"end":{"column":42,"line":29},"start":{"column":40,"line":29}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"116","location":{"end":{"column":53,"line":29},"start":{"column":50,"line":29}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"117","location":{"end":{"column":72,"line":29},"start":{"column":54,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"118","location":{"end":{"column":8,"line":31},"start":{"column":74,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"119","location":{"end":{"column":68,"line":30},"start":{"column":67,"line":30}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"120","location":{"end":{"column":66,"line":30},"start":{"column":21,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"121","location":{"end":{"column":134,"line":30},"start":{"column":69,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"122","location":{"end":{"column":4,"line":38},"start":{"column":72,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"123","location":{"end":{"column":34,"line":37},"start":{"column":12,"line":37}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"124","location":{"end":{"column":34,"line":37},"start":{"column":12,"line":37}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"125","location":{"end":{"column":24,"line":37},"start":{"column":21,"line":37}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"126","location":{"end":{"column":4,"line":42},"start":{"column":80,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"127","location":{"end":{"column":117,"line":41},"start":{"column":36,"line":41}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"128","location":{"end":{"column":142,"line":41},"start":{"column":137,"line":41}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"}],"source":"import * as path from 'path';\n\nimport jest from 'jest';\n\nimport { createReactTsJestConfig } from '../utils/createReactJestConfig';\n\nimport JestConfigLoader from './JestConfigLoader';\n\nexport default class ReactScriptsTSJestConfigLoader implements JestConfigLoader {\n  private readonly projectRoot: string;\n\n  constructor(projectRoot: string, private readonly resolve = require.resolve) {\n    this.projectRoot = projectRoot;\n  }\n\n  public loadConfig(): jest.Configuration {\n    try {\n      // Get the location of react-ts script, this is later used to generate the Jest configuration used for React projects.\n      const reactScriptsTsLocation = path.join(this.resolve('react-scripts-ts/package.json'), '..');\n\n      // Create the React configuration for Jest\n      const jestConfiguration = this.createJestConfig(reactScriptsTsLocation);\n\n      // Set test environment to jsdom (otherwise Jest won't run)\n      jestConfiguration.testEnvironment = 'jsdom';\n\n      return jestConfiguration;\n    } catch (e) {\n      if (this.isNodeErrnoException(e) && e.code === 'MODULE_NOT_FOUND') {\n        throw Error('Unable to locate package react-scripts-ts. ' + 'This package is required when projectType is set to \"react-ts\".');\n      }\n      throw e;\n    }\n  }\n\n  private isNodeErrnoException(arg: any): arg is NodeJS.ErrnoException {\n    return arg.code !== undefined;\n  }\n\n  private createJestConfig(reactScriptsTsLocation: string): jest.Configuration {\n    return createReactTsJestConfig((relativePath: string): string => path.join(reactScriptsTsLocation, relativePath), this.projectRoot, false);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/jest-runner/src/index.ts":{"language":"typescript","mutants":[{"id":"129","location":{"end":{"column":31,"line":6},"start":{"column":25,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"130","location":{"end":{"column":2,"line":11},"start":{"column":31,"line":8}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"131","location":{"end":{"column":53,"line":9},"start":{"column":47,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"132","location":{"end":{"column":53,"line":10},"start":{"column":47,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import { declareClassPlugin, declareFactoryPlugin, PluginKind } from '@stryker-mutator/api/plugin';\n\nimport JestConfigEditor from './JestConfigEditor';\nimport { jestTestRunnerFactory } from './JestTestRunner';\n\nprocess.env.BABEL_ENV = 'test';\n\nexport const strykerPlugins = [\n  declareClassPlugin(PluginKind.ConfigEditor, 'jest', JestConfigEditor),\n  declareFactoryPlugin(PluginKind.TestRunner, 'jest', jestTestRunnerFactory)\n];\n"},"/home/runner/work/stryker/stryker/packages/jest-runner/src/jestOverrideOptions.ts":{"language":"typescript","mutants":[{"id":"133","location":{"end":{"column":2,"line":18},"start":{"column":45,"line":1}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"134","location":{"end":{"column":25,"line":7},"start":{"column":20,"line":7}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"135","location":{"end":{"column":17,"line":10},"start":{"column":12,"line":10}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"136","location":{"end":{"column":14,"line":13},"start":{"column":9,"line":13}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"137","location":{"end":{"column":16,"line":17},"start":{"column":11,"line":17}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"}],"source":"const JEST_OVERRIDE_OPTIONS = Object.freeze({\n  // Prevent the user from using his or her own testResultProcessor because this might\n  // Mess with the way Stryker gets the results\n  testResultsProcessor: undefined,\n\n  // Disable code coverage, it is not used in Stryker and will only slow down the test runs\n  collectCoverage: false,\n\n  // Disable verbose logging, this will only slow down Stryker test runs\n  verbose: false,\n\n  // Disable bail so the jest process does not quit with a non-zero exit code\n  bail: false,\n\n  // Disable notifications for test results, this will otherwise show a notification about\n  // the results each time Stryker runs the tests\n  notify: false\n});\n\nexport default JEST_OVERRIDE_OPTIONS;\n"},"/home/runner/work/stryker/stryker/packages/jest-runner/src/jestTestAdapters/JestPromiseTestAdapter.ts":{"language":"typescript","mutants":[{"id":"138","location":{"end":{"column":4,"line":28},"start":{"column":120,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"139","location":{"end":{"column":30,"line":12},"start":{"column":28,"line":12}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"140","location":{"end":{"column":57,"line":14},"start":{"column":20,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"141","location":{"end":{"column":26,"line":15},"start":{"column":9,"line":15}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"142","location":{"end":{"column":26,"line":15},"start":{"column":9,"line":15}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"143","location":{"end":{"column":6,"line":17},"start":{"column":28,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"144","location":{"end":{"column":74,"line":16},"start":{"column":22,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"145","location":{"end":{"column":8,"line":25},"start":{"column":7,"line":20}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"146","location":{"end":{"column":84,"line":21},"start":{"column":13,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"147","location":{"end":{"column":84,"line":21},"start":{"column":13,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"148","location":{"end":{"column":33,"line":21},"start":{"column":31,"line":21}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"149","location":{"end":{"column":84,"line":21},"start":{"column":34,"line":21}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"150","location":{"end":{"column":58,"line":21},"start":{"column":39,"line":21}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"151","location":{"end":{"column":82,"line":21},"start":{"column":78,"line":21}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"152","location":{"end":{"column":24,"line":23},"start":{"column":20,"line":23}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"153","location":{"end":{"column":21,"line":24},"start":{"column":17,"line":24}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"154","location":{"end":{"column":20,"line":26},"start":{"column":7,"line":26}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"}],"source":"import { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport jest from 'jest';\n\nimport JestTestAdapter from './JestTestAdapter';\n\nexport default class JestPromiseTestAdapter implements JestTestAdapter {\n  public static inject = tokens(commonTokens.logger);\n  constructor(private readonly log: Logger) {}\n\n  public run(jestConfig: jest.Configuration, projectRoot: string, fileNameUnderTest?: string): Promise<jest.RunResult> {\n    jestConfig.reporters = [];\n    const config = JSON.stringify(jestConfig);\n    this.log.trace(`Invoking Jest with config ${config}`);\n    if (fileNameUnderTest) {\n      this.log.trace(`Only running tests related to ${fileNameUnderTest}`);\n    }\n\n    return jest.runCLI(\n      {\n        ...(fileNameUnderTest && { _: [fileNameUnderTest], findRelatedTests: true }),\n        config,\n        runInBand: true,\n        silent: true\n      },\n      [projectRoot]\n    );\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/jest-runner/src/jestTestAdapters/index.ts":{"language":"typescript","mutants":[{"id":"155","location":{"end":{"column":48,"line":8},"start":{"column":35,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"156","location":{"end":{"column":2,"line":17},"start":{"column":107,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"157","location":{"end":{"column":47,"line":11},"start":{"column":7,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"158","location":{"end":{"column":47,"line":11},"start":{"column":7,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"159","location":{"end":{"column":46,"line":11},"start":{"column":37,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"160","location":{"end":{"column":4,"line":14},"start":{"column":49,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"161","location":{"end":{"column":47,"line":12},"start":{"column":15,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"162","location":{"end":{"column":69,"line":13},"start":{"column":21,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"163","location":{"end":{"column":4,"line":16},"start":{"column":10,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import { Logger } from '@stryker-mutator/api/logging';\nimport { BaseContext, commonTokens, Injector, tokens } from '@stryker-mutator/api/plugin';\nimport semver from 'semver';\n\nimport JestPromiseAdapter from './JestPromiseTestAdapter';\nimport JestTestAdapter from './JestTestAdapter';\n\nexport const JEST_VERSION_TOKEN = 'jestVersion';\n\nexport function jestTestAdapterFactory(log: Logger, jestVersion: string, injector: Injector<BaseContext>) {\n  if (semver.satisfies(jestVersion, '<22.0.0')) {\n    log.debug('Detected Jest below 22.0.0: %s', jestVersion);\n    throw new Error('You need Jest version >= 22.0.0 to use Stryker');\n  } else {\n    return injector.injectClass(JestPromiseAdapter);\n  }\n}\n\njestTestAdapterFactory.inject = tokens(commonTokens.logger, JEST_VERSION_TOKEN, commonTokens.injector);\nexport { JestTestAdapter };\n"},"/home/runner/work/stryker/stryker/packages/jest-runner/src/utils/createReactJestConfig.ts":{"language":"typescript","mutants":[{"id":"164","location":{"end":{"column":2,"line":7},"start":{"column":83,"line":3}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"165","location":{"end":{"column":56,"line":4},"start":{"column":12,"line":4}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"166","location":{"end":{"column":56,"line":4},"start":{"column":12,"line":4}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"167","location":{"end":{"column":21,"line":4},"start":{"column":19,"line":4}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"168","location":{"end":{"column":2,"line":11},"start":{"column":139,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"169","location":{"end":{"column":80,"line":10},"start":{"column":34,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"170","location":{"end":{"column":2,"line":15},"start":{"column":141,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"171","location":{"end":{"column":83,"line":14},"start":{"column":34,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import jest from 'jest';\n\nconst resolveCreateJestConfig = (path: string, loader?: NodeRequire): Function => {\n  loader = loader || /* istanbul ignore next */ require;\n\n  return loader(path);\n};\n\nexport function createReactJestConfig(resolve: Function, projectRoot: string, ejected: boolean, loader?: NodeRequire): jest.Configuration {\n  return resolveCreateJestConfig('react-scripts/scripts/utils/createJestConfig', loader)(resolve, projectRoot, ejected);\n}\n\nexport function createReactTsJestConfig(resolve: Function, projectRoot: string, ejected: boolean, loader?: NodeRequire): jest.Configuration {\n  return resolveCreateJestConfig('react-scripts-ts/scripts/utils/createJestConfig', loader)(resolve, projectRoot, ejected);\n}\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}}