{"files":{"/home/runner/work/stryker/stryker/packages/vue-mutator/src/VueMutator.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":49,"line":7},"start":{"column":26,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"1","location":{"end":{"column":56,"line":10},"start":{"column":44,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2","location":{"end":{"column":56,"line":11},"start":{"column":44,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3","location":{"end":{"column":4,"line":41},"start":{"column":47,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"4","location":{"end":{"column":33,"line":17},"start":{"column":31,"line":17}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"5","location":{"end":{"column":6,"line":38},"start":{"column":32,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"6","location":{"end":{"column":37,"line":20},"start":{"column":11,"line":20}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"7","location":{"end":{"column":37,"line":20},"start":{"column":11,"line":20}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"8","location":{"end":{"column":36,"line":20},"start":{"column":30,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"9","location":{"end":{"column":8,"line":34},"start":{"column":39,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"10","location":{"end":{"column":19,"line":22},"start":{"column":13,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"11","location":{"end":{"column":19,"line":22},"start":{"column":13,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"12","location":{"end":{"column":10,"line":33},"start":{"column":21,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"13","location":{"end":{"column":47,"line":25},"start":{"column":46,"line":25}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"14","location":{"end":{"column":54,"line":26},"start":{"column":45,"line":26}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"15","location":{"end":{"column":12,"line":31},"start":{"column":40,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"16","location":{"end":{"column":44,"line":29},"start":{"column":13,"line":29}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"17","location":{"end":{"column":44,"line":29},"start":{"column":13,"line":29}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"18","location":{"end":{"column":44,"line":30},"start":{"column":13,"line":30}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"19","location":{"end":{"column":44,"line":30},"start":{"column":13,"line":30}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"20","location":{"end":{"column":8,"line":37},"start":{"column":14,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"21","location":{"end":{"column":46,"line":36},"start":{"column":40,"line":36}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"22","location":{"end":{"column":4,"line":70},"start":{"column":97,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"23","location":{"end":{"column":16,"line":49},"start":{"column":12,"line":49}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"24","location":{"end":{"column":15,"line":53},"start":{"column":7,"line":50}},"mutatorName":"ConditionalExpression","replacement":"case 'javascript':","status":"Killed"},{"id":"25","location":{"end":{"column":24,"line":50},"start":{"column":12,"line":50}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"26","location":{"end":{"column":26,"line":52},"start":{"column":21,"line":52}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"27","location":{"end":{"column":16,"line":54},"start":{"column":12,"line":54}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"28","location":{"end":{"column":15,"line":58},"start":{"column":7,"line":55}},"mutatorName":"ConditionalExpression","replacement":"case 'typescript':","status":"Killed"},{"id":"29","location":{"end":{"column":24,"line":55},"start":{"column":12,"line":55}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"30","location":{"end":{"column":26,"line":57},"start":{"column":21,"line":57}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"31","location":{"end":{"column":103,"line":60},"start":{"column":7,"line":59}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"CompileError"},{"id":"32","location":{"end":{"column":101,"line":60},"start":{"column":25,"line":60}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"33","location":{"end":{"column":30,"line":64},"start":{"column":9,"line":64}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"34","location":{"end":{"column":30,"line":64},"start":{"column":9,"line":64}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"35","location":{"end":{"column":20,"line":64},"start":{"column":17,"line":64}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"36","location":{"end":{"column":6,"line":68},"start":{"column":32,"line":64}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"37","location":{"end":{"column":173,"line":66},"start":{"column":9,"line":66}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"38","location":{"end":{"column":34,"line":69},"start":{"column":12,"line":69}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"39","location":{"end":{"column":4,"line":80},"start":{"column":43,"line":72}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"40","location":{"end":{"column":107,"line":73},"start":{"column":21,"line":73}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"41","location":{"end":{"column":107,"line":73},"start":{"column":21,"line":73}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"42","location":{"end":{"column":65,"line":73},"start":{"column":63,"line":73}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"43","location":{"end":{"column":30,"line":74},"start":{"column":9,"line":74}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"44","location":{"end":{"column":30,"line":74},"start":{"column":9,"line":74}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"45","location":{"end":{"column":20,"line":74},"start":{"column":17,"line":74}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"46","location":{"end":{"column":6,"line":78},"start":{"column":32,"line":74}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"47","location":{"end":{"column":192,"line":76},"start":{"column":9,"line":76}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import { File } from '@stryker-mutator/api/core';\nimport { Mutant, Mutator } from '@stryker-mutator/api/mutant';\nimport { tokens } from '@stryker-mutator/api/plugin';\n\nimport { MUTATORS_TOKEN } from './helpers/MutatorHelpers';\n\nconst compiler = require('vue-template-compiler');\n\nexport default class VueMutator implements Mutator {\n  private readonly javascriptMutatorName = 'javascript';\n  private readonly typescriptMutatorName = 'typescript';\n\n  constructor(private readonly mutators: { [name: string]: Mutator }) {}\n  public static inject = tokens(MUTATORS_TOKEN);\n\n  public mutate(inputFiles: File[]): Mutant[] {\n    const mutants: Mutant[] = [];\n\n    inputFiles.forEach(file => {\n      if (file.name.endsWith('.vue')) {\n        const script = compiler.parseComponent(file.textContent).script;\n        if (script) {\n          // Vue file must have <script></script> tag to be mutated\n          const { mutator, extension } = this.getVueScriptMutatorAndExtension(script);\n          const vueFile = new File(file.name + extension, file.textContent.substring(script.start, script.end));\n          const vueMutants = mutator.mutate([vueFile]);\n          vueMutants.forEach(mutant => {\n            mutant.fileName = file.name;\n            mutant.range[0] += script.start;\n            mutant.range[1] += script.start;\n          });\n          mutants.push(...vueMutants);\n        }\n      } else {\n        const mutator = this.getMutator(file);\n        mutants.push(...mutator.mutate([file]));\n      }\n    });\n\n    return mutants;\n  }\n\n  private getVueScriptMutatorAndExtension(script: any): { mutator: Mutator; extension: string } {\n    const lang: string | undefined = script.attrs.lang;\n    let mutatorName: string;\n    let extension: string;\n    switch (lang) {\n      case undefined:\n      case 'js':\n      case 'javascript':\n        mutatorName = this.javascriptMutatorName;\n        extension = '.js';\n        break;\n      case 'ts':\n      case 'typescript':\n        mutatorName = this.typescriptMutatorName;\n        extension = '.ts';\n        break;\n      default:\n        throw new Error(`Found unsupported language attribute 'lang=\"${lang}\"' on a <script> block.`);\n    }\n\n    const mutator = this.mutators[mutatorName];\n    if (mutator === undefined) {\n      throw new Error(\n        `The '${mutatorName}' mutator is required to mutate a <script> block but it was not found. Please read the README of this package for information on configuration.`\n      );\n    }\n    return { mutator, extension };\n  }\n\n  private getMutator(file: File): Mutator {\n    const mutator = this.mutators[this.typescriptMutatorName] || this.mutators[this.javascriptMutatorName];\n    if (mutator === undefined) {\n      throw new Error(\n        `Unable to mutate file \"${file.name}\" because neither the typescript or the javascript mutator was installed. Please read the README of this package for information on configuration.`\n      );\n    }\n    return mutator;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/vue-mutator/src/helpers/MutatorHelpers.ts":{"language":"typescript","mutants":[{"id":"48","location":{"end":{"column":41,"line":14},"start":{"column":31,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"49","location":{"end":{"column":2,"line":26},"start":{"column":101,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"50","location":{"end":{"column":4,"line":24},"start":{"column":36,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"51","location":{"end":{"column":30,"line":21},"start":{"column":9,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"52","location":{"end":{"column":30,"line":21},"start":{"column":9,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"53","location":{"end":{"column":24,"line":21},"start":{"column":21,"line":21}},"mutatorName":"EqualityOperator","replacement":"===","status":"NoCoverage"},{"id":"54","location":{"end":{"column":30,"line":21},"start":{"column":25,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"55","location":{"end":{"column":6,"line":23},"start":{"column":32,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"56","location":{"end":{"column":2,"line":34},"start":{"column":104,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"57","location":{"end":{"column":30,"line":29},"start":{"column":7,"line":29}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"58","location":{"end":{"column":30,"line":29},"start":{"column":7,"line":29}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"59","location":{"end":{"column":4,"line":31},"start":{"column":32,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"60","location":{"end":{"column":4,"line":33},"start":{"column":10,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"61","location":{"end":{"column":2,"line":38},"start":{"column":146,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"62","location":{"end":{"column":104,"line":37},"start":{"column":10,"line":37}},"mutatorName":"BooleanLiteral","replacement":"!(plugin as FactoryPlugin<PluginKind.Mutator, Array<InjectionToken<OptionsContext>>>).factory","status":"NoCoverage"},{"id":"63","location":{"end":{"column":104,"line":37},"start":{"column":11,"line":37}},"mutatorName":"BooleanLiteral","replacement":"(plugin as FactoryPlugin<PluginKind.Mutator, Array<InjectionToken<OptionsContext>>>).factory","status":"NoCoverage"}],"source":"import { Mutator } from '@stryker-mutator/api/mutant';\nimport {\n  commonTokens,\n  FactoryPlugin,\n  InjectionToken,\n  Injector,\n  OptionsContext,\n  Plugin,\n  PluginKind,\n  PluginResolver,\n  tokens\n} from '@stryker-mutator/api/plugin';\n\nexport const MUTATORS_TOKEN = 'mutators';\n\nmutatorsFactory.inject = tokens(commonTokens.pluginResolver, commonTokens.injector);\nexport function mutatorsFactory(pluginResolver: PluginResolver, injector: Injector<OptionsContext>) {\n  const mutators: { [name: string]: Mutator } = {};\n  const mutatorPlugins = pluginResolver.resolveAll(PluginKind.Mutator);\n  mutatorPlugins.forEach(plugin => {\n    if (plugin.name !== 'vue') {\n      mutators[plugin.name] = createPlugin(injector, plugin);\n    }\n  });\n  return mutators;\n}\n\nfunction createPlugin(injector: Injector<OptionsContext>, plugin: Plugin<PluginKind.Mutator>): Mutator {\n  if (isFactoryPlugin(plugin)) {\n    return injector.injectFunction(plugin.factory);\n  } else {\n    return injector.injectClass(plugin.injectableClass);\n  }\n}\n\nfunction isFactoryPlugin(plugin: Plugin<PluginKind.Mutator>): plugin is FactoryPlugin<PluginKind.Mutator, Array<InjectionToken<OptionsContext>>> {\n  return !!(plugin as FactoryPlugin<PluginKind.Mutator, Array<InjectionToken<OptionsContext>>>).factory;\n}\n"},"/home/runner/work/stryker/stryker/packages/vue-mutator/src/index.ts":{"language":"typescript","mutants":[{"id":"64","location":{"end":{"column":99,"line":6},"start":{"column":31,"line":6}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage"},{"id":"65","location":{"end":{"column":78,"line":6},"start":{"column":73,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"66","location":{"end":{"column":2,"line":10},"start":{"column":64,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import { commonTokens, declareFactoryPlugin, Injector, OptionsContext, PluginKind, tokens } from '@stryker-mutator/api/plugin';\n\nimport { MUTATORS_TOKEN, mutatorsFactory } from './helpers/MutatorHelpers';\nimport VueMutator from './VueMutator';\n\nexport const strykerPlugins = [declareFactoryPlugin(PluginKind.Mutator, 'vue', vueMutatorFactory)];\n\nfunction vueMutatorFactory(injector: Injector<OptionsContext>) {\n  return injector.provideFactory(MUTATORS_TOKEN, mutatorsFactory).injectClass(VueMutator);\n}\nvueMutatorFactory.inject = tokens(commonTokens.injector);\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}}