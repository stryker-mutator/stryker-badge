{"files":{"/home/runner/work/stryker/stryker/packages/core/src/Sandbox.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":4,"line":41},"start":{"column":5,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1","location":{"end":{"column":79,"line":39},"start":{"column":70,"line":39}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2","location":{"end":{"column":56,"line":40},"start":{"column":20,"line":40}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"3","location":{"end":{"column":4,"line":47},"start":{"column":45,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"4","location":{"end":{"column":4,"line":60},"start":{"column":23,"line":57}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"5","location":{"end":{"column":51,"line":59},"start":{"column":38,"line":59}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"6","location":{"end":{"column":4,"line":64},"start":{"column":108,"line":62}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"7","location":{"end":{"column":71,"line":63},"start":{"column":32,"line":63}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"8","location":{"end":{"column":4,"line":68},"start":{"column":35,"line":66}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"9","location":{"end":{"column":58,"line":67},"start":{"column":12,"line":67}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"10","location":{"end":{"column":58,"line":67},"start":{"column":12,"line":67}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"11","location":{"end":{"column":40,"line":67},"start":{"column":38,"line":67}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"12","location":{"end":{"column":4,"line":90},"start":{"column":85,"line":70}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"13","location":{"end":{"column":20,"line":72},"start":{"column":9,"line":72}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"14","location":{"end":{"column":20,"line":72},"start":{"column":9,"line":72}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"15","location":{"end":{"column":6,"line":74},"start":{"column":22,"line":72}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"16","location":{"end":{"column":6,"line":89},"start":{"column":12,"line":74}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"17","location":{"end":{"column":85,"line":76},"start":{"column":11,"line":76}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"18","location":{"end":{"column":85,"line":76},"start":{"column":11,"line":76}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"19","location":{"end":{"column":58,"line":76},"start":{"column":55,"line":76}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"20","location":{"end":{"column":8,"line":80},"start":{"column":87,"line":76}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"21","location":{"end":{"column":154,"line":78},"start":{"column":11,"line":78}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"22","location":{"end":{"column":92,"line":81},"start":{"column":41,"line":81}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"23","location":{"end":{"column":4,"line":111},"start":{"column":103,"line":92}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"24","location":{"end":{"column":47,"line":93},"start":{"column":9,"line":93}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"25","location":{"end":{"column":47,"line":93},"start":{"column":9,"line":93}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"26","location":{"end":{"column":6,"line":101},"start":{"column":49,"line":93}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"27","location":{"end":{"column":36,"line":94},"start":{"column":11,"line":94}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"28","location":{"end":{"column":36,"line":94},"start":{"column":11,"line":94}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"29","location":{"end":{"column":8,"line":98},"start":{"column":38,"line":94}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"30","location":{"end":{"column":149,"line":96},"start":{"column":11,"line":96}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"31","location":{"end":{"column":90,"line":99},"start":{"column":88,"line":99}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"32","location":{"end":{"column":101,"line":101},"start":{"column":16,"line":101}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"33","location":{"end":{"column":101,"line":101},"start":{"column":16,"line":101}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"34","location":{"end":{"column":55,"line":101},"start":{"column":53,"line":101}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"35","location":{"end":{"column":52,"line":101},"start":{"column":16,"line":101}},"mutatorName":"BooleanLiteral","replacement":"transpiledMutant.mutant.runAllTests","status":"Killed"},{"id":"36","location":{"end":{"column":101,"line":101},"start":{"column":56,"line":101}},"mutatorName":"BooleanLiteral","replacement":"transpiledMutant.mutant.selectedTests.length","status":"Killed"},{"id":"37","location":{"end":{"column":6,"line":104},"start":{"column":103,"line":101}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"38","location":{"end":{"column":86,"line":102},"start":{"column":84,"line":102}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"39","location":{"end":{"column":59,"line":104},"start":{"column":16,"line":104}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"40","location":{"end":{"column":59,"line":104},"start":{"column":16,"line":104}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"41","location":{"end":{"column":59,"line":104},"start":{"column":16,"line":104}},"mutatorName":"BooleanLiteral","replacement":"transpiledMutant.changedAnyTranspiledFiles","status":"Killed"},{"id":"42","location":{"end":{"column":6,"line":107},"start":{"column":61,"line":104}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"43","location":{"end":{"column":84,"line":105},"start":{"column":82,"line":105}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"44","location":{"end":{"column":6,"line":110},"start":{"column":12,"line":107}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"45","location":{"end":{"column":4,"line":121},"start":{"column":91,"line":113}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"46","location":{"end":{"column":82,"line":115},"start":{"column":46,"line":115}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"47","location":{"end":{"column":82,"line":115},"start":{"column":51,"line":115}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"48","location":{"end":{"column":82,"line":115},"start":{"column":51,"line":115}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"49","location":{"end":{"column":63,"line":115},"start":{"column":60,"line":115}},"mutatorName":"EqualityOperator","replacement":"===","status":"NoCoverage"},{"id":"50","location":{"end":{"column":99,"line":115},"start":{"column":88,"line":115}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"51","location":{"end":{"column":74,"line":116},"start":{"column":9,"line":116}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"52","location":{"end":{"column":74,"line":116},"start":{"column":9,"line":116}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"53","location":{"end":{"column":37,"line":116},"start":{"column":35,"line":116}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"54","location":{"end":{"column":48,"line":116},"start":{"column":45,"line":116}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"55","location":{"end":{"column":6,"line":119},"start":{"column":76,"line":116}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"56","location":{"end":{"column":97,"line":117},"start":{"column":84,"line":117}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"57","location":{"end":{"column":83,"line":118},"start":{"column":22,"line":118}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"58","location":{"end":{"column":4,"line":136},"start":{"column":68,"line":123}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"59","location":{"end":{"column":38,"line":126},"start":{"column":7,"line":125}},"mutatorName":"ConditionalExpression","replacement":"case RunStatus.Timeout:","status":"Survived"},{"id":"60","location":{"end":{"column":42,"line":128},"start":{"column":7,"line":127}},"mutatorName":"ConditionalExpression","replacement":"case RunStatus.Error:","status":"Killed"},{"id":"61","location":{"end":{"column":10,"line":134},"start":{"column":7,"line":129}},"mutatorName":"ConditionalExpression","replacement":"case RunStatus.Complete:","status":"CompileError"},{"id":"62","location":{"end":{"column":70,"line":130},"start":{"column":13,"line":130}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"63","location":{"end":{"column":70,"line":130},"start":{"column":13,"line":130}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"64","location":{"end":{"column":69,"line":130},"start":{"column":34,"line":130}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"65","location":{"end":{"column":69,"line":130},"start":{"column":39,"line":130}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"66","location":{"end":{"column":69,"line":130},"start":{"column":39,"line":130}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"67","location":{"end":{"column":51,"line":130},"start":{"column":48,"line":130}},"mutatorName":"EqualityOperator","replacement":"!==","status":"NoCoverage"},{"id":"68","location":{"end":{"column":10,"line":132},"start":{"column":72,"line":130}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"69","location":{"end":{"column":10,"line":134},"start":{"column":16,"line":132}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"70","location":{"end":{"column":4,"line":142},"start":{"column":48,"line":138}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"71","location":{"end":{"column":133,"line":139},"start":{"column":45,"line":139}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"72","location":{"end":{"column":132,"line":139},"start":{"column":79,"line":139}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"73","location":{"end":{"column":132,"line":139},"start":{"column":94,"line":139}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"74","location":{"end":{"column":132,"line":139},"start":{"column":94,"line":139}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"75","location":{"end":{"column":114,"line":139},"start":{"column":111,"line":139}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"76","location":{"end":{"column":98,"line":141},"start":{"column":42,"line":141}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"77","location":{"end":{"column":4,"line":147},"start":{"column":57,"line":144}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"78","location":{"end":{"column":4,"line":153},"start":{"column":42,"line":149}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"79","location":{"end":{"column":68,"line":151},"start":{"column":41,"line":151}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"80","location":{"end":{"column":4,"line":176},"start":{"column":61,"line":155}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"81","location":{"end":{"column":40,"line":156},"start":{"column":9,"line":156}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"82","location":{"end":{"column":40,"line":156},"start":{"column":9,"line":156}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"83","location":{"end":{"column":6,"line":175},"start":{"column":42,"line":156}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"84","location":{"end":{"column":22,"line":160},"start":{"column":11,"line":160}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"85","location":{"end":{"column":22,"line":160},"start":{"column":11,"line":160}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"86","location":{"end":{"column":8,"line":172},"start":{"column":24,"line":160}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"87","location":{"end":{"column":91,"line":161},"start":{"column":77,"line":161}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"88","location":{"end":{"column":10,"line":171},"start":{"column":134,"line":161}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"89","location":{"end":{"column":38,"line":162},"start":{"column":15,"line":162}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"90","location":{"end":{"column":38,"line":162},"start":{"column":15,"line":162}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"91","location":{"end":{"column":29,"line":162},"start":{"column":26,"line":162}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"92","location":{"end":{"column":38,"line":162},"start":{"column":30,"line":162}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"93","location":{"end":{"column":12,"line":168},"start":{"column":40,"line":162}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"94","location":{"end":{"column":95,"line":166},"start":{"column":36,"line":164}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"95","location":{"end":{"column":12,"line":170},"start":{"column":18,"line":168}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"96","location":{"end":{"column":108,"line":169},"start":{"column":27,"line":169}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"97","location":{"end":{"column":8,"line":174},"start":{"column":14,"line":172}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"98","location":{"end":{"column":148,"line":173},"start":{"column":23,"line":173}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"99","location":{"end":{"column":4,"line":185},"start":{"column":47,"line":178}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"100","location":{"end":{"column":4,"line":192},"start":{"column":55,"line":187}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"101","location":{"end":{"column":99,"line":188},"start":{"column":53,"line":188}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"102","location":{"end":{"column":45,"line":189},"start":{"column":20,"line":189}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"103","location":{"end":{"column":4,"line":197},"start":{"column":52,"line":194}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"104","location":{"end":{"column":79,"line":196},"start":{"column":78,"line":196}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"105","location":{"end":{"column":54,"line":196},"start":{"column":53,"line":196}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"106","location":{"end":{"column":40,"line":196},"start":{"column":39,"line":196}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Killed"},{"id":"107","location":{"end":{"column":4,"line":205},"start":{"column":75,"line":199}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"108","location":{"end":{"column":50,"line":200},"start":{"column":9,"line":200}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"109","location":{"end":{"column":50,"line":200},"start":{"column":9,"line":200}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"110","location":{"end":{"column":30,"line":200},"start":{"column":28,"line":200}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"111","location":{"end":{"column":50,"line":200},"start":{"column":31,"line":200}},"mutatorName":"BooleanLiteral","replacement":"mutant.runAllTests","status":"Killed"},{"id":"112","location":{"end":{"column":6,"line":202},"start":{"column":52,"line":200}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"113","location":{"end":{"column":6,"line":204},"start":{"column":12,"line":202}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import * as path from 'path';\n\nimport { StrykerOptions } from '@stryker-mutator/api/core';\nimport { File } from '@stryker-mutator/api/core';\nimport { MutantResult, MutantStatus } from '@stryker-mutator/api/report';\nimport { TestFramework } from '@stryker-mutator/api/test_framework';\nimport { RunResult, RunStatus, TestRunner, TestStatus } from '@stryker-mutator/api/test_runner';\nimport { normalizeWhitespaces } from '@stryker-mutator/util';\nimport { getLogger } from 'log4js';\nimport * as mkdirp from 'mkdirp';\n\nimport LoggingClientContext from './logging/LoggingClientContext';\nimport ResilientTestRunnerFactory from './test-runner/ResilientTestRunnerFactory';\nimport TestableMutant, { TestSelectionResult } from './TestableMutant';\nimport TranspiledMutant from './TranspiledMutant';\nimport { findNodeModules, symlinkJunction, writeFile } from './utils/fileUtils';\nimport { wrapInClosure } from './utils/objectUtils';\nimport { TemporaryDirectory } from './utils/TemporaryDirectory';\n\ninterface FileMap {\n  [sourceFile: string]: string;\n}\n\nexport default class Sandbox {\n  private readonly log = getLogger(Sandbox.name);\n  private testRunner: Required<TestRunner>;\n  private fileMap: FileMap;\n  private readonly workingDirectory: string;\n\n  private constructor(\n    private readonly options: StrykerOptions,\n    private readonly index: number,\n    private readonly files: readonly File[],\n    private readonly testFramework: TestFramework | null,\n    private readonly timeOverheadMS: number,\n    private readonly loggingContext: LoggingClientContext,\n    temporaryDirectory: TemporaryDirectory\n  ) {\n    this.workingDirectory = temporaryDirectory.createRandomDirectory('sandbox');\n    this.log.debug('Creating a sandbox for files in %s', this.workingDirectory);\n  }\n\n  private async initialize(): Promise<void> {\n    await this.fillSandbox();\n    await this.symlinkNodeModulesIfNeeded();\n    return this.initializeTestRunner();\n  }\n\n  public static create(\n    options: StrykerOptions,\n    index: number,\n    files: readonly File[],\n    testFramework: TestFramework | null,\n    timeoutOverheadMS: number,\n    loggingContext: LoggingClientContext,\n    temporaryDirectory: TemporaryDirectory\n  ): Promise<Sandbox> {\n    const sandbox = new Sandbox(options, index, files, testFramework, timeoutOverheadMS, loggingContext, temporaryDirectory);\n    return sandbox.initialize().then(() => sandbox);\n  }\n\n  public run(timeout: number, testHooks: string | undefined, mutatedFileName?: string): Promise<RunResult> {\n    return this.testRunner.run({ timeout, testHooks, mutatedFileName });\n  }\n\n  public dispose(): Promise<void> {\n    return this.testRunner.dispose() || Promise.resolve();\n  }\n\n  public async runMutant(transpiledMutant: TranspiledMutant): Promise<MutantResult> {\n    const earlyResult = this.retrieveEarlyResult(transpiledMutant);\n    if (earlyResult) {\n      return earlyResult;\n    } else {\n      const mutantFiles = transpiledMutant.transpileResult.outputFiles;\n      if (transpiledMutant.mutant.testSelectionResult === TestSelectionResult.Failed) {\n        this.log.warn(\n          `Failed find coverage data for this mutant, running all tests. This might have an impact on performance: ${transpiledMutant.mutant.toString()}`\n        );\n      }\n      await Promise.all(mutantFiles.map(mutatedFile => this.writeFileInSandbox(mutatedFile)));\n      const runResult = await this.run(\n        this.calculateTimeout(transpiledMutant.mutant),\n        this.getFilterTestsHooks(transpiledMutant.mutant),\n        this.fileMap[transpiledMutant.mutant.fileName]\n      );\n      await this.reset(mutantFiles);\n      return this.collectMutantResult(transpiledMutant.mutant, runResult);\n    }\n  }\n\n  private readonly retrieveEarlyResult = (transpiledMutant: TranspiledMutant): MutantResult | null => {\n    if (transpiledMutant.transpileResult.error) {\n      if (this.log.isDebugEnabled()) {\n        this.log.debug(\n          `Transpile error occurred: \"${transpiledMutant.transpileResult.error}\" during transpiling of mutant ${transpiledMutant.mutant.toString()}`\n        );\n      }\n      const result = transpiledMutant.mutant.createResult(MutantStatus.TranspileError, []);\n      return result;\n    } else if (!transpiledMutant.mutant.runAllTests && !transpiledMutant.mutant.selectedTests.length) {\n      const result = transpiledMutant.mutant.createResult(MutantStatus.NoCoverage, []);\n      return result;\n    } else if (!transpiledMutant.changedAnyTranspiledFiles) {\n      const result = transpiledMutant.mutant.createResult(MutantStatus.Survived, []);\n      return result;\n    } else {\n      // No early result possible, need to run in the sandbox later\n      return null;\n    }\n  };\n\n  private collectMutantResult(mutant: TestableMutant, runResult: RunResult): MutantResult {\n    const status: MutantStatus = this.determineMutantState(runResult);\n    const testNames = runResult.tests.filter(t => t.status !== TestStatus.Skipped).map(t => t.name);\n    if (this.log.isDebugEnabled() && status === MutantStatus.RuntimeError) {\n      const error = runResult.errorMessages ? runResult.errorMessages.toString() : '(undefined)';\n      this.log.debug('A runtime error occurred: %s during execution of mutant: %s', error, mutant.toString());\n    }\n    return mutant.createResult(status, testNames);\n  }\n\n  private determineMutantState(runResult: RunResult): MutantStatus {\n    switch (runResult.status) {\n      case RunStatus.Timeout:\n        return MutantStatus.TimedOut;\n      case RunStatus.Error:\n        return MutantStatus.RuntimeError;\n      case RunStatus.Complete:\n        if (runResult.tests.some(t => t.status === TestStatus.Failed)) {\n          return MutantStatus.Killed;\n        } else {\n          return MutantStatus.Survived;\n        }\n    }\n  }\n\n  private reset(mutatedFiles: readonly File[]) {\n    const originalFiles = this.files.filter(originalFile => mutatedFiles.some(mutatedFile => mutatedFile.name === originalFile.name));\n\n    return Promise.all(originalFiles.map(file => writeFile(this.fileMap[file.name], file.content)));\n  }\n\n  private writeFileInSandbox(file: File): Promise<void> {\n    const fileNameInSandbox = this.fileMap[file.name];\n    return writeFile(fileNameInSandbox, file.content);\n  }\n\n  private fillSandbox(): Promise<void[]> {\n    this.fileMap = Object.create(null);\n    const copyPromises = this.files.map(file => this.fillFile(file));\n    return Promise.all(copyPromises);\n  }\n\n  private async symlinkNodeModulesIfNeeded(): Promise<void> {\n    if (this.options.symlinkNodeModules) {\n      // TODO: Change with this.options.basePath when we have it\n      const basePath = process.cwd();\n      const nodeModules = await findNodeModules(basePath);\n      if (nodeModules) {\n        await symlinkJunction(nodeModules, path.join(this.workingDirectory, 'node_modules')).catch((error: NodeJS.ErrnoException) => {\n          if (error.code === 'EEXIST') {\n            this.log.warn(\n              normalizeWhitespaces(`Could not symlink \"${nodeModules}\" in sandbox directory,\n              it is already created in the sandbox. Please remove the node_modules from your sandbox files.\n              Alternatively, set \\`symlinkNodeModules\\` to \\`false\\` to disable this warning.`)\n            );\n          } else {\n            this.log.warn(`Unexpected error while trying to symlink \"${nodeModules}\" in sandbox directory.`, error);\n          }\n        });\n      } else {\n        this.log.warn(`Could not find a node_modules folder to symlink into the sandbox directory. Search \"${basePath}\" and its parent directories`);\n      }\n    }\n  }\n\n  private fillFile(file: File): Promise<void> {\n    const relativePath = path.relative(process.cwd(), file.name);\n    const folderName = path.join(this.workingDirectory, path.dirname(relativePath));\n    mkdirp.sync(folderName);\n    const targetFile = path.join(folderName, path.basename(relativePath));\n    this.fileMap[file.name] = targetFile;\n    return writeFile(targetFile, file.content);\n  }\n\n  private async initializeTestRunner(): Promise<void> {\n    const fileNames = Object.keys(this.fileMap).map(sourceFileName => this.fileMap[sourceFileName]);\n    this.log.debug('Creating test runner %s', this.index);\n    this.testRunner = ResilientTestRunnerFactory.create(this.options, fileNames, this.workingDirectory, this.loggingContext);\n    await this.testRunner.init();\n  }\n\n  private calculateTimeout(mutant: TestableMutant) {\n    const baseTimeout = mutant.timeSpentScopedTests;\n    return this.options.timeoutFactor * baseTimeout + this.options.timeoutMS + this.timeOverheadMS;\n  }\n\n  private getFilterTestsHooks(mutant: TestableMutant): string | undefined {\n    if (this.testFramework && !mutant.runAllTests) {\n      return wrapInClosure(this.testFramework.filter(mutant.selectedTests));\n    } else {\n      return undefined;\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/SandboxPool.ts":{"language":"typescript","mutants":[{"id":"114","location":{"end":{"column":62,"line":22},"start":{"column":60,"line":22}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"115","location":{"end":{"column":4,"line":44},"start":{"column":5,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"116","location":{"end":{"column":4,"line":58},"start":{"column":86,"line":46}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"117","location":{"end":{"column":8,"line":55},"start":{"column":28,"line":53}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"118","location":{"end":{"column":33,"line":56},"start":{"column":11,"line":56}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"119","location":{"end":{"column":4,"line":63},"start":{"column":93,"line":60}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"120","location":{"end":{"column":31,"line":62},"start":{"column":12,"line":62}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"121","location":{"end":{"column":4,"line":81},"start":{"column":49,"line":65}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"122","location":{"end":{"column":8,"line":77},"start":{"column":26,"line":69}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"123","location":{"end":{"column":28,"line":70},"start":{"column":13,"line":70}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"124","location":{"end":{"column":28,"line":70},"start":{"column":13,"line":70}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"125","location":{"end":{"column":10,"line":72},"start":{"column":30,"line":70}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"126","location":{"end":{"column":10,"line":76},"start":{"column":16,"line":72}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"127","location":{"end":{"column":46,"line":78},"start":{"column":14,"line":78}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"128","location":{"end":{"column":46,"line":78},"start":{"column":31,"line":78}},"mutatorName":"BooleanLiteral","replacement":"!sandboxOrNull","status":"Killed"},{"id":"129","location":{"end":{"column":46,"line":78},"start":{"column":32,"line":78}},"mutatorName":"BooleanLiteral","replacement":"sandboxOrNull","status":"Killed"},{"id":"130","location":{"end":{"column":40,"line":79},"start":{"column":11,"line":79}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"131","location":{"end":{"column":4,"line":99},"start":{"column":34,"line":83}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"132","location":{"end":{"column":40,"line":85},"start":{"column":9,"line":85}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"133","location":{"end":{"column":40,"line":85},"start":{"column":9,"line":85}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"134","location":{"end":{"column":6,"line":88},"start":{"column":42,"line":85}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"135","location":{"end":{"column":29,"line":87},"start":{"column":7,"line":87}},"mutatorName":"UpdateOperator","replacement":"// If transpilers are configured, one core is reserved for the compiler (for now)\nnumConcurrentRunners++","status":"Killed"},{"id":"136","location":{"end":{"column":49,"line":89},"start":{"column":38,"line":89}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"137","location":{"end":{"column":114,"line":90},"start":{"column":9,"line":90}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"138","location":{"end":{"column":114,"line":90},"start":{"column":9,"line":90}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"139","location":{"end":{"column":72,"line":90},"start":{"column":70,"line":90}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"140","location":{"end":{"column":31,"line":90},"start":{"column":30,"line":90}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"141","location":{"end":{"column":31,"line":90},"start":{"column":30,"line":90}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"142","location":{"end":{"column":112,"line":90},"start":{"column":111,"line":90}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"143","location":{"end":{"column":112,"line":90},"start":{"column":111,"line":90}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"144","location":{"end":{"column":6,"line":93},"start":{"column":116,"line":90}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"145","location":{"end":{"column":69,"line":92},"start":{"column":36,"line":92}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"146","location":{"end":{"column":34,"line":94},"start":{"column":9,"line":94}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"147","location":{"end":{"column":34,"line":94},"start":{"column":9,"line":94}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"148","location":{"end":{"column":32,"line":94},"start":{"column":30,"line":94}},"mutatorName":"EqualityOperator","replacement":"<","status":"Survived"},{"id":"149","location":{"end":{"column":32,"line":94},"start":{"column":30,"line":94}},"mutatorName":"EqualityOperator","replacement":">","status":"Killed"},{"id":"150","location":{"end":{"column":6,"line":96},"start":{"column":36,"line":94}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"151","location":{"end":{"column":107,"line":97},"start":{"column":19,"line":97}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"152","location":{"end":{"column":4,"line":104},"start":{"column":101,"line":101}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"153","location":{"end":{"column":29,"line":106},"start":{"column":24,"line":106}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"154","location":{"end":{"column":4,"line":111},"start":{"column":26,"line":107}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"155","location":{"end":{"column":27,"line":108},"start":{"column":23,"line":108}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"156","location":{"end":{"column":65,"line":110},"start":{"column":37,"line":110}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"}],"source":"import * as os from 'os';\n\nimport { File, StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { MutantResult } from '@stryker-mutator/api/report';\nimport { TestFramework } from '@stryker-mutator/api/test_framework';\nimport { Observable, range, Subject } from 'rxjs';\nimport { filter, flatMap, map, merge, tap, zip } from 'rxjs/operators';\nimport { Disposable } from 'typed-inject';\n\nimport { coreTokens } from './di';\nimport LoggingClientContext from './logging/LoggingClientContext';\nimport { InitialTestRunResult } from './process/InitialTestExecutor';\nimport Sandbox from './Sandbox';\nimport TranspiledMutant from './TranspiledMutant';\nimport { TemporaryDirectory } from './utils/TemporaryDirectory';\n\nconst MAX_CONCURRENT_INITIALIZING_SANDBOXES = 2;\n\nexport class SandboxPool implements Disposable {\n  private readonly allSandboxes: Array<Promise<Sandbox>> = [];\n  private readonly overheadTimeMS: number;\n\n  public static inject = tokens(\n    commonTokens.logger,\n    commonTokens.options,\n    coreTokens.testFramework,\n    coreTokens.initialRunResult,\n    coreTokens.transpiledFiles,\n    coreTokens.loggingContext,\n    coreTokens.temporaryDirectory\n  );\n  constructor(\n    private readonly log: Logger,\n    private readonly options: StrykerOptions,\n    private readonly testFramework: TestFramework | null,\n    initialRunResult: InitialTestRunResult,\n    private readonly initialFiles: readonly File[],\n    private readonly loggingContext: LoggingClientContext,\n    private readonly tempDir: TemporaryDirectory\n  ) {\n    this.overheadTimeMS = initialRunResult.overheadTimeMS;\n  }\n\n  public runMutants(mutants: Observable<TranspiledMutant>): Observable<MutantResult> {\n    const recycledSandboxes = new Subject<Sandbox>();\n    // Make sure sandboxes get recycled\n    const sandboxes = this.startSandboxes().pipe(merge(recycledSandboxes));\n    return mutants.pipe(\n      zip(sandboxes),\n      flatMap(this.runInSandbox),\n      tap(({ sandbox }) => {\n        recycledSandboxes.next(sandbox);\n      }),\n      map(({ result }) => result)\n    );\n  }\n\n  private readonly runInSandbox = async ([mutant, sandbox]: [TranspiledMutant, Sandbox]) => {\n    const result = await sandbox.runMutant(mutant);\n    return { result, sandbox };\n  };\n\n  private startSandboxes(): Observable<Sandbox> {\n    const concurrency = this.determineConcurrency();\n\n    return range(0, concurrency).pipe(\n      flatMap(async n => {\n        if (this.isDisposed) {\n          return null;\n        } else {\n          return this.registerSandbox(\n            Sandbox.create(this.options, n, this.initialFiles, this.testFramework, this.overheadTimeMS, this.loggingContext, this.tempDir)\n          );\n        }\n      }, MAX_CONCURRENT_INITIALIZING_SANDBOXES),\n      filter(sandboxOrNull => !!sandboxOrNull),\n      map(sandbox => sandbox as Sandbox)\n    );\n  }\n\n  private determineConcurrency() {\n    let numConcurrentRunners = os.cpus().length;\n    if (this.options.transpilers.length) {\n      // If transpilers are configured, one core is reserved for the compiler (for now)\n      numConcurrentRunners--;\n    }\n    let numConcurrentRunnersSource = 'CPU count';\n    if (numConcurrentRunners > this.options.maxConcurrentTestRunners && this.options.maxConcurrentTestRunners > 0) {\n      numConcurrentRunners = this.options.maxConcurrentTestRunners;\n      numConcurrentRunnersSource = 'maxConcurrentTestRunners config';\n    }\n    if (numConcurrentRunners <= 0) {\n      numConcurrentRunners = 1;\n    }\n    this.log.info(`Creating ${numConcurrentRunners} test runners (based on ${numConcurrentRunnersSource})`);\n    return numConcurrentRunners;\n  }\n\n  private readonly registerSandbox = async (promisedSandbox: Promise<Sandbox>): Promise<Sandbox> => {\n    this.allSandboxes.push(promisedSandbox);\n    return promisedSandbox;\n  };\n\n  private isDisposed = false;\n  public async dispose() {\n    this.isDisposed = true;\n    const sandboxes = await Promise.all(this.allSandboxes);\n    await Promise.all(sandboxes.map(sandbox => sandbox.dispose()));\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/ScoreResultCalculator.ts":{"language":"typescript","mutants":[{"id":"157","location":{"end":{"column":4,"line":22},"start":{"column":58,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"158","location":{"end":{"column":62,"line":20},"start":{"column":60,"line":20}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"159","location":{"end":{"column":4,"line":40},"start":{"column":97,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"160","location":{"end":{"column":52,"line":25},"start":{"column":22,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"161","location":{"end":{"column":52,"line":25},"start":{"column":22,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"162","location":{"end":{"column":35,"line":25},"start":{"column":33,"line":25}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"163","location":{"end":{"column":37,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"164","location":{"end":{"column":37,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"165","location":{"end":{"column":28,"line":27},"start":{"column":25,"line":27}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"166","location":{"end":{"column":37,"line":27},"start":{"column":29,"line":27}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"167","location":{"end":{"column":6,"line":35},"start":{"column":39,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"168","location":{"end":{"column":41,"line":28},"start":{"column":11,"line":28}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"169","location":{"end":{"column":41,"line":28},"start":{"column":11,"line":28}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"170","location":{"end":{"column":32,"line":28},"start":{"column":31,"line":28}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"171","location":{"end":{"column":32,"line":28},"start":{"column":31,"line":28}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"172","location":{"end":{"column":8,"line":32},"start":{"column":43,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"173","location":{"end":{"column":136,"line":29},"start":{"column":24,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"174","location":{"end":{"column":118,"line":30},"start":{"column":23,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"175","location":{"end":{"column":8,"line":34},"start":{"column":14,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"176","location":{"end":{"column":122,"line":33},"start":{"column":23,"line":33}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"177","location":{"end":{"column":6,"line":39},"start":{"column":12,"line":35}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"178","location":{"end":{"column":155,"line":37},"start":{"column":9,"line":37}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"179","location":{"end":{"column":4,"line":51},"start":{"column":78,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"180","location":{"end":{"column":35,"line":43},"start":{"column":9,"line":43}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"181","location":{"end":{"column":35,"line":43},"start":{"column":9,"line":43}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"182","location":{"end":{"column":6,"line":48},"start":{"column":37,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"183","location":{"end":{"column":8,"line":47},"start":{"column":37,"line":44}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"184","location":{"end":{"column":90,"line":45},"start":{"column":23,"line":45}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"185","location":{"end":{"column":88,"line":45},"start":{"column":47,"line":45}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"186","location":{"end":{"column":6,"line":50},"start":{"column":12,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"187","location":{"end":{"column":4,"line":57},"start":{"column":88,"line":53}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"188","location":{"end":{"column":4,"line":61},"start":{"column":85,"line":59}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"189","location":{"end":{"column":4,"line":72},"start":{"column":69,"line":63}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"190","location":{"end":{"column":6,"line":71},"start":{"column":12,"line":66}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"191","location":{"end":{"column":70,"line":70},"start":{"column":23,"line":70}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"192","location":{"end":{"column":70,"line":70},"start":{"column":23,"line":70}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"193","location":{"end":{"column":51,"line":70},"start":{"column":49,"line":70}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"194","location":{"end":{"column":48,"line":70},"start":{"column":23,"line":70}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"195","location":{"end":{"column":48,"line":70},"start":{"column":23,"line":70}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"196","location":{"end":{"column":46,"line":70},"start":{"column":43,"line":70}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"197","location":{"end":{"column":70,"line":70},"start":{"column":52,"line":70}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"198","location":{"end":{"column":70,"line":70},"start":{"column":52,"line":70}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"199","location":{"end":{"column":68,"line":70},"start":{"column":67,"line":70}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"200","location":{"end":{"column":68,"line":70},"start":{"column":67,"line":70}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"201","location":{"end":{"column":4,"line":84},"start":{"column":63,"line":74}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"202","location":{"end":{"column":6,"line":82},"start":{"column":53,"line":75}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"203","location":{"end":{"column":37,"line":77},"start":{"column":11,"line":77}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"204","location":{"end":{"column":37,"line":77},"start":{"column":11,"line":77}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"205","location":{"end":{"column":8,"line":79},"start":{"column":39,"line":77}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"206","location":{"end":{"column":38,"line":78},"start":{"column":16,"line":78}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"207","location":{"end":{"column":8,"line":81},"start":{"column":14,"line":79}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"208","location":{"end":{"column":38,"line":80},"start":{"column":16,"line":80}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"209","location":{"end":{"column":4,"line":105},"start":{"column":95,"line":86}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"210","location":{"end":{"column":83,"line":87},"start":{"column":82,"line":87}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"211","location":{"end":{"column":97,"line":87},"start":{"column":95,"line":87}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"212","location":{"end":{"column":115,"line":88},"start":{"column":52,"line":88}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"213","location":{"end":{"column":31,"line":91},"start":{"column":9,"line":91}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"214","location":{"end":{"column":31,"line":91},"start":{"column":9,"line":91}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"215","location":{"end":{"column":29,"line":91},"start":{"column":28,"line":91}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"216","location":{"end":{"column":29,"line":91},"start":{"column":28,"line":91}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"217","location":{"end":{"column":6,"line":102},"start":{"column":33,"line":91}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"218","location":{"end":{"column":91,"line":92},"start":{"column":60,"line":92}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"219","location":{"end":{"column":12,"line":99},"start":{"column":14,"line":95}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"220","location":{"end":{"column":92,"line":97},"start":{"column":57,"line":97}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"221","location":{"end":{"column":6,"line":104},"start":{"column":12,"line":102}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"222","location":{"end":{"column":16,"line":103},"start":{"column":14,"line":103}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"223","location":{"end":{"column":4,"line":116},"start":{"column":78,"line":107}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"224","location":{"end":{"column":83,"line":108},"start":{"column":25,"line":108}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"CompileError"},{"id":"225","location":{"end":{"column":80,"line":108},"start":{"column":49,"line":108}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"226","location":{"end":{"column":103,"line":109},"start":{"column":51,"line":109}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"227","location":{"end":{"column":37,"line":111},"start":{"column":9,"line":111}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"228","location":{"end":{"column":37,"line":111},"start":{"column":9,"line":111}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"229","location":{"end":{"column":6,"line":113},"start":{"column":39,"line":111}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"230","location":{"end":{"column":6,"line":115},"start":{"column":12,"line":113}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"231","location":{"end":{"column":16,"line":114},"start":{"column":14,"line":114}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"232","location":{"end":{"column":4,"line":126},"start":{"column":90,"line":118}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"233","location":{"end":{"column":51,"line":119},"start":{"column":21,"line":119}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"234","location":{"end":{"column":24,"line":119},"start":{"column":23,"line":119}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Survived"},{"id":"235","location":{"end":{"column":24,"line":119},"start":{"column":23,"line":119}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"236","location":{"end":{"column":56,"line":119},"start":{"column":53,"line":119}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Timeout"},{"id":"237","location":{"end":{"column":6,"line":123},"start":{"column":58,"line":119}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"238","location":{"end":{"column":59,"line":120},"start":{"column":11,"line":120}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"239","location":{"end":{"column":59,"line":120},"start":{"column":11,"line":120}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"240","location":{"end":{"column":37,"line":120},"start":{"column":34,"line":120}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"241","location":{"end":{"column":8,"line":122},"start":{"column":61,"line":120}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"242","location":{"end":{"column":4,"line":161},"start":{"column":55,"line":128}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"243","location":{"end":{"column":110,"line":129},"start":{"column":19,"line":129}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"244","location":{"end":{"column":102,"line":129},"start":{"column":72,"line":129}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"245","location":{"end":{"column":102,"line":129},"start":{"column":77,"line":129}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"246","location":{"end":{"column":102,"line":129},"start":{"column":77,"line":129}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"247","location":{"end":{"column":89,"line":129},"start":{"column":86,"line":129}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"248","location":{"end":{"column":37,"line":137},"start":{"column":36,"line":137}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"249","location":{"end":{"column":39,"line":138},"start":{"column":38,"line":138}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"250","location":{"end":{"column":41,"line":139},"start":{"column":40,"line":139}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"251","location":{"end":{"column":41,"line":140},"start":{"column":40,"line":140}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"252","location":{"end":{"column":41,"line":141},"start":{"column":40,"line":141}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"253","location":{"end":{"column":38,"line":142},"start":{"column":37,"line":142}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"254","location":{"end":{"column":41,"line":143},"start":{"column":27,"line":143}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"255","location":{"end":{"column":41,"line":143},"start":{"column":27,"line":143}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"256","location":{"end":{"column":39,"line":143},"start":{"column":38,"line":143}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"257","location":{"end":{"column":39,"line":143},"start":{"column":38,"line":143}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"258","location":{"end":{"column":74,"line":143},"start":{"column":73,"line":143}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Killed"},{"id":"259","location":{"end":{"column":60,"line":143},"start":{"column":59,"line":143}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Killed"},{"id":"260","location":{"end":{"column":59,"line":144},"start":{"column":45,"line":144}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"261","location":{"end":{"column":59,"line":144},"start":{"column":45,"line":144}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"262","location":{"end":{"column":57,"line":144},"start":{"column":56,"line":144}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"263","location":{"end":{"column":57,"line":144},"start":{"column":56,"line":144}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"264","location":{"end":{"column":103,"line":144},"start":{"column":62,"line":144}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"265","location":{"end":{"column":103,"line":144},"start":{"column":62,"line":144}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"266","location":{"end":{"column":101,"line":144},"start":{"column":99,"line":144}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"267","location":{"end":{"column":94,"line":144},"start":{"column":93,"line":144}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Killed"},{"id":"268","location":{"end":{"column":78,"line":144},"start":{"column":77,"line":144}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Killed"},{"id":"269","location":{"end":{"column":6,"line":160},"start":{"column":12,"line":145}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"}],"source":"import * as path from 'path';\n\nimport { MutationScoreThresholds } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { MutantResult, MutantStatus, ScoreResult } from '@stryker-mutator/api/report';\n\nimport flatMap = require('lodash.flatmap');\nimport groupBy = require('lodash.groupby');\n\nimport { freezeRecursively, setExitCode } from './utils/objectUtils';\n\nconst defaultScoreIfNoValidMutants = 100;\n\nexport default class ScoreResultCalculator {\n  public static inject = tokens(commonTokens.logger);\n  constructor(private readonly log: Logger) {}\n\n  public calculate(results: MutantResult[]): ScoreResult {\n    const scoreResult = this.calculateScoreResult(results, '');\n    return this.wrapIfSingleFileScoreResult(scoreResult);\n  }\n\n  public determineExitCode(score: ScoreResult, thresholds: MutationScoreThresholds | undefined) {\n    const breaking = thresholds && thresholds.break;\n    const formattedScore = score.mutationScore.toFixed(2);\n    if (typeof breaking === 'number') {\n      if (score.mutationScore < breaking) {\n        this.log.error(`Final mutation score ${formattedScore} under breaking threshold ${breaking}, setting exit code to 1 (failure).`);\n        this.log.info('(improve mutation score or set `thresholds.break = null` to prevent this error in the future)');\n        setExitCode(1);\n      } else {\n        this.log.info(`Final mutation score of ${formattedScore} is greater than or equal to break threshold ${breaking}`);\n      }\n    } else {\n      this.log.debug(\n        \"No breaking threshold configured. Won't fail the build no matter how low your mutation score is. Set `thresholds.break` to change this behavior.\"\n      );\n    }\n  }\n\n  private wrapIfSingleFileScoreResult(scoreResult: ScoreResult): ScoreResult {\n    if (scoreResult.representsFile) {\n      return this.copy(scoreResult, {\n        childResults: [this.copy(scoreResult, { name: path.basename(scoreResult.name) })],\n        name: path.dirname(scoreResult.name)\n      });\n    } else {\n      return scoreResult;\n    }\n  }\n\n  private calculateScoreResult(results: MutantResult[], basePath: string): ScoreResult {\n    const numbers = this.countNumbers(results);\n    const facts = this.determineFacts(basePath, results);\n    return freezeRecursively(Object.assign(numbers, facts));\n  }\n\n  private copy(defaults: ScoreResult, overrides: Partial<ScoreResult>): ScoreResult {\n    return Object.assign({}, defaults, overrides);\n  }\n\n  private determineFacts(basePath: string, results: MutantResult[]) {\n    const name = this.determineCommonBasePath(results, basePath);\n    const childResults = this.calculateChildScores(results, name, basePath);\n    return {\n      childResults,\n      name,\n      path: path.join(basePath, name),\n      representsFile: childResults.length === 0 && results.length > 0\n    };\n  }\n\n  private compareScoreResults(a: ScoreResult, b: ScoreResult) {\n    const sortValue = (scoreResult: ScoreResult) => {\n      // Directories first\n      if (scoreResult.representsFile) {\n        return `1${scoreResult.name}`;\n      } else {\n        return `0${scoreResult.name}`;\n      }\n    };\n    return sortValue(a).localeCompare(sortValue(b));\n  }\n\n  private calculateChildScores(results: MutantResult[], parentName: string, basePath: string) {\n    const childrenBasePath = parentName.length ? path.join(basePath, parentName) + path.sep : '';\n    const resultsGroupedByFiles = groupBy(results, result => result.sourceFilePath.substr(childrenBasePath.length));\n    const uniqueFiles = Object.keys(resultsGroupedByFiles);\n\n    if (uniqueFiles.length > 1) {\n      const filesGroupedByDirectory = groupBy(uniqueFiles, file => file.split(path.sep)[0]);\n      return Object.keys(filesGroupedByDirectory)\n\n        .map(directory =>\n          this.calculateScoreResult(\n            flatMap(filesGroupedByDirectory[directory], file => resultsGroupedByFiles[file]),\n            childrenBasePath\n          )\n        )\n        .sort(this.compareScoreResults);\n    } else {\n      return [];\n    }\n  }\n\n  private determineCommonBasePath(results: MutantResult[], basePath: string) {\n    const uniqueFiles = [...new Set(results.map(result => result.sourceFilePath))];\n    const uniqueFileDirectories = uniqueFiles.map(file => file.substr(basePath.length).split(path.sep));\n\n    if (uniqueFileDirectories.length) {\n      return uniqueFileDirectories.reduce(this.filterDirectories).join(path.sep);\n    } else {\n      return '';\n    }\n  }\n\n  private filterDirectories(previousDirectories: string[], currentDirectories: string[]) {\n    for (let i = 0; i < previousDirectories.length; i++) {\n      if (previousDirectories[i] !== currentDirectories[i]) {\n        return previousDirectories.splice(0, i);\n      }\n    }\n\n    return previousDirectories;\n  }\n\n  private countNumbers(mutantResults: MutantResult[]) {\n    const count = (mutantResult: MutantStatus) => mutantResults.filter(_ => _.status === mutantResult).length;\n\n    const killed = count(MutantStatus.Killed);\n    const timedOut = count(MutantStatus.TimedOut);\n    const survived = count(MutantStatus.Survived);\n    const noCoverage = count(MutantStatus.NoCoverage);\n    const runtimeErrors = count(MutantStatus.RuntimeError);\n    const transpileErrors = count(MutantStatus.TranspileError);\n    const totalDetected = timedOut + killed;\n    const totalUndetected = survived + noCoverage;\n    const totalCovered = totalDetected + survived;\n    const totalValid = totalUndetected + totalDetected;\n    const totalInvalid = runtimeErrors + transpileErrors;\n    const totalMutants = totalValid + totalInvalid;\n    const mutationScore = totalValid > 0 ? (totalDetected / totalValid) * 100 : defaultScoreIfNoValidMutants;\n    const mutationScoreBasedOnCoveredCode = totalValid > 0 ? (totalDetected / totalCovered) * 100 || 0 : defaultScoreIfNoValidMutants;\n    return {\n      killed,\n      mutationScore,\n      mutationScoreBasedOnCoveredCode,\n      noCoverage,\n      runtimeErrors,\n      survived,\n      timedOut,\n      totalCovered,\n      totalDetected,\n      totalInvalid,\n      totalMutants,\n      totalUndetected,\n      totalValid,\n      transpileErrors\n    };\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/SourceFile.ts":{"language":"typescript","mutants":[{"id":"270","location":{"end":{"column":2,"line":29},"start":{"column":50,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"271","location":{"end":{"column":45,"line":27},"start":{"column":5,"line":24}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"272","location":{"end":{"column":45,"line":27},"start":{"column":5,"line":24}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"273","location":{"end":{"column":43,"line":26},"start":{"column":41,"line":26}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"274","location":{"end":{"column":40,"line":26},"start":{"column":5,"line":24}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"275","location":{"end":{"column":40,"line":26},"start":{"column":5,"line":24}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"276","location":{"end":{"column":44,"line":25},"start":{"column":42,"line":25}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"277","location":{"end":{"column":41,"line":25},"start":{"column":5,"line":24}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"278","location":{"end":{"column":41,"line":25},"start":{"column":5,"line":24}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"279","location":{"end":{"column":38,"line":24},"start":{"column":36,"line":24}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"280","location":{"end":{"column":35,"line":24},"start":{"column":5,"line":24}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"281","location":{"end":{"column":35,"line":24},"start":{"column":5,"line":24}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"282","location":{"end":{"column":11,"line":24},"start":{"column":8,"line":24}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"283","location":{"end":{"column":41,"line":25},"start":{"column":5,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"284","location":{"end":{"column":41,"line":25},"start":{"column":5,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"285","location":{"end":{"column":11,"line":25},"start":{"column":8,"line":25}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"286","location":{"end":{"column":40,"line":26},"start":{"column":5,"line":26}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"287","location":{"end":{"column":40,"line":26},"start":{"column":5,"line":26}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"288","location":{"end":{"column":11,"line":26},"start":{"column":8,"line":26}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"289","location":{"end":{"column":45,"line":27},"start":{"column":5,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"290","location":{"end":{"column":45,"line":27},"start":{"column":5,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"291","location":{"end":{"column":11,"line":27},"start":{"column":8,"line":27}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"292","location":{"end":{"column":4,"line":36},"start":{"column":34,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"293","location":{"end":{"column":4,"line":40},"start":{"column":21,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"294","location":{"end":{"column":4,"line":44},"start":{"column":32,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"295","location":{"end":{"column":4,"line":51},"start":{"column":46,"line":46}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"296","location":{"end":{"column":6,"line":50},"start":{"column":12,"line":47}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"297","location":{"end":{"column":4,"line":69},"start":{"column":45,"line":53}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"298","location":{"end":{"column":23,"line":55},"start":{"column":9,"line":55}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"299","location":{"end":{"column":23,"line":55},"start":{"column":9,"line":55}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"300","location":{"end":{"column":21,"line":55},"start":{"column":20,"line":55}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Survived"},{"id":"301","location":{"end":{"column":21,"line":55},"start":{"column":20,"line":55}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"302","location":{"end":{"column":6,"line":64},"start":{"column":25,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"303","location":{"end":{"column":33,"line":63},"start":{"column":32,"line":63}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"304","location":{"end":{"column":31,"line":63},"start":{"column":20,"line":63}},"mutatorName":"UnaryOperator","replacement":"lineNumber","status":"Killed"},{"id":"305","location":{"end":{"column":6,"line":68},"start":{"column":12,"line":65}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"306","location":{"end":{"column":20,"line":66},"start":{"column":19,"line":66}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"307","location":{"end":{"column":4,"line":96},"start":{"column":62,"line":78}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"308","location":{"end":{"column":40,"line":80},"start":{"column":39,"line":80}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"309","location":{"end":{"column":23,"line":82},"start":{"column":12,"line":82}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"310","location":{"end":{"column":18,"line":82},"start":{"column":16,"line":82}},"mutatorName":"EqualityOperator","replacement":"<","status":"Killed"},{"id":"311","location":{"end":{"column":18,"line":82},"start":{"column":16,"line":82}},"mutatorName":"EqualityOperator","replacement":">","status":"Killed"},{"id":"312","location":{"end":{"column":6,"line":93},"start":{"column":25,"line":82}},"mutatorName":"BlockStatement","replacement":"{}","status":"Timeout"},{"id":"313","location":{"end":{"column":27,"line":83},"start":{"column":26,"line":83}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Timeout"},{"id":"314","location":{"end":{"column":46,"line":83},"start":{"column":29,"line":83}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"315","location":{"end":{"column":46,"line":83},"start":{"column":29,"line":83}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"316","location":{"end":{"column":36,"line":83},"start":{"column":35,"line":83}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"317","location":{"end":{"column":32,"line":86},"start":{"column":11,"line":86}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"318","location":{"end":{"column":32,"line":86},"start":{"column":11,"line":86}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"319","location":{"end":{"column":23,"line":86},"start":{"column":20,"line":86}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"320","location":{"end":{"column":8,"line":88},"start":{"column":34,"line":86}},"mutatorName":"BlockStatement","replacement":"{}","status":"Timeout"},{"id":"321","location":{"end":{"column":37,"line":88},"start":{"column":18,"line":88}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"322","location":{"end":{"column":37,"line":88},"start":{"column":18,"line":88}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"323","location":{"end":{"column":28,"line":88},"start":{"column":27,"line":88}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"324","location":{"end":{"column":28,"line":88},"start":{"column":27,"line":88}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"325","location":{"end":{"column":8,"line":90},"start":{"column":39,"line":88}},"mutatorName":"BlockStatement","replacement":"{}","status":"Timeout"},{"id":"326","location":{"end":{"column":24,"line":89},"start":{"column":23,"line":89}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Timeout"},{"id":"327","location":{"end":{"column":8,"line":92},"start":{"column":14,"line":90}},"mutatorName":"BlockStatement","replacement":"{}","status":"Timeout"},{"id":"328","location":{"end":{"column":23,"line":91},"start":{"column":22,"line":91}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Timeout"},{"id":"329","location":{"end":{"column":16,"line":95},"start":{"column":12,"line":95}},"mutatorName":"UnaryOperator","replacement":"low","status":"Killed"},{"id":"330","location":{"end":{"column":4,"line":127},"start":{"column":41,"line":97}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"331","location":{"end":{"column":32,"line":98},"start":{"column":30,"line":98}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"332","location":{"end":{"column":6,"line":104},"start":{"column":33,"line":101}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"333","location":{"end":{"column":46,"line":105},"start":{"column":12,"line":105}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"334","location":{"end":{"column":17,"line":105},"start":{"column":16,"line":105}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Survived"},{"id":"335","location":{"end":{"column":17,"line":105},"start":{"column":16,"line":105}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"336","location":{"end":{"column":6,"line":124},"start":{"column":48,"line":105}},"mutatorName":"BlockStatement","replacement":"{}","status":"Timeout"},{"id":"337","location":{"end":{"column":12,"line":107},"start":{"column":7,"line":107}},"mutatorName":"UpdateOperator","replacement":"pos--","status":"Timeout"},{"id":"338","location":{"end":{"column":17,"line":114},"start":{"column":9,"line":109}},"mutatorName":"ConditionalExpression","replacement":"case CharacterCodes.CarriageReturn:","status":"Survived"},{"id":"339","location":{"end":{"column":80,"line":110},"start":{"column":15,"line":110}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"340","location":{"end":{"column":80,"line":110},"start":{"column":15,"line":110}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"341","location":{"end":{"column":56,"line":110},"start":{"column":53,"line":110}},"mutatorName":"EqualityOperator","replacement":"!==","status":"NoCoverage"},{"id":"342","location":{"end":{"column":12,"line":112},"start":{"column":82,"line":110}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"343","location":{"end":{"column":18,"line":111},"start":{"column":13,"line":111}},"mutatorName":"UpdateOperator","replacement":"pos--","status":"NoCoverage"},{"id":"344","location":{"end":{"column":17,"line":117},"start":{"column":9,"line":115}},"mutatorName":"ConditionalExpression","replacement":"case CharacterCodes.LineFeed:","status":"Killed"},{"id":"345","location":{"end":{"column":17,"line":122},"start":{"column":9,"line":118}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"Survived"},{"id":"346","location":{"end":{"column":71,"line":119},"start":{"column":15,"line":119}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"347","location":{"end":{"column":71,"line":119},"start":{"column":15,"line":119}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"348","location":{"end":{"column":55,"line":119},"start":{"column":53,"line":119}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"349","location":{"end":{"column":19,"line":119},"start":{"column":18,"line":119}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Survived"},{"id":"350","location":{"end":{"column":19,"line":119},"start":{"column":18,"line":119}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"351","location":{"end":{"column":12,"line":121},"start":{"column":73,"line":119}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import { File, Location, Position, Range } from '@stryker-mutator/api/core';\n\nconst enum CharacterCodes {\n  MaxAsciiCharacter = 0x7f,\n  LineFeed = 0x0a, // \\n\n  CarriageReturn = 0x0d, // \\r\n  LineSeparator = 0x2028,\n  ParagraphSeparator = 0x2029\n}\n\nexport function isLineBreak(ch: number): boolean {\n  // ES5 7.3:\n  // The ECMAScript line terminator characters are listed in Table 3.\n  //     Table 3: Line Terminator Characters\n  //     Code Unit Value     Name                    Formal Name\n  //     \\u000A              Line Feed               <LF>\n  //     \\u000D              Carriage Return         <CR>\n  //     \\u2028              Line separator          <LS>\n  //     \\u2029              Paragraph separator     <PS>\n  // Only the characters in Table 3 are treated as line terminators. Other new line or line\n  // breaking characters are treated as white space but not as line terminators.\n\n  return (\n    ch === CharacterCodes.LineFeed ||\n    ch === CharacterCodes.CarriageReturn ||\n    ch === CharacterCodes.LineSeparator ||\n    ch === CharacterCodes.ParagraphSeparator\n  );\n}\n\nexport default class SourceFile {\n  private readonly lineStarts: number[];\n\n  constructor(public file: File) {\n    this.lineStarts = this.computeLineStarts();\n  }\n\n  public get name() {\n    return this.file.name;\n  }\n\n  public get content(): string {\n    return this.file.textContent;\n  }\n\n  public getLocation(range: Range): Location {\n    return {\n      end: this.getPosition(range[1]),\n      start: this.getPosition(range[0])\n    };\n  }\n\n  public getPosition(pos: number): Position {\n    let lineNumber = this.binarySearch(pos);\n    if (lineNumber < 0) {\n      // If the actual position was not found,\n      // the binary search returns the 2's-complement of the next line start\n      // e.g. if the line starts at [5, 10, 23, 80] and the position requested was 20\n      // then the search will return -2.\n      //\n      // We want the index of the previous line start, so we subtract 1.\n      // Review 2's-complement if this is confusing.\n      lineNumber = ~lineNumber - 1;\n    }\n    return {\n      column: pos - this.lineStarts[lineNumber],\n      line: lineNumber\n    };\n  }\n\n  /**\n   * Performs a binary search, finding the index at which 'value' occurs in 'array'.\n   * If no such index is found, returns the 2's-complement of first index at which\n   * number[index] exceeds number.\n   * @param array A sorted array whose first element must be no larger than number\n   * @param number The value to be searched for in the array.\n   */\n  private binarySearch(position: number, offset = 0): number {\n    let low = offset;\n    let high = this.lineStarts.length - 1;\n\n    while (low <= high) {\n      const middle = low + ((high - low) >> 1);\n      const midValue = this.lineStarts[middle];\n\n      if (midValue === position) {\n        return middle;\n      } else if (midValue > position) {\n        high = middle - 1;\n      } else {\n        low = middle + 1;\n      }\n    }\n\n    return ~low;\n  }\n  private computeLineStarts(): number[] {\n    const result: number[] = [];\n    let pos = 0;\n    let lineStart = 0;\n    const markLineStart = () => {\n      result.push(lineStart);\n      lineStart = pos;\n    };\n    while (pos < this.file.textContent.length) {\n      const ch = this.file.textContent.charCodeAt(pos);\n      pos++;\n      switch (ch) {\n        case CharacterCodes.CarriageReturn:\n          if (this.file.textContent.charCodeAt(pos) === CharacterCodes.LineFeed) {\n            pos++;\n          }\n          markLineStart();\n          break;\n        case CharacterCodes.LineFeed:\n          markLineStart();\n          break;\n        default:\n          if (ch > CharacterCodes.MaxAsciiCharacter && isLineBreak(ch)) {\n            markLineStart();\n          }\n          break;\n      }\n    }\n    result.push(lineStart);\n    return result;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/Stryker.ts":{"language":"typescript","mutants":[{"id":"352","location":{"end":{"column":4,"line":28},"start":{"column":26,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"353","location":{"end":{"column":4,"line":32},"start":{"column":51,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"354","location":{"end":{"column":4,"line":36},"start":{"column":23,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"355","location":{"end":{"column":4,"line":40},"start":{"column":36,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"356","location":{"end":{"column":4,"line":53},"start":{"column":52,"line":47}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"357","location":{"end":{"column":4,"line":104},"start":{"column":59,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"358","location":{"end":{"column":32,"line":63},"start":{"column":9,"line":63}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"359","location":{"end":{"column":32,"line":63},"start":{"column":9,"line":63}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"360","location":{"end":{"column":6,"line":102},"start":{"column":34,"line":63}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"361","location":{"end":{"column":94,"line":67},"start":{"column":55,"line":67}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"362","location":{"end":{"column":94,"line":67},"start":{"column":55,"line":67}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"363","location":{"end":{"column":88,"line":67},"start":{"column":85,"line":67}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"364","location":{"end":{"column":94,"line":67},"start":{"column":89,"line":67}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"365","location":{"end":{"column":60,"line":75},"start":{"column":55,"line":75}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"366","location":{"end":{"column":8,"line":96},"start":{"column":11,"line":86}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"367","location":{"end":{"column":78,"line":87},"start":{"column":13,"line":87}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"368","location":{"end":{"column":78,"line":87},"start":{"column":13,"line":87}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"369","location":{"end":{"column":55,"line":87},"start":{"column":53,"line":87}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"370","location":{"end":{"column":10,"line":93},"start":{"column":80,"line":87}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"371","location":{"end":{"column":10,"line":95},"start":{"column":16,"line":93}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"372","location":{"end":{"column":8,"line":101},"start":{"column":17,"line":96}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"373","location":{"end":{"column":30,"line":103},"start":{"column":28,"line":103}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"374","location":{"end":{"column":4,"line":108},"start":{"column":21,"line":106}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"375","location":{"end":{"column":32,"line":107},"start":{"column":19,"line":107}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"376","location":{"end":{"column":4,"line":114},"start":{"column":34,"line":110}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"377","location":{"end":{"column":35,"line":111},"start":{"column":9,"line":111}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"378","location":{"end":{"column":35,"line":111},"start":{"column":9,"line":111}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"379","location":{"end":{"column":35,"line":111},"start":{"column":9,"line":111}},"mutatorName":"BooleanLiteral","replacement":"this.log.isTraceEnabled()","status":"Killed"},{"id":"380","location":{"end":{"column":6,"line":113},"start":{"column":37,"line":111}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"381","location":{"end":{"column":143,"line":112},"start":{"column":21,"line":112}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"382","location":{"end":{"column":4,"line":123},"start":{"column":140,"line":116}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import { StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, PluginKind } from '@stryker-mutator/api/plugin';\nimport { MutantResult } from '@stryker-mutator/api/report';\nimport { Injector } from 'typed-inject';\n\nimport { buildMainInjector, coreTokens, MainContext, PluginCreator } from './di';\nimport InputFileCollection from './input/InputFileCollection';\nimport InputFileResolver from './input/InputFileResolver';\nimport LogConfigurator from './logging/LogConfigurator';\nimport { MutantTestMatcher } from './mutants/MutantTestMatcher';\nimport { MutatorFacade } from './mutants/MutatorFacade';\nimport InitialTestExecutor from './process/InitialTestExecutor';\nimport { MutationTestExecutor } from './process/MutationTestExecutor';\nimport { MutationTestReportCalculator } from './reporters/MutationTestReportCalculator';\nimport { SandboxPool } from './SandboxPool';\nimport ScoreResultCalculator from './ScoreResultCalculator';\nimport { transpilerFactory } from './transpiler';\nimport { MutantTranspileScheduler } from './transpiler/MutantTranspileScheduler';\nimport { TranspilerFacade } from './transpiler/TranspilerFacade';\n\nexport default class Stryker {\n  private readonly log: Logger;\n  private readonly injector: Injector<MainContext>;\n\n  private get reporter() {\n    return this.injector.resolve(coreTokens.reporter);\n  }\n\n  private get options(): Readonly<StrykerOptions> {\n    return this.injector.resolve(commonTokens.options);\n  }\n\n  private get timer() {\n    return this.injector.resolve(coreTokens.timer);\n  }\n\n  private get temporaryDirectory() {\n    return this.injector.resolve(coreTokens.temporaryDirectory);\n  }\n\n  /**\n   * The Stryker mutation tester.\n   * @constructor\n   * @param {Object} [cliOptions] - Optional options.\n   */\n  constructor(cliOptions: Partial<StrykerOptions>) {\n    LogConfigurator.configureMainProcess(cliOptions.logLevel, cliOptions.fileLogLevel, cliOptions.allowConsoleColors);\n    this.injector = buildMainInjector(cliOptions);\n    this.log = this.injector.resolve(commonTokens.getLogger)(Stryker.name);\n    // Log level may have changed\n    LogConfigurator.configureMainProcess(this.options.logLevel, this.options.fileLogLevel, this.options.allowConsoleColors);\n  }\n\n  public async runMutationTest(): Promise<MutantResult[]> {\n    const loggingContext = await LogConfigurator.configureLoggingServer(\n      this.options.logLevel,\n      this.options.fileLogLevel,\n      this.options.allowConsoleColors\n    );\n    this.timer.reset();\n    const inputFiles = await this.injector.injectClass(InputFileResolver).resolve();\n    if (inputFiles.files.length) {\n      this.temporaryDirectory.initialize();\n      const inputFileInjector = this.injector.provideValue(coreTokens.loggingContext, loggingContext).provideValue(coreTokens.inputFiles, inputFiles);\n      const initialTestRunProcess = inputFileInjector\n        .provideValue(commonTokens.produceSourceMaps, this.options.coverageAnalysis !== 'off')\n        .provideFactory(coreTokens.pluginCreatorTranspiler, PluginCreator.createFactory(PluginKind.Transpiler))\n        .provideClass(coreTokens.transpiler, TranspilerFacade)\n        .injectClass(InitialTestExecutor);\n      const initialRunResult = await initialTestRunProcess.run();\n      const mutator = inputFileInjector.injectClass(MutatorFacade);\n      const transpilerProvider = inputFileInjector\n        .provideValue(coreTokens.initialRunResult, initialRunResult)\n        .provideValue(commonTokens.produceSourceMaps, false)\n        .provideFactory(coreTokens.transpiler, transpilerFactory);\n      const transpiler = transpilerProvider.resolve(coreTokens.transpiler);\n      const transpiledFiles = await transpiler.transpile(inputFiles.files);\n      const mutationTestProcessInjector = transpilerProvider\n        .provideValue(coreTokens.transpiledFiles, transpiledFiles)\n        .provideClass(coreTokens.mutantTranspileScheduler, MutantTranspileScheduler)\n        .provideClass(coreTokens.sandboxPool, SandboxPool);\n      const testableMutants = await mutationTestProcessInjector\n        .injectClass(MutantTestMatcher)\n        .matchWithMutants(mutator.mutate(inputFiles.filesToMutate));\n      try {\n        if (initialRunResult.runResult.tests.length && testableMutants.length) {\n          const mutationTestExecutor = mutationTestProcessInjector.injectClass(MutationTestExecutor);\n          const mutantResults = await mutationTestExecutor.run(testableMutants);\n          await this.reportScore(mutantResults, inputFileInjector);\n          await this.logDone();\n          return mutantResults;\n        } else {\n          this.logTraceLogLevelHint();\n        }\n      } finally {\n        // `injector.dispose` calls `dispose` on all created instances\n        // Namely the `SandboxPool`, `MutantTranspileScheduler` and `ChildProcessProxy` instances\n        await mutationTestProcessInjector.dispose();\n        await LogConfigurator.shutdown();\n      }\n    }\n    return Promise.resolve([]);\n  }\n\n  private logDone() {\n    this.log.info('Done in %s.', this.timer.humanReadableElapsed());\n  }\n\n  private logTraceLogLevelHint() {\n    if (!this.log.isTraceEnabled()) {\n      this.log.info('Trouble figuring out what went wrong? Try `npx stryker run --fileLogLevel trace --logLevel debug` to get some more info.');\n    }\n  }\n\n  private async reportScore(mutantResults: MutantResult[], inputFileInjector: Injector<MainContext & { inputFiles: InputFileCollection }>) {\n    inputFileInjector.injectClass(MutationTestReportCalculator).report(mutantResults);\n    const calculator = this.injector.injectClass(ScoreResultCalculator);\n    const score = calculator.calculate(mutantResults);\n    this.reporter.onScoreCalculated(score);\n    calculator.determineExitCode(score, this.options.thresholds);\n    await this.reporter.wrapUp();\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/StrykerCli.ts":{"language":"typescript","mutants":[{"id":"383","location":{"end":{"column":2,"line":22},"start":{"column":76,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"384","location":{"end":{"column":4,"line":21},"start":{"column":24,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"385","location":{"end":{"column":2,"line":26},"start":{"column":28,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"386","location":{"end":{"column":23,"line":25},"start":{"column":20,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"387","location":{"end":{"column":2,"line":31},"start":{"column":36,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"388","location":{"end":{"column":36,"line":30},"start":{"column":10,"line":30}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"389","location":{"end":{"column":36,"line":30},"start":{"column":10,"line":30}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"390","location":{"end":{"column":26,"line":30},"start":{"column":24,"line":30}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"391","location":{"end":{"column":23,"line":30},"start":{"column":10,"line":30}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"392","location":{"end":{"column":23,"line":30},"start":{"column":10,"line":30}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"393","location":{"end":{"column":15,"line":30},"start":{"column":12,"line":30}},"mutatorName":"EqualityOperator","replacement":"===","status":"CompileError"},{"id":"394","location":{"end":{"column":23,"line":30},"start":{"column":16,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"395","location":{"end":{"column":36,"line":30},"start":{"column":27,"line":30}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"396","location":{"end":{"column":36,"line":30},"start":{"column":27,"line":30}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"397","location":{"end":{"column":32,"line":30},"start":{"column":29,"line":30}},"mutatorName":"EqualityOperator","replacement":"===","status":"NoCoverage"},{"id":"398","location":{"end":{"column":36,"line":30},"start":{"column":33,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"399","location":{"end":{"column":31,"line":34},"start":{"column":29,"line":34}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"400","location":{"end":{"column":116,"line":40},"start":{"column":40,"line":40}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"401","location":{"end":{"column":4,"line":165},"start":{"column":16,"line":44}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"402","location":{"end":{"column":41,"line":48},"start":{"column":24,"line":48}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"403","location":{"end":{"column":53,"line":49},"start":{"column":14,"line":49}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"404","location":{"end":{"column":159,"line":55},"start":{"column":9,"line":51}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"405","location":{"end":{"column":47,"line":57},"start":{"column":18,"line":57}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"406","location":{"end":{"column":8,"line":61},"start":{"column":48,"line":58}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"407","location":{"end":{"column":33,"line":63},"start":{"column":9,"line":63}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"408","location":{"end":{"column":87,"line":65},"start":{"column":9,"line":64}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"409","location":{"end":{"column":39,"line":69},"start":{"column":9,"line":69}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"410","location":{"end":{"column":33,"line":71},"start":{"column":9,"line":70}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"411","location":{"end":{"column":47,"line":75},"start":{"column":9,"line":75}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"412","location":{"end":{"column":109,"line":76},"start":{"column":9,"line":76}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"413","location":{"end":{"column":39,"line":78},"start":{"column":15,"line":78}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"414","location":{"end":{"column":90,"line":78},"start":{"column":41,"line":78}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"415","location":{"end":{"column":36,"line":79},"start":{"column":15,"line":79}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"416","location":{"end":{"column":83,"line":79},"start":{"column":38,"line":79}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"417","location":{"end":{"column":33,"line":80},"start":{"column":15,"line":80}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"418","location":{"end":{"column":85,"line":80},"start":{"column":35,"line":80}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"419","location":{"end":{"column":50,"line":81},"start":{"column":15,"line":81}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"420","location":{"end":{"column":99,"line":81},"start":{"column":52,"line":81}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"421","location":{"end":{"column":35,"line":82},"start":{"column":15,"line":82}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"422","location":{"end":{"column":109,"line":82},"start":{"column":37,"line":82}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"423","location":{"end":{"column":42,"line":83},"start":{"column":15,"line":83}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"424","location":{"end":{"column":101,"line":83},"start":{"column":44,"line":83}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"425","location":{"end":{"column":37,"line":84},"start":{"column":15,"line":84}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"426","location":{"end":{"column":110,"line":84},"start":{"column":39,"line":84}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"427","location":{"end":{"column":41,"line":85},"start":{"column":15,"line":85}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"428","location":{"end":{"column":123,"line":85},"start":{"column":43,"line":85}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"429","location":{"end":{"column":47,"line":86},"start":{"column":15,"line":86}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"430","location":{"end":{"column":124,"line":86},"start":{"column":49,"line":86}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"431","location":{"end":{"column":29,"line":88},"start":{"column":9,"line":88}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"432","location":{"end":{"column":154,"line":89},"start":{"column":9,"line":89}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"433","location":{"end":{"column":33,"line":92},"start":{"column":9,"line":92}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"434","location":{"end":{"column":176,"line":93},"start":{"column":9,"line":93}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"435","location":{"end":{"column":50,"line":95},"start":{"column":15,"line":95}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"436","location":{"end":{"column":116,"line":95},"start":{"column":52,"line":95}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"437","location":{"end":{"column":136,"line":95},"start":{"column":132,"line":95}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"438","location":{"end":{"column":37,"line":97},"start":{"column":9,"line":97}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"439","location":{"end":{"column":159,"line":98},"start":{"column":9,"line":98}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"440","location":{"end":{"column":40,"line":99},"start":{"column":31,"line":99}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"441","location":{"end":{"column":40,"line":102},"start":{"column":9,"line":102}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"442","location":{"end":{"column":170,"line":103},"start":{"column":9,"line":103}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"443","location":{"end":{"column":40,"line":104},"start":{"column":31,"line":104}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"444","location":{"end":{"column":36,"line":107},"start":{"column":9,"line":107}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"445","location":{"end":{"column":85,"line":108},"start":{"column":9,"line":108}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"446","location":{"end":{"column":39,"line":109},"start":{"column":31,"line":109}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"447","location":{"end":{"column":36,"line":112},"start":{"column":9,"line":112}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"448","location":{"end":{"column":128,"line":113},"start":{"column":9,"line":113}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"449","location":{"end":{"column":40,"line":114},"start":{"column":31,"line":114}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"450","location":{"end":{"column":65,"line":117},"start":{"column":9,"line":117}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"451","location":{"end":{"column":61,"line":117},"start":{"column":58,"line":117}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"452","location":{"end":{"column":142,"line":118},"start":{"column":9,"line":118}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"453","location":{"end":{"column":43,"line":119},"start":{"column":31,"line":119}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"454","location":{"end":{"column":31,"line":122},"start":{"column":9,"line":122}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"455","location":{"end":{"column":142,"line":123},"start":{"column":9,"line":123}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"456","location":{"end":{"column":6,"line":141},"start":{"column":35,"line":137}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"457","location":{"end":{"column":58,"line":138},"start":{"column":11,"line":138}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"458","location":{"end":{"column":58,"line":138},"start":{"column":11,"line":138}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"459","location":{"end":{"column":31,"line":138},"start":{"column":29,"line":138}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"460","location":{"end":{"column":27,"line":138},"start":{"column":24,"line":138}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"461","location":{"end":{"column":57,"line":138},"start":{"column":45,"line":138}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"462","location":{"end":{"column":8,"line":140},"start":{"column":60,"line":138}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"463","location":{"end":{"column":27,"line":143},"start":{"column":9,"line":143}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"464","location":{"end":{"column":27,"line":143},"start":{"column":9,"line":143}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"465","location":{"end":{"column":6,"line":145},"start":{"column":29,"line":143}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"466","location":{"end":{"column":6,"line":151},"start":{"column":61,"line":148}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"467","location":{"end":{"column":52,"line":149},"start":{"column":13,"line":149}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"468","location":{"end":{"column":52,"line":150},"start":{"column":12,"line":150}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"469","location":{"end":{"column":53,"line":153},"start":{"column":9,"line":153}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"470","location":{"end":{"column":53,"line":153},"start":{"column":9,"line":153}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"471","location":{"end":{"column":6,"line":162},"start":{"column":55,"line":153}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"472","location":{"end":{"column":8,"line":161},"start":{"column":45,"line":154}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"473","location":{"end":{"column":43,"line":155},"start":{"column":24,"line":155}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"474","location":{"end":{"column":39,"line":156},"start":{"column":13,"line":156}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"475","location":{"end":{"column":39,"line":156},"start":{"column":13,"line":156}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"476","location":{"end":{"column":39,"line":156},"start":{"column":13,"line":156}},"mutatorName":"BooleanLiteral","replacement":"this.log.isTraceEnabled()","status":"NoCoverage"},{"id":"477","location":{"end":{"column":10,"line":158},"start":{"column":41,"line":156}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"478","location":{"end":{"column":147,"line":157},"start":{"column":25,"line":157}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"479","location":{"end":{"column":43,"line":160},"start":{"column":35,"line":160}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"480","location":{"end":{"column":6,"line":164},"start":{"column":12,"line":162}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"481","location":{"end":{"column":97,"line":163},"start":{"column":22,"line":163}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"}],"source":"import { Command } from 'commander';\nimport { getLogger } from 'log4js';\nimport { DashboardOptions, StrykerOptions, ALL_REPORT_TYPES } from '@stryker-mutator/api/core';\nimport { Config } from '@stryker-mutator/api/config';\nimport { Logger } from '@stryker-mutator/api/logging';\n\nimport { CONFIG_SYNTAX_HELP } from './config/ConfigReader';\nimport { initializerFactory } from './initializer';\nimport LogConfigurator from './logging/LogConfigurator';\nimport Stryker from './Stryker';\n\n/**\n * Interpret a command line argument and add it to an object.\n * @param object The object to assign the value to.\n * @param key The property name under which the value needs to be stored.\n */\nfunction deepOption<T extends string, R>(object: { [K in T]?: R }, key: T) {\n  return (value: R) => {\n    object[key] = value;\n    return undefined;\n  };\n}\n\nfunction list(val: string) {\n  return val.split(',');\n}\n\nfunction parseBoolean(val: string) {\n  const v = val.toLocaleLowerCase();\n  return v !== 'false' && v !== '0';\n}\n\nexport default class StrykerCli {\n  private command: string = '';\n  private strykerConfig: string | null = null;\n\n  constructor(\n    private readonly argv: string[],\n    private readonly program: Command = new Command(),\n    private readonly runMutationTest = (options: Partial<StrykerOptions>) => new Stryker(options).runMutationTest(),\n    private readonly log: Logger = getLogger(StrykerCli.name)\n  ) {}\n\n  public run() {\n    const dashboard: Partial<DashboardOptions> = {};\n    const defaultValues = new Config();\n    this.program\n      .version(require('../package.json').version)\n      .usage('<command> [options] [stryker.conf.js]')\n      .description(\n        `Possible commands:\n        run: Run mutation testing\n        init: Initialize Stryker for your project\n\n    Optional location to the stryker.conf.js file as last argument. That file should export a function which accepts a \"config\" object\\n${CONFIG_SYNTAX_HELP}`\n      )\n      .arguments('<command> [stryker.conf.js]')\n      .action((cmd: string, config: string) => {\n        this.command = cmd;\n        this.strykerConfig = config;\n      })\n      .option(\n        '-f, --files <allFiles>',\n        `A comma separated list of globbing expression used for selecting all files needed to run the tests. For a more detailed way of selecting input files, please use a configFile.\n      Example: node_modules/a-lib/**/*.js,src/**/*.js,!src/index.js,a.js,test/**/*.js`,\n        list\n      )\n      .option(\n        '-m, --mutate <filesToMutate>',\n        `A comma separated list of globbing expression used for selecting the files that should be mutated.\n      Example: src/**/*.js,a.js`,\n        list\n      )\n      .option(\n        '--coverageAnalysis <perTest|all|off>',\n        `The coverage analysis strategy you want to use. Default value: \"${defaultValues.coverageAnalysis}\"`\n      )\n      .option('--testFramework <name>', 'The name of the test framework you want to use.')\n      .option('--testRunner <name>', 'The name of the test runner you want to use')\n      .option('--mutator <name>', 'The name of the mutant generator you want to use')\n      .option('--transpilers <listOfTranspilers>', 'A comma separated list of transpilers to use.', list)\n      .option('--reporters <name>', 'A comma separated list of the names of the reporter(s) you want to use', list)\n      .option('--plugins <listOfPlugins>', 'A list of plugins you want stryker to load (`require`).', list)\n      .option('--timeoutMS <number>', 'Tweak the absolute timeout used to wait for a test runner to complete', parseInt)\n      .option('--timeoutFactor <number>', 'Tweak the standard deviation relative to the normal test run of a mutated test', parseFloat)\n      .option('--maxConcurrentTestRunners <n>', 'Set the number of max concurrent test runner to spawn (default: cpuCount)', parseInt)\n      .option(\n        '--logLevel <level>',\n        `Set the log level for the console. Possible values: fatal, error, warn, info, debug, trace, all and off. Default is \"${defaultValues.logLevel}\"`\n      )\n      .option(\n        '--fileLogLevel <level>',\n        `Set the log4js log level for the \"stryker.log\" file. Possible values: fatal, error, warn, info, debug, trace, all and off. Default is \"${defaultValues.fileLogLevel}\"`\n      )\n      .option('--allowConsoleColors <true/false>', 'Indicates whether or not Stryker should use colors in console.', parseBoolean, true)\n      .option(\n        '--dashboard.project <name>',\n        'Indicates which project name to use if the \"dashboard\" reporter is enabled. Defaults to the git url configured in the environment of your CI server.',\n        deepOption(dashboard, 'project')\n      )\n      .option(\n        '--dashboard.version <version>',\n        'Indicates which version to use if the \"dashboard\" reporter is enabled. Defaults to the branch name or tag name configured in the environment of your CI server.',\n        deepOption(dashboard, 'version')\n      )\n      .option(\n        '--dashboard.module <name>',\n        'Indicates which module name to use if the \"dashboard\" reporter is enabled.',\n        deepOption(dashboard, 'module')\n      )\n      .option(\n        '--dashboard.baseUrl <url>',\n        `Indicates which baseUrl to use when reporting to the stryker dashboard. Default: \"${defaultValues.dashboard.baseUrl}\"`,\n        deepOption(dashboard, 'baseUrl')\n      )\n      .option(\n        `--dashboard.reportType <${ALL_REPORT_TYPES.join('|')}>`,\n        `Send a full report (inc. source code and mutant results) or only the mutation score. Default: ${defaultValues.dashboard.reportType}`,\n        deepOption(dashboard, 'reportType')\n      )\n      .option(\n        '--tempDirName <name>',\n        'Set the name of the directory that is used by Stryker as a working directory. This directory will be cleaned after a successful run'\n      )\n      .parse(this.argv);\n\n    // Earliest opportunity to configure the log level based on the logLevel argument\n    LogConfigurator.configureMainProcess(this.program.logLevel);\n\n    // Cleanup commander state\n    delete this.program.options;\n    delete this.program.rawArgs;\n    delete this.program.args;\n    delete this.program.Command;\n    delete this.program.Option;\n    delete this.program.commands;\n    for (const i in this.program) {\n      if (i.startsWith('_') || i.startsWith('dashboard.')) {\n        delete this.program[i];\n      }\n    }\n\n    if (this.strykerConfig) {\n      this.program.configFile = this.strykerConfig;\n    }\n    this.program.dashboard = dashboard;\n\n    const commands: { [cmd: string]: () => Promise<any> } = {\n      init: () => initializerFactory().initialize(),\n      run: () => this.runMutationTest(this.program)\n    };\n\n    if (Object.keys(commands).includes(this.command)) {\n      commands[this.command]().catch(err => {\n        this.log.error('an error occurred', err);\n        if (!this.log.isTraceEnabled()) {\n          this.log.info('Trouble figuring out what went wrong? Try `npx stryker run --fileLogLevel trace --logLevel debug` to get some more info.');\n        }\n        process.exitCode = 1;\n        process.kill(process.pid, 'SIGINT');\n      });\n    } else {\n      this.log.error('Unknown command: \"%s\", supported commands: [%s], or use `stryker --help`.', this.command, Object.keys(commands));\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/TestFrameworkOrchestrator.ts":{"language":"typescript","mutants":[{"id":"482","location":{"end":{"column":4,"line":27},"start":{"column":57,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"483","location":{"end":{"column":52,"line":18},"start":{"column":9,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"484","location":{"end":{"column":52,"line":18},"start":{"column":9,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"485","location":{"end":{"column":42,"line":18},"start":{"column":39,"line":18}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"486","location":{"end":{"column":52,"line":18},"start":{"column":43,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"487","location":{"end":{"column":6,"line":24},"start":{"column":54,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"488","location":{"end":{"column":119,"line":20},"start":{"column":9,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"489","location":{"end":{"column":6,"line":26},"start":{"column":12,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"490","location":{"end":{"column":4,"line":42},"start":{"column":74,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"491","location":{"end":{"column":35,"line":31},"start":{"column":9,"line":31}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"492","location":{"end":{"column":35,"line":31},"start":{"column":9,"line":31}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"493","location":{"end":{"column":6,"line":38},"start":{"column":37,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"494","location":{"end":{"column":8,"line":35},"start":{"column":11,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"495","location":{"end":{"column":110,"line":34},"start":{"column":24,"line":34}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"496","location":{"end":{"column":8,"line":37},"start":{"column":23,"line":35}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"497","location":{"end":{"column":90,"line":36},"start":{"column":23,"line":36}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"498","location":{"end":{"column":6,"line":40},"start":{"column":12,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"499","location":{"end":{"column":137,"line":39},"start":{"column":21,"line":39}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import { StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, PluginKind, tokens } from '@stryker-mutator/api/plugin';\nimport { TestFramework } from '@stryker-mutator/api/test_framework';\n\nimport { coreTokens } from './di';\nimport { PluginCreator } from './di/PluginCreator';\n\nexport default class TestFrameworkOrchestrator {\n  public static inject = tokens(commonTokens.logger, commonTokens.options, coreTokens.pluginCreatorTestFramework);\n  constructor(\n    private readonly log: Logger,\n    private readonly options: StrykerOptions,\n    private readonly pluginCreator: PluginCreator<PluginKind.TestFramework>\n  ) {}\n\n  public determineTestFramework(): TestFramework | null {\n    if (this.options.coverageAnalysis !== 'perTest') {\n      this.log.debug(\n        'The `coverageAnalysis` setting is \"%s\", not hooking into the test framework to achieve performance benefits.',\n        this.options.coverageAnalysis\n      );\n      return null;\n    } else {\n      return this.determineFrameworkWithCoverageAnalysis();\n    }\n  }\n\n  private determineFrameworkWithCoverageAnalysis(): TestFramework | null {\n    let testFramework: TestFramework | null = null;\n    if (this.options.testFramework) {\n      try {\n        testFramework = this.pluginCreator.create(this.options.testFramework);\n        this.log.debug(`Using testFramework ${this.options.testFramework} based on \\`testFramework\\` setting`);\n      } catch (error) {\n        this.log.warn(`Could not create test framework \\`${this.options.testFramework}\\``, error);\n      }\n    } else {\n      this.log.warn('Missing config settings `testFramework`. Set `coverageAnalysis` option explicitly to \"off\" to ignore this warning.');\n    }\n    return testFramework;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/TestableMutant.ts":{"language":"typescript","mutants":[{"id":"500","location":{"end":{"column":29,"line":18},"start":{"column":24,"line":18}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"501","location":{"end":{"column":45,"line":19},"start":{"column":43,"line":19}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"502","location":{"end":{"column":4,"line":24},"start":{"column":47,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"503","location":{"end":{"column":95,"line":22},"start":{"column":56,"line":22}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"504","location":{"end":{"column":78,"line":22},"start":{"column":77,"line":22}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"505","location":{"end":{"column":28,"line":23},"start":{"column":24,"line":23}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"506","location":{"end":{"column":4,"line":30},"start":{"column":60,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"507","location":{"end":{"column":65,"line":27},"start":{"column":29,"line":27}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"508","location":{"end":{"column":56,"line":28},"start":{"column":5,"line":28}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"509","location":{"end":{"column":56,"line":28},"start":{"column":5,"line":28}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"510","location":{"end":{"column":29,"line":29},"start":{"column":24,"line":29}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"511","location":{"end":{"column":33,"line":34},"start":{"column":31,"line":34}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"512","location":{"end":{"column":4,"line":41},"start":{"column":47,"line":39}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"513","location":{"end":{"column":4,"line":45},"start":{"column":37,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"514","location":{"end":{"column":4,"line":49},"start":{"column":37,"line":47}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"515","location":{"end":{"column":4,"line":53},"start":{"column":25,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"516","location":{"end":{"column":4,"line":57},"start":{"column":28,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"517","location":{"end":{"column":4,"line":61},"start":{"column":22,"line":59}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"518","location":{"end":{"column":4,"line":65},"start":{"column":28,"line":63}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"519","location":{"end":{"column":4,"line":72},"start":{"column":25,"line":67}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"520","location":{"end":{"column":24,"line":68},"start":{"column":9,"line":68}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"521","location":{"end":{"column":24,"line":68},"start":{"column":9,"line":68}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"522","location":{"end":{"column":24,"line":68},"start":{"column":9,"line":68}},"mutatorName":"BooleanLiteral","replacement":"this._location","status":"Killed"},{"id":"523","location":{"end":{"column":6,"line":70},"start":{"column":26,"line":68}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"524","location":{"end":{"column":4,"line":76},"start":{"column":28,"line":74}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"525","location":{"end":{"column":81,"line":75},"start":{"column":80,"line":75}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"526","location":{"end":{"column":62,"line":75},"start":{"column":61,"line":75}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"527","location":{"end":{"column":4,"line":80},"start":{"column":29,"line":78}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"528","location":{"end":{"column":4,"line":85},"start":{"column":89,"line":82}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"529","location":{"end":{"column":4,"line":89},"start":{"column":60,"line":87}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"530","location":{"end":{"column":4,"line":96},"start":{"column":30,"line":93}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"531","location":{"end":{"column":4,"line":105},"start":{"column":29,"line":98}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"532","location":{"end":{"column":32,"line":102},"start":{"column":31,"line":102}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"533","location":{"end":{"column":76,"line":101},"start":{"column":75,"line":101}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"534","location":{"end":{"column":4,"line":117},"start":{"column":36,"line":107}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"535","location":{"end":{"column":98,"line":110},"start":{"column":12,"line":110}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"536","location":{"end":{"column":34,"line":110},"start":{"column":32,"line":110}},"mutatorName":"LogicalOperator","replacement":"||","status":"Timeout"},{"id":"537","location":{"end":{"column":29,"line":110},"start":{"column":28,"line":110}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Timeout"},{"id":"538","location":{"end":{"column":29,"line":110},"start":{"column":28,"line":110}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"539","location":{"end":{"column":98,"line":110},"start":{"column":35,"line":110}},"mutatorName":"BooleanLiteral","replacement":"isLineBreak(this.originalCode.charCodeAt(startIndexLines - 1))","status":"Killed"},{"id":"540","location":{"end":{"column":94,"line":110},"start":{"column":93,"line":110}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"541","location":{"end":{"column":6,"line":112},"start":{"column":100,"line":110}},"mutatorName":"BlockStatement","replacement":"{}","status":"Timeout"},{"id":"542","location":{"end":{"column":24,"line":111},"start":{"column":7,"line":111}},"mutatorName":"UpdateOperator","replacement":"startIndexLines++","status":"Killed"},{"id":"543","location":{"end":{"column":119,"line":113},"start":{"column":12,"line":113}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"544","location":{"end":{"column":61,"line":113},"start":{"column":59,"line":113}},"mutatorName":"LogicalOperator","replacement":"||","status":"Timeout"},{"id":"545","location":{"end":{"column":27,"line":113},"start":{"column":26,"line":113}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Survived"},{"id":"546","location":{"end":{"column":27,"line":113},"start":{"column":26,"line":113}},"mutatorName":"EqualityOperator","replacement":">=","status":"Timeout"},{"id":"547","location":{"end":{"column":119,"line":113},"start":{"column":62,"line":113}},"mutatorName":"BooleanLiteral","replacement":"isLineBreak(this.originalCode.charCodeAt(endIndexLines))","status":"Killed"},{"id":"548","location":{"end":{"column":6,"line":115},"start":{"column":121,"line":113}},"mutatorName":"BlockStatement","replacement":"{}","status":"Timeout"},{"id":"549","location":{"end":{"column":22,"line":114},"start":{"column":7,"line":114}},"mutatorName":"UpdateOperator","replacement":"endIndexLines--","status":"Timeout"},{"id":"550","location":{"end":{"column":44,"line":116},"start":{"column":12,"line":116}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"551","location":{"end":{"column":4,"line":132},"start":{"column":79,"line":119}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"552","location":{"end":{"column":6,"line":131},"start":{"column":30,"line":120}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"553","location":{"end":{"column":4,"line":136},"start":{"column":21,"line":134}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"554","location":{"end":{"column":149,"line":135},"start":{"column":12,"line":135}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"555","location":{"end":{"column":115,"line":135},"start":{"column":114,"line":135}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Survived"}],"source":"import { Location } from '@stryker-mutator/api/core';\nimport { Mutant } from '@stryker-mutator/api/mutant';\nimport { MutantResult, MutantStatus } from '@stryker-mutator/api/report';\nimport { TestSelection } from '@stryker-mutator/api/test_framework';\nimport { RunResult, TestResult } from '@stryker-mutator/api/test_runner';\n\nimport SourceFile, { isLineBreak } from './SourceFile';\nimport { freezeRecursively } from './utils/objectUtils';\n\nexport enum TestSelectionResult {\n  Failed,\n  FailedButAlreadyReported,\n  Success\n}\n\nclass TestFilter {\n  public timeSpentScopedTests = 0;\n  public runAllTests = false;\n  public selectedTests: TestSelection[] = [];\n\n  public selectAllTests(runResult: RunResult) {\n    this.timeSpentScopedTests = runResult.tests.reduce((time, test) => time + test.timeSpentMs, this.timeSpentScopedTests);\n    this.runAllTests = true;\n  }\n\n  public selectTest(testResult: TestResult, index: number) {\n    this.selectedTests.push({ id: index, name: testResult.name });\n    this.timeSpentScopedTests += testResult.timeSpentMs;\n    this.runAllTests = false;\n  }\n}\n\nexport default class TestableMutant {\n  public specsRan: string[] = [];\n  private readonly filter = new TestFilter();\n  private _location: Location;\n  public testSelectionResult = TestSelectionResult.Success;\n\n  public get selectedTests(): TestSelection[] {\n    return this.filter.selectedTests;\n  }\n\n  public get runAllTests(): boolean {\n    return this.filter.runAllTests;\n  }\n\n  public get timeSpentScopedTests() {\n    return this.filter.timeSpentScopedTests;\n  }\n\n  public get fileName() {\n    return this.mutant.fileName;\n  }\n\n  public get mutatorName() {\n    return this.mutant.mutatorName;\n  }\n\n  public get range() {\n    return this.mutant.range;\n  }\n\n  public get replacement() {\n    return this.mutant.replacement;\n  }\n\n  public get location() {\n    if (!this._location) {\n      this._location = this.sourceFile.getLocation(this.range);\n    }\n    return this._location;\n  }\n\n  public get mutatedCode() {\n    return this.sourceFile.content.substr(0, this.range[0]) + this.replacement + this.sourceFile.content.substr(this.range[1]);\n  }\n\n  public get originalCode() {\n    return this.sourceFile.content;\n  }\n\n  public selectAllTests(runResult: RunResult, testSelectionResult: TestSelectionResult) {\n    this.filter.selectAllTests(runResult);\n    this.testSelectionResult = testSelectionResult;\n  }\n\n  public selectTest(testResult: TestResult, index: number) {\n    this.filter.selectTest(testResult, index);\n  }\n\n  constructor(public readonly id: string, public mutant: Mutant, public sourceFile: SourceFile) {}\n\n  public get originalLines() {\n    const [startIndex, endIndex] = this.getMutationLineIndexes();\n    return this.sourceFile.content.substring(startIndex, endIndex);\n  }\n\n  public get mutatedLines() {\n    const [startIndex, endIndex] = this.getMutationLineIndexes();\n    return (\n      this.sourceFile.content.substring(startIndex, this.mutant.range[0]) +\n      this.mutant.replacement +\n      this.sourceFile.content.substring(this.mutant.range[1], endIndex)\n    );\n  }\n\n  private getMutationLineIndexes() {\n    let startIndexLines = this.mutant.range[0];\n    let endIndexLines = this.mutant.range[1];\n    while (startIndexLines > 0 && !isLineBreak(this.originalCode.charCodeAt(startIndexLines - 1))) {\n      startIndexLines--;\n    }\n    while (endIndexLines < this.sourceFile.content.length && !isLineBreak(this.originalCode.charCodeAt(endIndexLines))) {\n      endIndexLines++;\n    }\n    return [startIndexLines, endIndexLines];\n  }\n\n  public createResult(status: MutantStatus, testsRan: string[]): MutantResult {\n    return freezeRecursively({\n      id: this.id,\n      location: this.location,\n      mutatedLines: this.mutatedLines,\n      mutatorName: this.mutatorName,\n      originalLines: this.originalLines,\n      range: this.range,\n      replacement: this.replacement,\n      sourceFilePath: this.fileName,\n      status,\n      testsRan\n    });\n  }\n\n  public toString() {\n    return `${this.mutant.mutatorName}: (${this.replacement}) file://${this.fileName}:${this.location.start.line + 1}:${this.location.start.column}`;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/child-proxy/ChildProcessCrashedError.ts":{"language":"typescript","mutants":[{"id":"556","location":{"end":{"column":4,"line":9},"start":{"column":149,"line":4}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import { StrykerError } from '@stryker-mutator/util';\n\nexport default class ChildProcessCrashedError extends StrykerError {\n  constructor(public readonly pid: number, message: string, public readonly exitCode?: number, public readonly signal?: string, innerError?: Error) {\n    super(message, innerError);\n    Error.captureStackTrace(this, ChildProcessCrashedError);\n    // TS recommendation: https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, ChildProcessCrashedError.prototype);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/child-proxy/ChildProcessProxy.ts":{"language":"typescript","mutants":[{"id":"557","location":{"end":{"column":39,"line":27},"start":{"column":32,"line":27}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"558","location":{"end":{"column":63,"line":28},"start":{"column":39,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"559","location":{"end":{"column":44,"line":38},"start":{"column":42,"line":38}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"560","location":{"end":{"column":29,"line":42},"start":{"column":24,"line":42}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"561","location":{"end":{"column":4,"line":70},"start":{"column":5,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"562","location":{"end":{"column":67,"line":52},"start":{"column":40,"line":52}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"563","location":{"end":{"column":81,"line":52},"start":{"column":70,"line":52}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"564","location":{"end":{"column":113,"line":52},"start":{"column":83,"line":52}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"565","location":{"end":{"column":97,"line":52},"start":{"column":93,"line":52}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"566","location":{"end":{"column":111,"line":52},"start":{"column":109,"line":52}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"567","location":{"end":{"column":53,"line":54},"start":{"column":20,"line":54}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"568","location":{"end":{"column":6,"line":63},"start":{"column":15,"line":55}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"569","location":{"end":{"column":27,"line":67},"start":{"column":20,"line":67}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"570","location":{"end":{"column":27,"line":68},"start":{"column":20,"line":68}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"571","location":{"end":{"column":4,"line":84},"start":{"column":27,"line":82}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"572","location":{"end":{"column":4,"line":88},"start":{"column":40,"line":86}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"573","location":{"end":{"column":47,"line":87},"start":{"column":41,"line":87}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"574","location":{"end":{"column":4,"line":103},"start":{"column":39,"line":90}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"575","location":{"end":{"column":6,"line":102},"start":{"column":44,"line":94}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"576","location":{"end":{"column":8,"line":101},"start":{"column":27,"line":95}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"577","location":{"end":{"column":44,"line":96},"start":{"column":13,"line":96}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"578","location":{"end":{"column":44,"line":96},"start":{"column":13,"line":96}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"579","location":{"end":{"column":35,"line":96},"start":{"column":32,"line":96}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"580","location":{"end":{"column":44,"line":96},"start":{"column":36,"line":96}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"581","location":{"end":{"column":10,"line":98},"start":{"column":46,"line":96}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"582","location":{"end":{"column":10,"line":100},"start":{"column":16,"line":98}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"583","location":{"end":{"column":4,"line":123},"start":{"column":39,"line":105}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"584","location":{"end":{"column":6,"line":122},"start":{"column":32,"line":106}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"585","location":{"end":{"column":28,"line":107},"start":{"column":11,"line":107}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"586","location":{"end":{"column":28,"line":107},"start":{"column":11,"line":107}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"587","location":{"end":{"column":8,"line":109},"start":{"column":30,"line":107}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"588","location":{"end":{"column":8,"line":121},"start":{"column":14,"line":109}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"589","location":{"end":{"column":66,"line":111},"start":{"column":65,"line":111}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"590","location":{"end":{"column":10,"line":119},"start":{"column":42,"line":112}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"591","location":{"end":{"column":12,"line":118},"start":{"column":21,"line":113}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"592","location":{"end":{"column":4,"line":150},"start":{"column":31,"line":125}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"593","location":{"end":{"column":29,"line":126},"start":{"column":20,"line":126}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"594","location":{"end":{"column":6,"line":149},"start":{"column":62,"line":126}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"595","location":{"end":{"column":75,"line":127},"start":{"column":69,"line":127}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"596","location":{"end":{"column":17,"line":131},"start":{"column":9,"line":129}},"mutatorName":"ConditionalExpression","replacement":"case ParentMessageKind.Initialized:","status":"CompileError"},{"id":"597","location":{"end":{"column":17,"line":135},"start":{"column":9,"line":132}},"mutatorName":"ConditionalExpression","replacement":"case ParentMessageKind.Result:","status":"CompileError"},{"id":"598","location":{"end":{"column":17,"line":139},"start":{"column":9,"line":136}},"mutatorName":"ConditionalExpression","replacement":"case ParentMessageKind.Rejection:","status":"Survived"},{"id":"599","location":{"end":{"column":17,"line":144},"start":{"column":9,"line":140}},"mutatorName":"ConditionalExpression","replacement":"case ParentMessageKind.DisposeCompleted:","status":"CompileError"},{"id":"600","location":{"end":{"column":31,"line":141},"start":{"column":15,"line":141}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"601","location":{"end":{"column":31,"line":141},"start":{"column":15,"line":141}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"602","location":{"end":{"column":12,"line":143},"start":{"column":33,"line":141}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"603","location":{"end":{"column":17,"line":147},"start":{"column":9,"line":145}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"Survived"},{"id":"604","location":{"end":{"column":4,"line":168},"start":{"column":37,"line":152}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"605","location":{"end":{"column":6,"line":159},"start":{"column":24,"line":153}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"606","location":{"end":{"column":6,"line":159},"start":{"column":79,"line":153}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"607","location":{"end":{"column":36,"line":156},"start":{"column":11,"line":156}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"608","location":{"end":{"column":36,"line":156},"start":{"column":11,"line":156}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"609","location":{"end":{"column":8,"line":158},"start":{"column":38,"line":156}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"610","location":{"end":{"column":27,"line":161},"start":{"column":9,"line":161}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"611","location":{"end":{"column":27,"line":161},"start":{"column":9,"line":161}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"612","location":{"end":{"column":6,"line":163},"start":{"column":29,"line":161}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"613","location":{"end":{"column":35,"line":162},"start":{"column":29,"line":162}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"614","location":{"end":{"column":27,"line":165},"start":{"column":9,"line":165}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"615","location":{"end":{"column":27,"line":165},"start":{"column":9,"line":165}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"616","location":{"end":{"column":6,"line":167},"start":{"column":29,"line":165}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"617","location":{"end":{"column":35,"line":166},"start":{"column":29,"line":166}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"618","location":{"end":{"column":4,"line":172},"start":{"column":37,"line":170}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"619","location":{"end":{"column":54,"line":171},"start":{"column":29,"line":171}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"620","location":{"end":{"column":54,"line":171},"start":{"column":37,"line":171}},"mutatorName":"BooleanLiteral","replacement":"task.isCompleted","status":"Killed"},{"id":"621","location":{"end":{"column":90,"line":171},"start":{"column":64,"line":171}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"622","location":{"end":{"column":4,"line":205},"start":{"column":77,"line":174}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"623","location":{"end":{"column":27,"line":175},"start":{"column":23,"line":175}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"624","location":{"end":{"column":29,"line":178},"start":{"column":9,"line":178}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"625","location":{"end":{"column":29,"line":178},"start":{"column":9,"line":178}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"626","location":{"end":{"column":6,"line":182},"start":{"column":31,"line":178}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"627","location":{"end":{"column":131,"line":180},"start":{"column":21,"line":180}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"628","location":{"end":{"column":6,"line":190},"start":{"column":12,"line":182}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"629","location":{"end":{"column":146,"line":185},"start":{"column":9,"line":185}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"630","location":{"end":{"column":121,"line":185},"start":{"column":95,"line":185}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"631","location":{"end":{"column":121,"line":185},"start":{"column":95,"line":185}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"632","location":{"end":{"column":104,"line":185},"start":{"column":102,"line":185}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"633","location":{"end":{"column":121,"line":185},"start":{"column":105,"line":185}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"634","location":{"end":{"column":6,"line":196},"start":{"column":35,"line":194}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"635","location":{"end":{"column":61,"line":195},"start":{"column":30,"line":195}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"636","location":{"end":{"column":6,"line":204},"start":{"column":32,"line":198}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"637","location":{"end":{"column":24,"line":199},"start":{"column":11,"line":199}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"638","location":{"end":{"column":24,"line":199},"start":{"column":11,"line":199}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"639","location":{"end":{"column":8,"line":201},"start":{"column":26,"line":199}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"640","location":{"end":{"column":80,"line":200},"start":{"column":16,"line":200}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"641","location":{"end":{"column":8,"line":203},"start":{"column":14,"line":201}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"642","location":{"end":{"column":47,"line":202},"start":{"column":16,"line":202}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"643","location":{"end":{"column":4,"line":216},"start":{"column":52,"line":207}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"644","location":{"end":{"column":42,"line":208},"start":{"column":9,"line":208}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"645","location":{"end":{"column":42,"line":208},"start":{"column":9,"line":208}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"646","location":{"end":{"column":6,"line":213},"start":{"column":44,"line":208}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"647","location":{"end":{"column":116,"line":209},"start":{"column":21,"line":209}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"648","location":{"end":{"column":107,"line":211},"start":{"column":55,"line":211}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"649","location":{"end":{"column":6,"line":215},"start":{"column":12,"line":213}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"650","location":{"end":{"column":4,"line":220},"start":{"column":47,"line":218}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"651","location":{"end":{"column":126,"line":219},"start":{"column":12,"line":219}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"652","location":{"end":{"column":126,"line":219},"start":{"column":12,"line":219}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"653","location":{"end":{"column":38,"line":219},"start":{"column":36,"line":219}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"654","location":{"end":{"column":125,"line":219},"start":{"column":40,"line":219}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"655","location":{"end":{"column":125,"line":219},"start":{"column":40,"line":219}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"656","location":{"end":{"column":80,"line":219},"start":{"column":78,"line":219}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"657","location":{"end":{"column":77,"line":219},"start":{"column":40,"line":219}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"658","location":{"end":{"column":77,"line":219},"start":{"column":40,"line":219}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"659","location":{"end":{"column":54,"line":219},"start":{"column":51,"line":219}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"660","location":{"end":{"column":125,"line":219},"start":{"column":81,"line":219}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"661","location":{"end":{"column":125,"line":219},"start":{"column":81,"line":219}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"662","location":{"end":{"column":95,"line":219},"start":{"column":92,"line":219}},"mutatorName":"EqualityOperator","replacement":"!==","status":"NoCoverage"},{"id":"663","location":{"end":{"column":4,"line":236},"start":{"column":41,"line":222}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"664","location":{"end":{"column":25,"line":223},"start":{"column":9,"line":223}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"665","location":{"end":{"column":25,"line":223},"start":{"column":9,"line":223}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"666","location":{"end":{"column":25,"line":223},"start":{"column":9,"line":223}},"mutatorName":"BooleanLiteral","replacement":"this.isDisposed","status":"Killed"},{"id":"667","location":{"end":{"column":6,"line":235},"start":{"column":27,"line":223}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"668","location":{"end":{"column":41,"line":224},"start":{"column":34,"line":224}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"669","location":{"end":{"column":29,"line":225},"start":{"column":25,"line":225}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"670","location":{"end":{"column":54,"line":226},"start":{"column":22,"line":226}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"671","location":{"end":{"column":52,"line":228},"start":{"column":17,"line":228}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"672","location":{"end":{"column":8,"line":231},"start":{"column":11,"line":229}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"673","location":{"end":{"column":8,"line":234},"start":{"column":17,"line":231}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"674","location":{"end":{"column":33,"line":232},"start":{"column":24,"line":232}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"675","location":{"end":{"column":4,"line":240},"start":{"column":50,"line":238}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"676","location":{"end":{"column":62,"line":239},"start":{"column":20,"line":239}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"}],"source":"import { ChildProcess, fork } from 'child_process';\nimport * as os from 'os';\n\nimport { File, StrykerOptions } from '@stryker-mutator/api/core';\nimport { OptionsContext } from '@stryker-mutator/api/plugin';\nimport { isErrnoException } from '@stryker-mutator/util';\nimport { getLogger } from 'log4js';\nimport { Disposable, InjectableClass, InjectionToken } from 'typed-inject';\n\nimport LoggingClientContext from '../logging/LoggingClientContext';\nimport { deserialize, kill, padLeft, serialize } from '../utils/objectUtils';\nimport StringBuilder from '../utils/StringBuilder';\nimport { ExpirableTask, Task } from '../utils/Task';\n\nimport ChildProcessCrashedError from './ChildProcessCrashedError';\nimport { autoStart, ParentMessage, ParentMessageKind, WorkerMessage, WorkerMessageKind } from './messageProtocol';\nimport OutOfMemoryError from './OutOfMemoryError';\n\ntype Func<TS extends any[], R> = (...args: TS) => R;\n\ntype PromisifiedFunc<TS extends any[], R> = (...args: TS) => Promise<R>;\n\nexport type Promisified<T> = {\n  [K in keyof T]: T[K] extends PromisifiedFunc<any, any> ? T[K] : T[K] extends Func<infer TS, infer R> ? PromisifiedFunc<TS, R> : () => Promise<T[K]>;\n};\n\nconst BROKEN_PIPE_ERROR_CODE = 'EPIPE';\nconst IPC_CHANNEL_CLOSED_ERROR_CODE = 'ERR_IPC_CHANNEL_CLOSED';\nconst TIMEOUT_FOR_DISPOSE = 2000;\n\nexport default class ChildProcessProxy<T> implements Disposable {\n  public readonly proxy: Promisified<T>;\n\n  private readonly worker: ChildProcess;\n  private readonly initTask: Task;\n  private disposeTask: ExpirableTask | undefined;\n  private currentError: ChildProcessCrashedError | undefined;\n  private readonly workerTasks: Task[] = [];\n  private readonly log = getLogger(ChildProcessProxy.name);\n  private readonly stdoutBuilder = new StringBuilder();\n  private readonly stderrBuilder = new StringBuilder();\n  private isDisposed = false;\n\n  private constructor(\n    requirePath: string,\n    requireName: string,\n    loggingContext: LoggingClientContext,\n    options: StrykerOptions,\n    additionalInjectableValues: unknown,\n    workingDirectory: string\n  ) {\n    this.worker = fork(require.resolve('./ChildProcessProxyWorker'), [autoStart], { silent: true, execArgv: [] });\n    this.initTask = new Task();\n    this.log.debug('Starting %s in child process %s', requirePath, this.worker.pid);\n    this.send({\n      additionalInjectableValues,\n      kind: WorkerMessageKind.Init,\n      loggingContext,\n      options,\n      requireName,\n      requirePath,\n      workingDirectory\n    });\n    this.listenForMessages();\n    this.listenToStdoutAndStderr();\n    // Listen to `close`, not `exit`, see https://github.com/stryker-mutator/stryker/issues/1634\n    this.worker.on('close', this.handleUnexpectedExit);\n    this.worker.on('error', this.handleError);\n    this.proxy = this.initProxy();\n  }\n\n  /**\n   * @description Creates a proxy where each function of the object created using the constructorFunction arg is ran inside of a child process\n   */\n  public static create<TAdditionalContext, R, Tokens extends Array<InjectionToken<OptionsContext & TAdditionalContext>>>(\n    requirePath: string,\n    loggingContext: LoggingClientContext,\n    options: StrykerOptions,\n    additionalInjectableValues: TAdditionalContext,\n    workingDirectory: string,\n    InjectableClass: InjectableClass<TAdditionalContext & OptionsContext, R, Tokens>\n  ): ChildProcessProxy<R> {\n    return new ChildProcessProxy(requirePath, InjectableClass.name, loggingContext, options, additionalInjectableValues, workingDirectory);\n  }\n\n  private send(message: WorkerMessage) {\n    this.worker.send(serialize(message, [File]));\n  }\n\n  private initProxy(): Promisified<T> {\n    // This proxy is a genuine javascript `Proxy` class\n    // More info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n    const self = this;\n    return new Proxy({} as Promisified<T>, {\n      get(_, propertyKey) {\n        if (typeof propertyKey === 'string') {\n          return self.forward(propertyKey);\n        } else {\n          return undefined;\n        }\n      }\n    });\n  }\n\n  private forward(methodName: string) {\n    return (...args: any[]) => {\n      if (this.currentError) {\n        return Promise.reject(this.currentError);\n      } else {\n        const workerTask = new Task<void>();\n        const correlationId = this.workerTasks.push(workerTask) - 1;\n        this.initTask.promise.then(() => {\n          this.send({\n            args,\n            correlationId,\n            kind: WorkerMessageKind.Call,\n            methodName\n          });\n        });\n        return workerTask.promise;\n      }\n    };\n  }\n\n  private listenForMessages() {\n    this.worker.on('message', (serializedMessage: string) => {\n      const message: ParentMessage = deserialize(serializedMessage, [File]);\n      switch (message.kind) {\n        case ParentMessageKind.Initialized:\n          this.initTask.resolve(undefined);\n          break;\n        case ParentMessageKind.Result:\n          this.workerTasks[message.correlationId].resolve(message.result);\n          delete this.workerTasks[message.correlationId];\n          break;\n        case ParentMessageKind.Rejection:\n          this.workerTasks[message.correlationId].reject(new Error(message.error));\n          delete this.workerTasks[message.correlationId];\n          break;\n        case ParentMessageKind.DisposeCompleted:\n          if (this.disposeTask) {\n            this.disposeTask.resolve(undefined);\n          }\n          break;\n        default:\n          this.logUnidentifiedMessage(message);\n          break;\n      }\n    });\n  }\n\n  private listenToStdoutAndStderr() {\n    const handleData = (builder: StringBuilder) => (data: Buffer | string) => {\n      const output = data.toString();\n      builder.append(output);\n      if (this.log.isTraceEnabled()) {\n        this.log.trace(output);\n      }\n    };\n\n    if (this.worker.stdout) {\n      this.worker.stdout.on('data', handleData(this.stdoutBuilder));\n    }\n\n    if (this.worker.stderr) {\n      this.worker.stderr.on('data', handleData(this.stderrBuilder));\n    }\n  }\n\n  private reportError(error: Error) {\n    this.workerTasks.filter(task => !task.isCompleted).forEach(task => task.reject(error));\n  }\n\n  private readonly handleUnexpectedExit = (code: number, signal: string) => {\n    this.isDisposed = true;\n    const output = StringBuilder.concat(this.stderrBuilder, this.stdoutBuilder);\n\n    if (processOutOfMemory()) {\n      this.currentError = new OutOfMemoryError(this.worker.pid, code);\n      this.log.warn(`Child process [pid ${this.currentError.pid}] ran out of memory. Stdout and stderr are logged on debug level.`);\n      this.log.debug(stdoutAndStderr());\n    } else {\n      this.currentError = new ChildProcessCrashedError(\n        this.worker.pid,\n        `Child process [pid ${this.worker.pid}] exited unexpectedly with exit code ${code} (${signal || 'without signal'}). ${stdoutAndStderr()}`,\n        code,\n        signal\n      );\n      this.log.warn(this.currentError.message, this.currentError);\n    }\n\n    this.reportError(this.currentError);\n\n    function processOutOfMemory() {\n      return output.includes('JavaScript heap out of memory');\n    }\n\n    function stdoutAndStderr() {\n      if (output.length) {\n        return `Last part of stdout and stderr was:${os.EOL}${padLeft(output)}`;\n      } else {\n        return 'Stdout and stderr were empty.';\n      }\n    }\n  };\n\n  private readonly handleError = (error: Error) => {\n    if (this.innerProcessIsCrashed(error)) {\n      this.log.warn(`Child process [pid ${this.worker.pid}] has crashed. See other warning messages for more info.`, error);\n      this.reportError(\n        new ChildProcessCrashedError(this.worker.pid, `Child process [pid ${this.worker.pid}] has crashed`, undefined, undefined, error)\n      );\n    } else {\n      this.reportError(error);\n    }\n  };\n\n  private innerProcessIsCrashed(error: Error) {\n    return isErrnoException(error) && (error.code === BROKEN_PIPE_ERROR_CODE || error.code === IPC_CHANNEL_CLOSED_ERROR_CODE);\n  }\n\n  public async dispose(): Promise<void> {\n    if (!this.isDisposed) {\n      this.worker.removeListener('close', this.handleUnexpectedExit);\n      this.isDisposed = true;\n      this.log.debug('Disposing of worker process %s', this.worker.pid);\n      this.disposeTask = new ExpirableTask(TIMEOUT_FOR_DISPOSE);\n      this.send({ kind: WorkerMessageKind.Dispose });\n      try {\n        await this.disposeTask.promise;\n      } finally {\n        this.log.debug('Kill %s', this.worker.pid);\n        await kill(this.worker.pid);\n      }\n    }\n  }\n\n  private logUnidentifiedMessage(message: never) {\n    this.log.error(`Received unidentified message ${message}`);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/child-proxy/ChildProcessProxyWorker.ts":{"language":"typescript","mutants":[{"id":"677","location":{"end":{"column":4,"line":23},"start":{"column":17,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"678","location":{"end":{"column":25,"line":22},"start":{"column":16,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"679","location":{"end":{"column":4,"line":30},"start":{"column":38,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"680","location":{"end":{"column":21,"line":26},"start":{"column":9,"line":26}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"681","location":{"end":{"column":21,"line":26},"start":{"column":9,"line":26}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"682","location":{"end":{"column":6,"line":29},"start":{"column":23,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"683","location":{"end":{"column":42,"line":27},"start":{"column":36,"line":27}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"684","location":{"end":{"column":4,"line":80},"start":{"column":52,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"685","location":{"end":{"column":73,"line":32},"start":{"column":67,"line":32}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"686","location":{"end":{"column":15,"line":52},"start":{"column":7,"line":34}},"mutatorName":"ConditionalExpression","replacement":"case WorkerMessageKind.Init:","status":"CompileError"},{"id":"687","location":{"end":{"column":10,"line":42},"start":{"column":50,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"688","location":{"end":{"column":41,"line":45},"start":{"column":13,"line":45}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"689","location":{"end":{"column":41,"line":45},"start":{"column":13,"line":45}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"690","location":{"end":{"column":30,"line":45},"start":{"column":27,"line":45}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"691","location":{"end":{"column":10,"line":48},"start":{"column":43,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"692","location":{"end":{"column":96,"line":46},"start":{"column":26,"line":46}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"693","location":{"end":{"column":58,"line":50},"start":{"column":19,"line":50}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"694","location":{"end":{"column":15,"line":70},"start":{"column":7,"line":53}},"mutatorName":"ConditionalExpression","replacement":"case WorkerMessageKind.Call:","status":"Killed"},{"id":"695","location":{"end":{"column":61,"line":54},"start":{"column":21,"line":54}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"696","location":{"end":{"column":12,"line":61},"start":{"column":27,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"697","location":{"end":{"column":14,"line":60},"start":{"column":23,"line":56}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"698","location":{"end":{"column":12,"line":68},"start":{"column":27,"line":62}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"699","location":{"end":{"column":14,"line":67},"start":{"column":23,"line":63}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"700","location":{"end":{"column":15,"line":78},"start":{"column":7,"line":71}},"mutatorName":"ConditionalExpression","replacement":"case WorkerMessageKind.Dispose:","status":"Survived"},{"id":"701","location":{"end":{"column":10,"line":74},"start":{"column":37,"line":72}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"702","location":{"end":{"column":65,"line":73},"start":{"column":21,"line":73}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"703","location":{"end":{"column":4,"line":88},"start":{"column":74,"line":82}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"704","location":{"end":{"column":67,"line":83},"start":{"column":9,"line":83}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"705","location":{"end":{"column":67,"line":83},"start":{"column":9,"line":83}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"706","location":{"end":{"column":56,"line":83},"start":{"column":53,"line":83}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"707","location":{"end":{"column":67,"line":83},"start":{"column":57,"line":83}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"708","location":{"end":{"column":6,"line":85},"start":{"column":69,"line":83}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"709","location":{"end":{"column":6,"line":87},"start":{"column":12,"line":85}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"710","location":{"end":{"column":4,"line":106},"start":{"column":87,"line":96}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"711","location":{"end":{"column":32,"line":97},"start":{"column":23,"line":97}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"712","location":{"end":{"column":6,"line":105},"start":{"column":54,"line":97}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"713","location":{"end":{"column":38,"line":98},"start":{"column":11,"line":98}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"714","location":{"end":{"column":38,"line":98},"start":{"column":11,"line":98}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"715","location":{"end":{"column":23,"line":98},"start":{"column":20,"line":98}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"716","location":{"end":{"column":8,"line":104},"start":{"column":40,"line":98}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"717","location":{"end":{"column":120,"line":100},"start":{"column":11,"line":100}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"718","location":{"end":{"column":41,"line":103},"start":{"column":32,"line":103}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"719","location":{"end":{"column":4,"line":123},"start":{"column":37,"line":113}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"720","location":{"end":{"column":57,"line":114},"start":{"column":55,"line":114}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"721","location":{"end":{"column":36,"line":115},"start":{"column":16,"line":115}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"722","location":{"end":{"column":6,"line":118},"start":{"column":59,"line":115}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"723","location":{"end":{"column":134,"line":117},"start":{"column":22,"line":117}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"724","location":{"end":{"column":34,"line":119},"start":{"column":16,"line":119}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"725","location":{"end":{"column":6,"line":122},"start":{"column":47,"line":119}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"726","location":{"end":{"column":72,"line":120},"start":{"column":71,"line":120}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"727","location":{"end":{"column":138,"line":121},"start":{"column":22,"line":121}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"728","location":{"end":{"column":37,"line":128},"start":{"column":5,"line":128}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"729","location":{"end":{"column":37,"line":128},"start":{"column":5,"line":128}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"730","location":{"end":{"column":2,"line":130},"start":{"column":39,"line":128}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import * as path from 'path';\n\nimport { Config } from '@stryker-mutator/api/config';\nimport { File } from '@stryker-mutator/api/core';\nimport { errorToString } from '@stryker-mutator/util';\nimport { getLogger, Logger } from 'log4js';\n\nimport { buildChildProcessInjector } from '../di';\nimport LogConfigurator from '../logging/LogConfigurator';\nimport { deserialize, serialize } from '../utils/objectUtils';\n\nimport { autoStart, CallMessage, ParentMessage, ParentMessageKind, WorkerMessage, WorkerMessageKind } from './messageProtocol';\n\nexport default class ChildProcessProxyWorker {\n  private log: Logger;\n\n  public realSubject: any;\n\n  constructor() {\n    // Make sure to bind the methods in order to ensure the `this` pointer\n    this.handleMessage = this.handleMessage.bind(this);\n    process.on('message', this.handleMessage);\n  }\n\n  private send(value: ParentMessage) {\n    if (process.send) {\n      const str = serialize(value, [File]);\n      process.send(str);\n    }\n  }\n  private handleMessage(serializedMessage: string) {\n    const message = deserialize<WorkerMessage>(serializedMessage, [File]);\n    switch (message.kind) {\n      case WorkerMessageKind.Init:\n        LogConfigurator.configureChildProcess(message.loggingContext);\n        this.log = getLogger(ChildProcessProxyWorker.name);\n        this.handlePromiseRejections();\n        let injector = buildChildProcessInjector((message.options as unknown) as Config);\n        const locals = message.additionalInjectableValues as any;\n        for (const token of Object.keys(locals)) {\n          injector = injector.provideValue(token, locals[token]);\n        }\n        const RealSubjectClass = require(message.requirePath)[message.requireName];\n        const workingDir = path.resolve(message.workingDirectory);\n        if (process.cwd() !== workingDir) {\n          this.log.debug(`Changing current working directory for this process to ${workingDir}`);\n          process.chdir(workingDir);\n        }\n        this.realSubject = injector.injectClass(RealSubjectClass);\n        this.send({ kind: ParentMessageKind.Initialized });\n        this.removeAnyAdditionalMessageListeners(this.handleMessage);\n        break;\n      case WorkerMessageKind.Call:\n        new Promise(resolve => resolve(this.doCall(message)))\n          .then(result => {\n            this.send({\n              correlationId: message.correlationId,\n              kind: ParentMessageKind.Result,\n              result\n            });\n          })\n          .catch(error => {\n            this.send({\n              correlationId: message.correlationId,\n              error: errorToString(error),\n              kind: ParentMessageKind.Rejection\n            });\n          });\n        this.removeAnyAdditionalMessageListeners(this.handleMessage);\n        break;\n      case WorkerMessageKind.Dispose:\n        const sendCompleted = () => {\n          this.send({ kind: ParentMessageKind.DisposeCompleted });\n        };\n        LogConfigurator.shutdown()\n          .then(sendCompleted)\n          .catch(sendCompleted);\n        break;\n    }\n  }\n\n  private doCall(message: CallMessage): {} | PromiseLike<{}> | undefined {\n    if (typeof this.realSubject[message.methodName] === 'function') {\n      return this.realSubject[message.methodName](...message.args);\n    } else {\n      return this.realSubject[message.methodName];\n    }\n  }\n\n  /**\n   * Remove any addition message listeners that might me eavesdropping.\n   * the @ngtools/webpack plugin listens to messages and throws an error whenever it could not handle a message\n   * @see https://github.com/angular/angular-cli/blob/f776d3cf7982b64734c57fe4407434e9f4ec09f7/packages/%40ngtools/webpack/src/type_checker.ts#L79\n   * @param exceptListener The listener that should remain\n   */\n  private removeAnyAdditionalMessageListeners(exceptListener: NodeJS.MessageListener) {\n    process.listeners('message').forEach(listener => {\n      if (listener !== exceptListener) {\n        this.log.debug(\n          \"Removing an additional message listener, we don't want eavesdropping on our inter-process communication: %s\",\n          listener.toString()\n        );\n        process.removeListener('message', listener);\n      }\n    });\n  }\n\n  /**\n   * During mutation testing, it's to be expected that promise rejections are not handled synchronously anymore (or not at all)\n   * Let's handle those events so future versions of node don't crash\n   * See issue 350: https://github.com/stryker-mutator/stryker/issues/350\n   */\n  private handlePromiseRejections() {\n    const unhandledRejections: Array<Promise<void>> = [];\n    process.on('unhandledRejection', (reason, promise) => {\n      const unhandledPromiseId = unhandledRejections.push(promise);\n      this.log.debug(`UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: ${unhandledPromiseId}): ${reason}`);\n    });\n    process.on('rejectionHandled', promise => {\n      const unhandledPromiseId = unhandledRejections.indexOf(promise) + 1;\n      this.log.debug(`PromiseRejectionHandledWarning: Promise rejection was handled asynchronously (rejection id: ${unhandledPromiseId})`);\n    });\n  }\n}\n\n// Prevent side effects for merely requiring the file\n// Only actually start the child worker when it is requested\nif (process.argv.includes(autoStart)) {\n  new ChildProcessProxyWorker();\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/child-proxy/OutOfMemoryError.ts":{"language":"typescript","mutants":[{"id":"731","location":{"end":{"column":4,"line":10},"start":{"column":46,"line":4}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"732","location":{"end":{"column":50,"line":5},"start":{"column":16,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"733","location":{"end":{"column":30,"line":6},"start":{"column":20,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import ChildProcessCrashedError from './ChildProcessCrashedError';\n\nexport default class OutOfMemoryError extends ChildProcessCrashedError {\n  constructor(pid: number, exitCode: number) {\n    super(pid, `Process ${pid} ran out of memory`, exitCode);\n    this.message = 'Process ';\n    Error.captureStackTrace(this, OutOfMemoryError);\n    // TS recommendation: https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, OutOfMemoryError.prototype);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/child-proxy/messageProtocol.ts":{"language":"typescript","mutants":[{"id":"734","location":{"end":{"column":9,"line":6},"start":{"column":3,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"735","location":{"end":{"column":9,"line":7},"start":{"column":3,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"736","location":{"end":{"column":12,"line":8},"start":{"column":3,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"737","location":{"end":{"column":16,"line":12},"start":{"column":3,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"738","location":{"end":{"column":11,"line":13},"start":{"column":3,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"739","location":{"end":{"column":14,"line":14},"start":{"column":3,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"740","location":{"end":{"column":21,"line":15},"start":{"column":3,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"741","location":{"end":{"column":60,"line":23},"start":{"column":26,"line":23}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import { StrykerOptions } from '@stryker-mutator/api/core';\n\nimport LoggingClientContext from '../logging/LoggingClientContext';\n\nexport enum WorkerMessageKind {\n  'Init',\n  'Call',\n  'Dispose'\n}\n\nexport enum ParentMessageKind {\n  'Initialized',\n  'Result',\n  'Rejection',\n  'DisposeCompleted'\n}\n\nexport type WorkerMessage = InitMessage | CallMessage | DisposeMessage;\nexport type ParentMessage = WorkResult | { kind: ParentMessageKind.Initialized | ParentMessageKind.DisposeCompleted } | RejectionResult;\n\n// Make this an unlikely command line argument\n// (prevents incidental start of child process)\nexport const autoStart = 'childProcessAutoStart12937129s7d';\n\nexport interface InitMessage {\n  kind: WorkerMessageKind.Init;\n  loggingContext: LoggingClientContext;\n  options: StrykerOptions;\n  workingDirectory: string;\n  requireName: string;\n  requirePath: string;\n  additionalInjectableValues: unknown;\n}\n\nexport interface DisposeMessage {\n  kind: WorkerMessageKind.Dispose;\n}\n\nexport interface WorkResult {\n  kind: ParentMessageKind.Result;\n  correlationId: number;\n  result: any;\n}\n\nexport interface RejectionResult {\n  kind: ParentMessageKind.Rejection;\n  correlationId: number;\n  error: string;\n}\n\nexport interface CallMessage {\n  correlationId: number;\n  kind: WorkerMessageKind.Call;\n  args: any[];\n  methodName: string;\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/config/ConfigEditorApplier.ts":{"language":"typescript","mutants":[{"id":"742","location":{"end":{"column":4,"line":21},"start":{"column":37,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"743","location":{"end":{"column":6,"line":20},"start":{"column":79,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import { Config, ConfigEditor } from '@stryker-mutator/api/config';\nimport { commonTokens, PluginKind, PluginResolver } from '@stryker-mutator/api/plugin';\nimport { tokens } from 'typed-inject';\n\nimport { coreTokens } from '../di';\nimport { PluginCreator } from '../di/PluginCreator';\n\n/**\n * Class that applies all config editor plugins\n */\nexport class ConfigEditorApplier implements ConfigEditor {\n  public static inject = tokens(commonTokens.pluginResolver, coreTokens.pluginCreatorConfigEditor);\n\n  constructor(private readonly pluginResolver: PluginResolver, private readonly pluginCreator: PluginCreator<PluginKind.ConfigEditor>) {}\n\n  public edit(config: Config): void {\n    this.pluginResolver.resolveAll(PluginKind.ConfigEditor).forEach(plugin => {\n      const configEditor = this.pluginCreator.create(plugin.name);\n      configEditor.edit(config);\n    });\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/config/ConfigReader.ts":{"language":"typescript","mutants":[{"id":"744","location":{"end":{"column":142,"line":12},"start":{"column":141,"line":12}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"745","location":{"end":{"column":128,"line":12},"start":{"column":127,"line":12}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"746","location":{"end":{"column":101,"line":12},"start":{"column":100,"line":12}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"747","location":{"end":{"column":78,"line":12},"start":{"column":77,"line":12}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"748","location":{"end":{"column":76,"line":12},"start":{"column":35,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"749","location":{"end":{"column":99,"line":12},"start":{"column":79,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"750","location":{"end":{"column":126,"line":12},"start":{"column":102,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"751","location":{"end":{"column":140,"line":12},"start":{"column":129,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"752","location":{"end":{"column":149,"line":12},"start":{"column":143,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"753","location":{"end":{"column":46,"line":14},"start":{"column":29,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"754","location":{"end":{"column":4,"line":38},"start":{"column":23,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"755","location":{"end":{"column":6,"line":25},"start":{"column":9,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"756","location":{"end":{"column":6,"line":27},"start":{"column":17,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"757","location":{"end":{"column":53,"line":26},"start":{"column":30,"line":26}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"758","location":{"end":{"column":34,"line":31},"start":{"column":9,"line":31}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"759","location":{"end":{"column":34,"line":31},"start":{"column":9,"line":31}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"760","location":{"end":{"column":6,"line":33},"start":{"column":36,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"761","location":{"end":{"column":73,"line":32},"start":{"column":22,"line":32}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"762","location":{"end":{"column":4,"line":47},"start":{"column":43,"line":39}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"763","location":{"end":{"column":82,"line":40},"start":{"column":9,"line":40}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"764","location":{"end":{"column":82,"line":40},"start":{"column":9,"line":40}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"765","location":{"end":{"column":49,"line":40},"start":{"column":47,"line":40}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"766","location":{"end":{"column":46,"line":40},"start":{"column":9,"line":40}},"mutatorName":"BooleanLiteral","replacement":"(typeof config.mutator === 'string')","status":"CompileError"},{"id":"767","location":{"end":{"column":45,"line":40},"start":{"column":11,"line":40}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"768","location":{"end":{"column":45,"line":40},"start":{"column":11,"line":40}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"769","location":{"end":{"column":36,"line":40},"start":{"column":33,"line":40}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"770","location":{"end":{"column":45,"line":40},"start":{"column":37,"line":40}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"771","location":{"end":{"column":6,"line":46},"start":{"column":84,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"772","location":{"end":{"column":48,"line":41},"start":{"column":46,"line":41}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"NoCoverage"},{"id":"773","location":{"end":{"column":91,"line":43},"start":{"column":48,"line":42}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage"},{"id":"774","location":{"end":{"column":4,"line":92},"start":{"column":77,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"775","location":{"end":{"column":38,"line":49},"start":{"column":36,"line":49}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"NoCoverage"},{"id":"776","location":{"end":{"column":26,"line":51},"start":{"column":12,"line":51}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"777","location":{"end":{"column":15,"line":54},"start":{"column":7,"line":52}},"mutatorName":"ConditionalExpression","replacement":"case 'ArrayNewExpression':","status":"NoCoverage"},{"id":"778","location":{"end":{"column":32,"line":52},"start":{"column":12,"line":52}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"779","location":{"end":{"column":45,"line":53},"start":{"column":27,"line":53}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"780","location":{"end":{"column":15,"line":57},"start":{"column":7,"line":55}},"mutatorName":"ConditionalExpression","replacement":"case 'BinaryExpression':","status":"NoCoverage"},{"id":"781","location":{"end":{"column":30,"line":55},"start":{"column":12,"line":55}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"782","location":{"end":{"column":91,"line":56},"start":{"column":30,"line":56}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage"},{"id":"783","location":{"end":{"column":51,"line":56},"start":{"column":31,"line":56}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"784","location":{"end":{"column":71,"line":56},"start":{"column":53,"line":56}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"785","location":{"end":{"column":90,"line":56},"start":{"column":73,"line":56}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"786","location":{"end":{"column":15,"line":60},"start":{"column":7,"line":58}},"mutatorName":"ConditionalExpression","replacement":"case 'Block':","status":"NoCoverage"},{"id":"787","location":{"end":{"column":19,"line":58},"start":{"column":12,"line":58}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"788","location":{"end":{"column":43,"line":59},"start":{"column":27,"line":59}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"789","location":{"end":{"column":15,"line":63},"start":{"column":7,"line":61}},"mutatorName":"ConditionalExpression","replacement":"case 'BooleanSubstitution':","status":"NoCoverage"},{"id":"790","location":{"end":{"column":33,"line":61},"start":{"column":12,"line":61}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"791","location":{"end":{"column":43,"line":62},"start":{"column":27,"line":62}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"792","location":{"end":{"column":25,"line":64},"start":{"column":12,"line":64}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"793","location":{"end":{"column":26,"line":65},"start":{"column":12,"line":65}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"794","location":{"end":{"column":25,"line":66},"start":{"column":12,"line":66}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"795","location":{"end":{"column":24,"line":67},"start":{"column":12,"line":67}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"796","location":{"end":{"column":15,"line":70},"start":{"column":7,"line":68}},"mutatorName":"ConditionalExpression","replacement":"case 'WhileStatement':","status":"NoCoverage"},{"id":"797","location":{"end":{"column":28,"line":68},"start":{"column":12,"line":68}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"798","location":{"end":{"column":50,"line":69},"start":{"column":27,"line":69}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"799","location":{"end":{"column":15,"line":73},"start":{"column":7,"line":71}},"mutatorName":"ConditionalExpression","replacement":"case 'PrefixUnaryExpression':","status":"NoCoverage"},{"id":"800","location":{"end":{"column":35,"line":71},"start":{"column":12,"line":71}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"801","location":{"end":{"column":42,"line":72},"start":{"column":27,"line":72}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"802","location":{"end":{"column":60,"line":72},"start":{"column":44,"line":72}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"803","location":{"end":{"column":78,"line":72},"start":{"column":62,"line":72}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"804","location":{"end":{"column":15,"line":76},"start":{"column":7,"line":74}},"mutatorName":"ConditionalExpression","replacement":"case 'PostfixUnaryExpression':","status":"NoCoverage"},{"id":"805","location":{"end":{"column":36,"line":74},"start":{"column":12,"line":74}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"806","location":{"end":{"column":43,"line":75},"start":{"column":27,"line":75}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"807","location":{"end":{"column":15,"line":78},"start":{"column":7,"line":77}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"NoCoverage"},{"id":"808","location":{"end":{"column":32,"line":81},"start":{"column":9,"line":81}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"809","location":{"end":{"column":32,"line":81},"start":{"column":9,"line":81}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"810","location":{"end":{"column":30,"line":81},"start":{"column":29,"line":81}},"mutatorName":"EqualityOperator","replacement":"<=","status":"NoCoverage"},{"id":"811","location":{"end":{"column":30,"line":81},"start":{"column":29,"line":81}},"mutatorName":"EqualityOperator","replacement":">=","status":"NoCoverage"},{"id":"812","location":{"end":{"column":6,"line":87},"start":{"column":34,"line":81}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"813","location":{"end":{"column":149,"line":85},"start":{"column":9,"line":83}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"814","location":{"end":{"column":15,"line":84},"start":{"column":11,"line":84}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"815","location":{"end":{"column":6,"line":89},"start":{"column":12,"line":87}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"816","location":{"end":{"column":4,"line":135},"start":{"column":40,"line":94}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"817","location":{"end":{"column":36,"line":98},"start":{"column":9,"line":98}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"818","location":{"end":{"column":36,"line":98},"start":{"column":9,"line":98}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"819","location":{"end":{"column":36,"line":98},"start":{"column":9,"line":98}},"mutatorName":"BooleanLiteral","replacement":"this.cliOptions.configFile","status":"NoCoverage"},{"id":"820","location":{"end":{"column":6,"line":107},"start":{"column":38,"line":98}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"821","location":{"end":{"column":8,"line":103},"start":{"column":11,"line":99}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"822","location":{"end":{"column":62,"line":100},"start":{"column":36,"line":100}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"823","location":{"end":{"column":87,"line":101},"start":{"column":23,"line":101}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"824","location":{"end":{"column":8,"line":106},"start":{"column":19,"line":103}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"825","location":{"end":{"column":87,"line":104},"start":{"column":23,"line":104}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"826","location":{"end":{"column":81,"line":105},"start":{"column":23,"line":105}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"827","location":{"end":{"column":35,"line":109},"start":{"column":9,"line":109}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"828","location":{"end":{"column":35,"line":109},"start":{"column":9,"line":109}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"829","location":{"end":{"column":6,"line":132},"start":{"column":37,"line":109}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"830","location":{"end":{"column":68,"line":110},"start":{"column":22,"line":110}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"831","location":{"end":{"column":8,"line":114},"start":{"column":11,"line":112}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"832","location":{"end":{"column":8,"line":122},"start":{"column":19,"line":114}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"833","location":{"end":{"column":98,"line":115},"start":{"column":13,"line":115}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"834","location":{"end":{"column":98,"line":115},"start":{"column":13,"line":115}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"835","location":{"end":{"column":45,"line":115},"start":{"column":43,"line":115}},"mutatorName":"LogicalOperator","replacement":"||","status":"NoCoverage"},{"id":"836","location":{"end":{"column":23,"line":115},"start":{"column":20,"line":115}},"mutatorName":"EqualityOperator","replacement":"!==","status":"NoCoverage"},{"id":"837","location":{"end":{"column":42,"line":115},"start":{"column":24,"line":115}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"838","location":{"end":{"column":95,"line":115},"start":{"column":92,"line":115}},"mutatorName":"EqualityOperator","replacement":"===","status":"NoCoverage"},{"id":"839","location":{"end":{"column":98,"line":115},"start":{"column":96,"line":115}},"mutatorName":"UnaryOperator","replacement":"+1","status":"NoCoverage"},{"id":"840","location":{"end":{"column":10,"line":117},"start":{"column":100,"line":115}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"841","location":{"end":{"column":74,"line":116},"start":{"column":34,"line":116}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"842","location":{"end":{"column":10,"line":121},"start":{"column":16,"line":117}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"843","location":{"end":{"column":93,"line":118},"start":{"column":25,"line":118}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"844","location":{"end":{"column":90,"line":119},"start":{"column":25,"line":119}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"845","location":{"end":{"column":55,"line":120},"start":{"column":34,"line":120}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"846","location":{"end":{"column":81,"line":123},"start":{"column":11,"line":123}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"847","location":{"end":{"column":81,"line":123},"start":{"column":11,"line":123}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"848","location":{"end":{"column":48,"line":123},"start":{"column":46,"line":123}},"mutatorName":"LogicalOperator","replacement":"||","status":"NoCoverage"},{"id":"849","location":{"end":{"column":34,"line":123},"start":{"column":31,"line":123}},"mutatorName":"EqualityOperator","replacement":"===","status":"NoCoverage"},{"id":"850","location":{"end":{"column":45,"line":123},"start":{"column":35,"line":123}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"851","location":{"end":{"column":72,"line":123},"start":{"column":69,"line":123}},"mutatorName":"EqualityOperator","replacement":"===","status":"NoCoverage"},{"id":"852","location":{"end":{"column":81,"line":123},"start":{"column":73,"line":123}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"853","location":{"end":{"column":8,"line":126},"start":{"column":83,"line":123}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"854","location":{"end":{"column":81,"line":124},"start":{"column":80,"line":124}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"855","location":{"end":{"column":79,"line":124},"start":{"column":24,"line":124}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"856","location":{"end":{"column":82,"line":125},"start":{"column":32,"line":125}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"857","location":{"end":{"column":43,"line":127},"start":{"column":11,"line":127}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"858","location":{"end":{"column":43,"line":127},"start":{"column":11,"line":127}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"859","location":{"end":{"column":34,"line":127},"start":{"column":31,"line":127}},"mutatorName":"EqualityOperator","replacement":"!==","status":"NoCoverage"},{"id":"860","location":{"end":{"column":43,"line":127},"start":{"column":35,"line":127}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"861","location":{"end":{"column":8,"line":131},"start":{"column":45,"line":127}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"862","location":{"end":{"column":10,"line":130},"start":{"column":33,"line":128}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"}],"source":"import * as fs from 'fs';\nimport * as path from 'path';\n\nimport { Config } from '@stryker-mutator/api/config';\nimport { StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { StrykerError } from '@stryker-mutator/util';\n\nimport { coreTokens } from '../di';\n\nexport const CONFIG_SYNTAX_HELP = '  module.exports = function(config) {\\n' + '    config.set({\\n' + '      // your config\\n' + '    });\\n' + '  };';\n\nconst DEFAULT_CONFIG_FILE = 'stryker.conf.js';\n\nexport default class ConfigReader {\n  public static inject = tokens(coreTokens.cliOptions, commonTokens.logger);\n  constructor(private readonly cliOptions: Partial<StrykerOptions>, private readonly log: Logger) {}\n\n  public readConfig() {\n    const configModule = this.loadConfigModule();\n    const config = new Config();\n    try {\n      configModule(config);\n    } catch (e) {\n      throw new StrykerError('Error in config file!', e);\n    }\n\n    // merge the config from config file and cliOptions (precedence)\n    config.set(this.cliOptions);\n    if (this.log.isDebugEnabled()) {\n      this.log.debug(`Loaded config: ${JSON.stringify(config, null, 2)}`);\n    }\n\n    this.fixDeprecations(config);\n\n    return config;\n  }\n  private fixDeprecations(config: Config) {\n    if (!(typeof config.mutator === 'string') && config.mutator.excludedMutations) {\n      const newExcludedMutations: string[] = [];\n      config.mutator.excludedMutations.forEach(legacyExcludedMutation =>\n        newExcludedMutations.push(...this.getNewExcludedMutations(legacyExcludedMutation))\n      );\n      config.mutator.excludedMutations = newExcludedMutations;\n    }\n  }\n  private getNewExcludedMutations(legacyExcludedMutation: string): string[] {\n    const newMutations: string[] = [];\n    switch (legacyExcludedMutation) {\n      case 'ArrayLiteral':\n      case 'ArrayNewExpression':\n        newMutations.push('ArrayDeclaration');\n        break;\n      case 'BinaryExpression':\n        newMutations.push(...['ArithmeticOperator', 'EqualityOperator', 'LogicalOperator']);\n        break;\n      case 'Block':\n        newMutations.push('BlockStatement');\n        break;\n      case 'BooleanSubstitution':\n        newMutations.push('BooleanLiteral');\n        break;\n      case 'DoStatement':\n      case 'ForStatement':\n      case 'IfStatement':\n      case 'SwitchCase':\n      case 'WhileStatement':\n        newMutations.push('ConditionalExpression');\n        break;\n      case 'PrefixUnaryExpression':\n        newMutations.push('UnaryOperator', 'UpdateOperator', 'BooleanLiteral');\n        break;\n      case 'PostfixUnaryExpression':\n        newMutations.push('UpdateOperator');\n        break;\n      default:\n        break;\n    }\n\n    if (newMutations.length > 0) {\n      this.log.warn(\n        `DEPRECATED: The mutation name \"${legacyExcludedMutation}\" is deprecated. Please migrate your config. For now ${legacyExcludedMutation} will be replaced with: ${newMutations.join(\n          ', '\n        )}. A list of mutations and their names can be found here: https://github.com/stryker-mutator/stryker-handbook/blob/master/mutator-types.md`\n      );\n    } else {\n      newMutations.push(legacyExcludedMutation);\n    }\n\n    return newMutations;\n  }\n\n  private loadConfigModule(): Function {\n    // Dummy module to be returned if no config file is loaded.\n    let configModule: Function = () => {};\n\n    if (!this.cliOptions.configFile) {\n      try {\n        fs.accessSync(path.resolve(`./${DEFAULT_CONFIG_FILE}`));\n        this.log.info(`Using ${DEFAULT_CONFIG_FILE} in the current working directory.`);\n        this.cliOptions.configFile = DEFAULT_CONFIG_FILE;\n      } catch (e) {\n        this.log.info('No config file specified. Running with command line arguments.');\n        this.log.info('Use `stryker init` command to generate your config file.');\n      }\n    }\n\n    if (this.cliOptions.configFile) {\n      this.log.debug(`Loading config ${this.cliOptions.configFile}`);\n      const configFileName = path.resolve(this.cliOptions.configFile);\n      try {\n        configModule = require(configFileName);\n      } catch (e) {\n        if (e.code === 'MODULE_NOT_FOUND' && e.message.indexOf(this.cliOptions.configFile) !== -1) {\n          throw new StrykerError(`File ${configFileName} does not exist!`, e);\n        } else {\n          this.log.info('Stryker can help you setup a `stryker.conf` file for your project.');\n          this.log.info(\"Please execute `stryker init` in your project's root directory.\");\n          throw new StrykerError('Invalid config file', e);\n        }\n      }\n      if (typeof configModule !== 'function' && typeof configModule !== 'object') {\n        this.log.fatal('Config file must be an object or export a function!\\n' + CONFIG_SYNTAX_HELP);\n        throw new StrykerError('Config file must export a function or be a JSON!');\n      }\n      if (typeof configModule === 'object') {\n        return (config: any) => {\n          config.set(configModule);\n        };\n      }\n    }\n\n    return configModule;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/config/ConfigValidator.ts":{"language":"typescript","mutants":[{"id":"863","location":{"end":{"column":25,"line":11},"start":{"column":21,"line":11}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"864","location":{"end":{"column":4,"line":39},"start":{"column":21,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"865","location":{"end":{"column":37,"line":23},"start":{"column":27,"line":23}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"866","location":{"end":{"column":41,"line":24},"start":{"column":27,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"867","location":{"end":{"column":53,"line":26},"start":{"column":27,"line":26}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"868","location":{"end":{"column":41,"line":27},"start":{"column":32,"line":27}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"869","location":{"end":{"column":43,"line":28},"start":{"column":32,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"870","location":{"end":{"column":45,"line":29},"start":{"column":32,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"871","location":{"end":{"column":40,"line":30},"start":{"column":27,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"872","location":{"end":{"column":50,"line":31},"start":{"column":39,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"873","location":{"end":{"column":61,"line":31},"start":{"column":52,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"874","location":{"end":{"column":50,"line":32},"start":{"column":39,"line":32}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"875","location":{"end":{"column":60,"line":32},"start":{"column":52,"line":32}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"876","location":{"end":{"column":50,"line":33},"start":{"column":39,"line":33}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"877","location":{"end":{"column":61,"line":33},"start":{"column":52,"line":33}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"878","location":{"end":{"column":38,"line":34},"start":{"column":27,"line":34}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"879","location":{"end":{"column":52,"line":34},"start":{"column":40,"line":34}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"880","location":{"end":{"column":42,"line":35},"start":{"column":31,"line":35}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"881","location":{"end":{"column":53,"line":35},"start":{"column":44,"line":35}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"882","location":{"end":{"column":4,"line":47},"start":{"column":35,"line":41}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"883","location":{"end":{"column":75,"line":42},"start":{"column":9,"line":42}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"884","location":{"end":{"column":75,"line":42},"start":{"column":9,"line":42}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"885","location":{"end":{"column":55,"line":42},"start":{"column":53,"line":42}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"886","location":{"end":{"column":42,"line":42},"start":{"column":39,"line":42}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"887","location":{"end":{"column":52,"line":42},"start":{"column":43,"line":42}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"888","location":{"end":{"column":75,"line":42},"start":{"column":56,"line":42}},"mutatorName":"BooleanLiteral","replacement":"this.testFramework","status":"Killed"},{"id":"889","location":{"end":{"column":6,"line":46},"start":{"column":77,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"890","location":{"end":{"column":174,"line":44},"start":{"column":9,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"891","location":{"end":{"column":4,"line":59},"start":{"column":29,"line":49}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"892","location":{"end":{"column":36,"line":51},"start":{"column":9,"line":51}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"893","location":{"end":{"column":36,"line":51},"start":{"column":9,"line":51}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"894","location":{"end":{"column":27,"line":51},"start":{"column":24,"line":51}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"895","location":{"end":{"column":36,"line":51},"start":{"column":28,"line":51}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"896","location":{"end":{"column":6,"line":56},"start":{"column":38,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"897","location":{"end":{"column":43,"line":53},"start":{"column":29,"line":53}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"898","location":{"end":{"column":69,"line":54},"start":{"column":42,"line":54}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"899","location":{"end":{"column":53,"line":55},"start":{"column":36,"line":55}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"900","location":{"end":{"column":43,"line":56},"start":{"column":16,"line":56}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"901","location":{"end":{"column":43,"line":56},"start":{"column":16,"line":56}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"902","location":{"end":{"column":34,"line":56},"start":{"column":31,"line":56}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"903","location":{"end":{"column":43,"line":56},"start":{"column":35,"line":56}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"904","location":{"end":{"column":6,"line":58},"start":{"column":45,"line":56}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"905","location":{"end":{"column":118,"line":57},"start":{"column":23,"line":57}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"906","location":{"end":{"column":4,"line":71},"start":{"column":32,"line":61}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"907","location":{"end":{"column":46,"line":63},"start":{"column":40,"line":63}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"908","location":{"end":{"column":45,"line":64},"start":{"column":40,"line":64}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"909","location":{"end":{"column":39,"line":65},"start":{"column":33,"line":65}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"910","location":{"end":{"column":38,"line":66},"start":{"column":33,"line":66}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"911","location":{"end":{"column":40,"line":67},"start":{"column":33,"line":67}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"912","location":{"end":{"column":41,"line":68},"start":{"column":9,"line":68}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"913","location":{"end":{"column":41,"line":68},"start":{"column":9,"line":68}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"914","location":{"end":{"column":26,"line":68},"start":{"column":25,"line":68}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Survived"},{"id":"915","location":{"end":{"column":26,"line":68},"start":{"column":25,"line":68}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"916","location":{"end":{"column":6,"line":70},"start":{"column":43,"line":68}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"917","location":{"end":{"column":118,"line":69},"start":{"column":23,"line":69}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"918","location":{"end":{"column":4,"line":77},"start":{"column":93,"line":73}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"919","location":{"end":{"column":80,"line":74},"start":{"column":9,"line":74}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"920","location":{"end":{"column":80,"line":74},"start":{"column":9,"line":74}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"921","location":{"end":{"column":37,"line":74},"start":{"column":35,"line":74}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"922","location":{"end":{"column":25,"line":74},"start":{"column":22,"line":74}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"923","location":{"end":{"column":34,"line":74},"start":{"column":26,"line":74}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"924","location":{"end":{"column":79,"line":74},"start":{"column":39,"line":74}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"925","location":{"end":{"column":79,"line":74},"start":{"column":39,"line":74}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"926","location":{"end":{"column":66,"line":74},"start":{"column":64,"line":74}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"927","location":{"end":{"column":63,"line":74},"start":{"column":39,"line":74}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"928","location":{"end":{"column":63,"line":74},"start":{"column":39,"line":74}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"929","location":{"end":{"column":51,"line":74},"start":{"column":49,"line":74}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"930","location":{"end":{"column":48,"line":74},"start":{"column":39,"line":74}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"931","location":{"end":{"column":48,"line":74},"start":{"column":39,"line":74}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"932","location":{"end":{"column":46,"line":74},"start":{"column":45,"line":74}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Survived"},{"id":"933","location":{"end":{"column":46,"line":74},"start":{"column":45,"line":74}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"934","location":{"end":{"column":63,"line":74},"start":{"column":52,"line":74}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"935","location":{"end":{"column":63,"line":74},"start":{"column":52,"line":74}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"936","location":{"end":{"column":59,"line":74},"start":{"column":58,"line":74}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"937","location":{"end":{"column":59,"line":74},"start":{"column":58,"line":74}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"938","location":{"end":{"column":6,"line":76},"start":{"column":82,"line":74}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"939","location":{"end":{"column":125,"line":75},"start":{"column":23,"line":75}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"940","location":{"end":{"column":4,"line":83},"start":{"column":90,"line":79}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"941","location":{"end":{"column":34,"line":80},"start":{"column":9,"line":80}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"942","location":{"end":{"column":34,"line":80},"start":{"column":9,"line":80}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"943","location":{"end":{"column":25,"line":80},"start":{"column":22,"line":80}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"944","location":{"end":{"column":34,"line":80},"start":{"column":26,"line":80}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"945","location":{"end":{"column":6,"line":82},"start":{"column":36,"line":80}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"946","location":{"end":{"column":125,"line":81},"start":{"column":23,"line":81}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"947","location":{"end":{"column":4,"line":101},"start":{"column":70,"line":85}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"948","location":{"end":{"column":6,"line":95},"start":{"column":36,"line":87}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"CompileError"},{"id":"949","location":{"end":{"column":51,"line":96},"start":{"column":9,"line":96}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"950","location":{"end":{"column":51,"line":96},"start":{"column":9,"line":96}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"951","location":{"end":{"column":51,"line":96},"start":{"column":9,"line":96}},"mutatorName":"BooleanLiteral","replacement":"VALID_LOG_LEVEL_VALUES.includes(logLevel)","status":"Killed"},{"id":"952","location":{"end":{"column":6,"line":100},"start":{"column":53,"line":96}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"953","location":{"end":{"column":143,"line":98},"start":{"column":9,"line":98}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"954","location":{"end":{"column":4,"line":106},"start":{"column":29,"line":103}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"955","location":{"end":{"column":38,"line":104},"start":{"column":27,"line":104}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"956","location":{"end":{"column":42,"line":105},"start":{"column":27,"line":105}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"957","location":{"end":{"column":4,"line":118},"start":{"column":38,"line":108}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"958","location":{"end":{"column":69,"line":109},"start":{"column":44,"line":109}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"CompileError"},{"id":"959","location":{"end":{"column":54,"line":109},"start":{"column":45,"line":109}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"960","location":{"end":{"column":61,"line":109},"start":{"column":56,"line":109}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"961","location":{"end":{"column":68,"line":109},"start":{"column":63,"line":109}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"962","location":{"end":{"column":67,"line":111},"start":{"column":9,"line":111}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"963","location":{"end":{"column":67,"line":111},"start":{"column":9,"line":111}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"964","location":{"end":{"column":67,"line":111},"start":{"column":9,"line":111}},"mutatorName":"BooleanLiteral","replacement":"VALID_COVERAGE_ANALYSIS_VALUES.includes(coverageAnalysis)","status":"Killed"},{"id":"965","location":{"end":{"column":6,"line":117},"start":{"column":69,"line":111}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"966","location":{"end":{"column":12,"line":115},"start":{"column":9,"line":113}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"967","location":{"end":{"column":4,"line":130},"start":{"column":62,"line":120}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"968","location":{"end":{"column":130,"line":121},"start":{"column":9,"line":121}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"969","location":{"end":{"column":130,"line":121},"start":{"column":9,"line":121}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"970","location":{"end":{"column":90,"line":121},"start":{"column":88,"line":121}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"971","location":{"end":{"column":51,"line":121},"start":{"column":49,"line":121}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"972","location":{"end":{"column":87,"line":121},"start":{"column":52,"line":121}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"973","location":{"end":{"column":87,"line":121},"start":{"column":52,"line":121}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"974","location":{"end":{"column":85,"line":121},"start":{"column":84,"line":121}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"975","location":{"end":{"column":85,"line":121},"start":{"column":84,"line":121}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"976","location":{"end":{"column":124,"line":121},"start":{"column":121,"line":121}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"977","location":{"end":{"column":130,"line":121},"start":{"column":125,"line":121}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"978","location":{"end":{"column":6,"line":129},"start":{"column":132,"line":121}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"979","location":{"end":{"column":97,"line":127},"start":{"column":9,"line":123}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"980","location":{"end":{"column":15,"line":126},"start":{"column":11,"line":126}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"981","location":{"end":{"column":4,"line":136},"start":{"column":27,"line":132}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"982","location":{"end":{"column":22,"line":133},"start":{"column":9,"line":133}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"983","location":{"end":{"column":22,"line":133},"start":{"column":9,"line":133}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"984","location":{"end":{"column":22,"line":133},"start":{"column":9,"line":133}},"mutatorName":"BooleanLiteral","replacement":"this.isValid","status":"Killed"},{"id":"985","location":{"end":{"column":6,"line":135},"start":{"column":24,"line":133}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"986","location":{"end":{"column":120,"line":134},"start":{"column":30,"line":134}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"987","location":{"end":{"column":4,"line":142},"start":{"column":65,"line":138}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"988","location":{"end":{"column":50,"line":139},"start":{"column":9,"line":139}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"989","location":{"end":{"column":50,"line":139},"start":{"column":9,"line":139}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"990","location":{"end":{"column":37,"line":139},"start":{"column":35,"line":139}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"991","location":{"end":{"column":25,"line":139},"start":{"column":22,"line":139}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"992","location":{"end":{"column":34,"line":139},"start":{"column":26,"line":139}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"993","location":{"end":{"column":6,"line":141},"start":{"column":52,"line":139}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"994","location":{"end":{"column":101,"line":140},"start":{"column":23,"line":140}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"995","location":{"end":{"column":4,"line":148},"start":{"column":65,"line":144}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"996","location":{"end":{"column":34,"line":145},"start":{"column":9,"line":145}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"997","location":{"end":{"column":34,"line":145},"start":{"column":9,"line":145}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"998","location":{"end":{"column":25,"line":145},"start":{"column":22,"line":145}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"999","location":{"end":{"column":34,"line":145},"start":{"column":26,"line":145}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1000","location":{"end":{"column":6,"line":147},"start":{"column":36,"line":145}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1001","location":{"end":{"column":101,"line":146},"start":{"column":23,"line":146}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1002","location":{"end":{"column":4,"line":155},"start":{"column":119,"line":150}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1003","location":{"end":{"column":34,"line":152},"start":{"column":9,"line":152}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1004","location":{"end":{"column":34,"line":152},"start":{"column":9,"line":152}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1005","location":{"end":{"column":25,"line":152},"start":{"column":22,"line":152}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"1006","location":{"end":{"column":34,"line":152},"start":{"column":26,"line":152}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1007","location":{"end":{"column":6,"line":154},"start":{"column":36,"line":152}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1008","location":{"end":{"column":120,"line":153},"start":{"column":23,"line":153}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1009","location":{"end":{"column":4,"line":170},"start":{"column":5,"line":161}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1010","location":{"end":{"column":37,"line":163},"start":{"column":9,"line":163}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1011","location":{"end":{"column":37,"line":163},"start":{"column":9,"line":163}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1012","location":{"end":{"column":37,"line":163},"start":{"column":9,"line":163}},"mutatorName":"BooleanLiteral","replacement":"validValues.includes(value)","status":"Killed"},{"id":"1013","location":{"end":{"column":6,"line":169},"start":{"column":39,"line":163}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1014","location":{"end":{"column":24,"line":167},"start":{"column":9,"line":165}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1015","location":{"end":{"column":21,"line":167},"start":{"column":17,"line":167}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1016","location":{"end":{"column":4,"line":178},"start":{"column":127,"line":172}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1017","location":{"end":{"column":57,"line":174},"start":{"column":9,"line":174}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1018","location":{"end":{"column":57,"line":174},"start":{"column":9,"line":174}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1019","location":{"end":{"column":37,"line":174},"start":{"column":35,"line":174}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"1020","location":{"end":{"column":25,"line":174},"start":{"column":22,"line":174}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"1021","location":{"end":{"column":34,"line":174},"start":{"column":26,"line":174}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1022","location":{"end":{"column":47,"line":174},"start":{"column":44,"line":174}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"1023","location":{"end":{"column":6,"line":177},"start":{"column":59,"line":174}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1024","location":{"end":{"column":4,"line":190},"start":{"column":70,"line":180}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1025","location":{"end":{"column":30,"line":181},"start":{"column":9,"line":181}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1026","location":{"end":{"column":30,"line":181},"start":{"column":9,"line":181}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1027","location":{"end":{"column":30,"line":181},"start":{"column":9,"line":181}},"mutatorName":"BooleanLiteral","replacement":"Array.isArray(value)","status":"CompileError"},{"id":"1028","location":{"end":{"column":6,"line":183},"start":{"column":32,"line":181}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1029","location":{"end":{"column":101,"line":182},"start":{"column":23,"line":182}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1030","location":{"end":{"column":6,"line":189},"start":{"column":12,"line":183}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1031","location":{"end":{"column":8,"line":188},"start":{"column":26,"line":184}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1032","location":{"end":{"column":34,"line":185},"start":{"column":13,"line":185}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1033","location":{"end":{"column":34,"line":185},"start":{"column":13,"line":185}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1034","location":{"end":{"column":25,"line":185},"start":{"column":22,"line":185}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"1035","location":{"end":{"column":34,"line":185},"start":{"column":26,"line":185}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1036","location":{"end":{"column":10,"line":187},"start":{"column":36,"line":185}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1037","location":{"end":{"column":111,"line":186},"start":{"column":27,"line":186}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1038","location":{"end":{"column":4,"line":196},"start":{"column":70,"line":192}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1039","location":{"end":{"column":30,"line":193},"start":{"column":9,"line":193}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1040","location":{"end":{"column":30,"line":193},"start":{"column":9,"line":193}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1041","location":{"end":{"column":30,"line":193},"start":{"column":9,"line":193}},"mutatorName":"BooleanLiteral","replacement":"Array.isArray(value)","status":"Killed"},{"id":"1042","location":{"end":{"column":6,"line":195},"start":{"column":32,"line":193}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1043","location":{"end":{"column":92,"line":194},"start":{"column":23,"line":194}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1044","location":{"end":{"column":4,"line":200},"start":{"column":95,"line":198}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1045","location":{"end":{"column":72,"line":199},"start":{"column":5,"line":199}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1046","location":{"end":{"column":72,"line":199},"start":{"column":5,"line":199}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1047","location":{"end":{"column":27,"line":199},"start":{"column":25,"line":199}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"1048","location":{"end":{"column":24,"line":199},"start":{"column":5,"line":199}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1049","location":{"end":{"column":24,"line":199},"start":{"column":5,"line":199}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1050","location":{"end":{"column":14,"line":199},"start":{"column":11,"line":199}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1051","location":{"end":{"column":4,"line":204},"start":{"column":97,"line":202}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1052","location":{"end":{"column":84,"line":203},"start":{"column":5,"line":203}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1053","location":{"end":{"column":84,"line":203},"start":{"column":5,"line":203}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1054","location":{"end":{"column":45,"line":203},"start":{"column":43,"line":203}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"1055","location":{"end":{"column":42,"line":203},"start":{"column":5,"line":203}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1056","location":{"end":{"column":42,"line":203},"start":{"column":5,"line":203}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1057","location":{"end":{"column":27,"line":203},"start":{"column":25,"line":203}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"1058","location":{"end":{"column":24,"line":203},"start":{"column":5,"line":203}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1059","location":{"end":{"column":24,"line":203},"start":{"column":5,"line":203}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1060","location":{"end":{"column":14,"line":203},"start":{"column":11,"line":203}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"1061","location":{"end":{"column":42,"line":203},"start":{"column":28,"line":203}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1062","location":{"end":{"column":42,"line":203},"start":{"column":28,"line":203}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1063","location":{"end":{"column":37,"line":203},"start":{"column":34,"line":203}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"1064","location":{"end":{"column":4,"line":209},"start":{"column":39,"line":206}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1065","location":{"end":{"column":25,"line":208},"start":{"column":20,"line":208}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"1066","location":{"end":{"column":4,"line":213},"start":{"column":41,"line":211}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1067","location":{"end":{"column":33,"line":212},"start":{"column":20,"line":212}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1068","location":{"end":{"column":33,"line":212},"start":{"column":25,"line":212}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1069","location":{"end":{"column":44,"line":212},"start":{"column":40,"line":212}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1070","location":{"end":{"column":2,"line":222},"start":{"column":44,"line":216}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1071","location":{"end":{"column":48,"line":217},"start":{"column":7,"line":217}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1072","location":{"end":{"column":48,"line":217},"start":{"column":7,"line":217}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1073","location":{"end":{"column":35,"line":217},"start":{"column":33,"line":217}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"1074","location":{"end":{"column":23,"line":217},"start":{"column":20,"line":217}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"1075","location":{"end":{"column":32,"line":217},"start":{"column":24,"line":217}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1076","location":{"end":{"column":4,"line":219},"start":{"column":50,"line":217}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1077","location":{"end":{"column":17,"line":218},"start":{"column":12,"line":218}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1078","location":{"end":{"column":4,"line":221},"start":{"column":10,"line":219}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import { Config } from '@stryker-mutator/api/config';\nimport { LogLevel, MutationScoreThresholds, StrykerOptions, ALL_REPORT_TYPES } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { TestFramework } from '@stryker-mutator/api/test_framework';\nimport { StrykerError } from '@stryker-mutator/util';\n\nimport { coreTokens } from '../di';\n\nexport default class ConfigValidator {\n  private isValid = true;\n  public static inject = tokens(commonTokens.logger, commonTokens.options, coreTokens.testFramework);\n  constructor(\n    private readonly log: Logger,\n    private readonly options: Readonly<StrykerOptions>,\n    private readonly testFramework: TestFramework | null\n  ) {}\n\n  public validate() {\n    this.validateTestFramework();\n    this.validateThresholds();\n    this.validateMutator();\n    this.validateLogLevel('logLevel');\n    this.validateLogLevel('fileLogLevel');\n    this.validateTimeout();\n    this.validateIsNumber('maxConcurrentTestRunners', this.options.maxConcurrentTestRunners);\n    this.validateIsStringArray('plugins', this.options.plugins);\n    this.validateIsStringArray('reporters', this.options.reporters);\n    this.validateIsStringArray('transpilers', this.options.transpilers);\n    this.validateIsString('tempDirName', this.options.tempDirName);\n    this.validateIsOptionalDeepString('dashboard', 'project');\n    this.validateIsOptionalDeepString('dashboard', 'module');\n    this.validateIsOptionalDeepString('dashboard', 'version');\n    this.validateDeepEnum('dashboard', 'reportType', ALL_REPORT_TYPES);\n    this.validateIsDeepString('dashboard', 'baseUrl');\n    this.validateCoverageAnalysis();\n    this.validateCoverageAnalysisWithRespectToTranspilers();\n    this.crashIfNeeded();\n  }\n\n  private validateTestFramework() {\n    if (this.options.coverageAnalysis === 'perTest' && !this.testFramework) {\n      this.invalidate(\n        'Configured coverage analysis \"perTest\" requires there to be a testFramework configured. Either configure a testFramework or set coverageAnalysis to \"all\" or \"off\".'\n      );\n    }\n  }\n\n  private validateMutator() {\n    const mutator = this.options.mutator;\n    if (typeof mutator === 'object') {\n      const mutatorDescriptor = mutator;\n      this.validateIsString('mutator.name', mutatorDescriptor.name);\n      this.validateIsOptionalStringArray('mutator.excludedMutations', mutatorDescriptor.excludedMutations);\n      this.validateIsOptionalArray('mutator.plugins', mutatorDescriptor.plugins);\n    } else if (typeof mutator !== 'string') {\n      this.invalidate(`Value ${stringify(mutator)} is invalid for \\`mutator\\`. Expected either a string or an object`);\n    }\n  }\n\n  private validateThresholds() {\n    const thresholds = this.options.thresholds;\n    this.validateThresholdsValueExists('high', thresholds.high);\n    this.validateThresholdsValueExists('low', thresholds.low);\n    this.validateThresholdValue('high', thresholds.high);\n    this.validateThresholdValue('low', thresholds.low);\n    this.validateThresholdValue('break', thresholds.break);\n    if (thresholds.high < thresholds.low) {\n      this.invalidate(`\\`thresholds.high\\` is lower than \\`thresholds.low\\` (${thresholds.high} < ${thresholds.low})`);\n    }\n  }\n\n  private validateThresholdValue(name: keyof MutationScoreThresholds, value: number | null) {\n    if (typeof value === 'number' && (value < 0 || value > 100 || isNaN(value))) {\n      this.invalidate(`Value ${stringify(value)} is invalid for \\`thresholds.${name}\\`. Expected a number between 0 and 100`);\n    }\n  }\n\n  private validateThresholdsValueExists(name: keyof MutationScoreThresholds, value: any) {\n    if (typeof value !== 'number') {\n      this.invalidate(`Value ${stringify(value)} is invalid for \\`thresholds.${name}\\`. Expected a number between 0 and 100`);\n    }\n  }\n\n  private validateLogLevel(logProperty: 'logLevel' | 'fileLogLevel') {\n    const logLevel = this.options[logProperty];\n    const VALID_LOG_LEVEL_VALUES = [\n      LogLevel.Fatal,\n      LogLevel.Error,\n      LogLevel.Warning,\n      LogLevel.Information,\n      LogLevel.Debug,\n      LogLevel.Trace,\n      LogLevel.Off\n    ];\n    if (!VALID_LOG_LEVEL_VALUES.includes(logLevel)) {\n      this.invalidate(\n        `Value \"${logLevel}\" is invalid for \\`${logProperty}\\`. Expected one of the following: ${this.joinQuotedList(VALID_LOG_LEVEL_VALUES)}`\n      );\n    }\n  }\n\n  private validateTimeout() {\n    this.validateIsNumber('timeoutMS', this.options.timeoutMS);\n    this.validateIsNumber('timeoutFactor', this.options.timeoutFactor);\n  }\n\n  private validateCoverageAnalysis() {\n    const VALID_COVERAGE_ANALYSIS_VALUES = ['perTest', 'all', 'off'];\n    const coverageAnalysis = this.options.coverageAnalysis;\n    if (!VALID_COVERAGE_ANALYSIS_VALUES.includes(coverageAnalysis)) {\n      this.invalidate(\n        `Value ${stringify(coverageAnalysis)} is invalid for \\`coverageAnalysis\\`. Expected one of the following: ${this.joinQuotedList(\n          VALID_COVERAGE_ANALYSIS_VALUES\n        )}`\n      );\n    }\n  }\n\n  private validateCoverageAnalysisWithRespectToTranspilers() {\n    if (Array.isArray(this.options.transpilers) && this.options.transpilers.length > 1 && this.options.coverageAnalysis !== 'off') {\n      this.invalidate(\n        `Value \"${\n          this.options.coverageAnalysis\n        }\" for \\`coverageAnalysis\\` is invalid with multiple transpilers (configured transpilers: ${this.options.transpilers.join(\n          ', '\n        )}). Please report this to the Stryker team if you whish this feature to be implemented`\n      );\n    }\n  }\n\n  private crashIfNeeded() {\n    if (!this.isValid) {\n      throw new StrykerError('Stryker could not recover from this configuration error, see fatal log message(s) above.');\n    }\n  }\n\n  private validateIsNumber(fieldName: keyof Config, value: any) {\n    if (typeof value !== 'number' || isNaN(value)) {\n      this.invalidate(`Value ${stringify(value)} is invalid for \\`${fieldName}\\`. Expected a number`);\n    }\n  }\n\n  private validateIsString(fieldName: keyof Config, value: any) {\n    if (typeof value !== 'string') {\n      this.invalidate(`Value ${stringify(value)} is invalid for \\`${fieldName}\\`. Expected a string`);\n    }\n  }\n\n  private validateIsDeepString<T extends keyof Config, T2 extends keyof Config[T]>(fieldName: T, secondFieldName: T2) {\n    const value = this.options[fieldName][secondFieldName];\n    if (typeof value !== 'string') {\n      this.invalidate(`Value ${stringify(value)} is invalid for \\`${fieldName}.${secondFieldName}\\`. Expected a string`);\n    }\n  }\n\n  private validateDeepEnum<T extends keyof Config, T2 extends keyof Config[T]>(\n    fieldName: T,\n    secondFieldName: T2,\n    validValues: Config[T][T2] extends infer TValue ? readonly TValue[] : never\n  ) {\n    const value = this.options[fieldName][secondFieldName];\n    if (!validValues.includes(value)) {\n      this.invalidate(\n        `Value ${stringify(value)} is invalid for \\`${fieldName}.${secondFieldName}\\`. Expected one of the following: ${validValues\n          .map(stringify)\n          .join(', ')}`\n      );\n    }\n  }\n\n  private validateIsOptionalDeepString<T extends keyof Config, T2 extends keyof Config[T]>(fieldName: T, secondFieldName: T2) {\n    const value = this.options[fieldName][secondFieldName];\n    if (typeof value !== 'string' && value !== undefined) {\n      // Let my sibling handle the error formatting\n      this.validateIsDeepString(fieldName, secondFieldName);\n    }\n  }\n\n  private validateIsStringArray(fieldName: keyof Config, value: any) {\n    if (!Array.isArray(value)) {\n      this.invalidate(`Value ${stringify(value)} is invalid for \\`${fieldName}\\`. Expected an array`);\n    } else {\n      value.forEach(v => {\n        if (typeof v !== 'string') {\n          this.invalidate(`Value ${stringify(v)} is an invalid element of \\`${fieldName}\\`. Expected a string`);\n        }\n      });\n    }\n  }\n\n  private validateIsArray(fieldName: keyof Config, value: unknown[]) {\n    if (!Array.isArray(value)) {\n      this.invalidate(`Value \"${value}\" is invalid for \\`${fieldName}\\`. Expected an array`);\n    }\n  }\n\n  private validateIsOptionalStringArray(fieldName: keyof Config, value: string[] | undefined) {\n    value === undefined || this.validateIsStringArray(fieldName, value);\n  }\n\n  private validateIsOptionalArray(fieldName: keyof Config, value: unknown[] | undefined | null) {\n    value === undefined || value === null || this.validateIsArray(fieldName, value);\n  }\n\n  private invalidate(message: string) {\n    this.log.fatal(message);\n    this.isValid = false;\n  }\n\n  private joinQuotedList(arr: string[]) {\n    return arr.map(v => `\"${v}\"`).join(', ');\n  }\n}\n\nfunction stringify(value: unknown): string {\n  if (typeof value === 'number' && isNaN(value)) {\n    return 'NaN';\n  } else {\n    return JSON.stringify(value);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/config/readConfig.ts":{"language":"typescript","mutants":[{"id":"1079","location":{"end":{"column":2,"line":9},"start":{"column":56,"line":7}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import { tokens } from '@stryker-mutator/api/plugin';\n\nimport { coreTokens } from '../di';\n\nimport ConfigReader from './ConfigReader';\n\nexport function readConfig(configReader: ConfigReader) {\n  return configReader.readConfig();\n}\n\nreadConfig.inject = tokens(coreTokens.configReader);\n"},"/home/runner/work/stryker/stryker/packages/core/src/di/PluginCreator.ts":{"language":"typescript","mutants":[{"id":"1080","location":{"end":{"column":4,"line":30},"start":{"column":62,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1081","location":{"end":{"column":37,"line":23},"start":{"column":9,"line":23}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1082","location":{"end":{"column":37,"line":23},"start":{"column":9,"line":23}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1083","location":{"end":{"column":6,"line":25},"start":{"column":39,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1084","location":{"end":{"column":42,"line":25},"start":{"column":16,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1085","location":{"end":{"column":42,"line":25},"start":{"column":16,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1086","location":{"end":{"column":6,"line":27},"start":{"column":44,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1087","location":{"end":{"column":6,"line":29},"start":{"column":12,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1088","location":{"end":{"column":125,"line":28},"start":{"column":23,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1089","location":{"end":{"column":4,"line":34},"start":{"column":145,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1090","location":{"end":{"column":112,"line":33},"start":{"column":12,"line":33}},"mutatorName":"BooleanLiteral","replacement":"!(plugin as FactoryPlugin<TPluginKind, Array<InjectionToken<PluginContexts[TPluginKind]>>>).factory","status":"Killed"},{"id":"1091","location":{"end":{"column":112,"line":33},"start":{"column":13,"line":33}},"mutatorName":"BooleanLiteral","replacement":"(plugin as FactoryPlugin<TPluginKind, Array<InjectionToken<PluginContexts[TPluginKind]>>>).factory","status":"Killed"},{"id":"1092","location":{"end":{"column":4,"line":37},"start":{"column":141,"line":35}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1093","location":{"end":{"column":118,"line":36},"start":{"column":12,"line":36}},"mutatorName":"BooleanLiteral","replacement":"!(plugin as ClassPlugin<TPluginKind, Array<InjectionToken<PluginContexts[TPluginKind]>>>).injectableClass","status":"Killed"},{"id":"1094","location":{"end":{"column":118,"line":36},"start":{"column":13,"line":36}},"mutatorName":"BooleanLiteral","replacement":"(plugin as ClassPlugin<TPluginKind, Array<InjectionToken<PluginContexts[TPluginKind]>>>).injectableClass","status":"Killed"},{"id":"1095","location":{"end":{"column":4,"line":47},"start":{"column":141,"line":41}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1096","location":{"end":{"column":6,"line":44},"start":{"column":112,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import {\n  ClassPlugin,\n  commonTokens,\n  FactoryPlugin,\n  Plugin,\n  PluginContexts,\n  PluginInterfaces,\n  PluginKind,\n  PluginResolver,\n  tokens\n} from '@stryker-mutator/api/plugin';\nimport { InjectableFunctionWithInject, InjectionToken, Injector } from 'typed-inject';\n\nexport class PluginCreator<TPluginKind extends PluginKind> {\n  private constructor(\n    private readonly kind: TPluginKind,\n    private readonly pluginResolver: PluginResolver,\n    private readonly injector: Injector<PluginContexts[TPluginKind]>\n  ) {}\n\n  public create(name: string): PluginInterfaces[TPluginKind] {\n    const plugin = this.pluginResolver.resolve(this.kind, name);\n    if (this.isFactoryPlugin(plugin)) {\n      return this.injector.injectFunction(plugin.factory);\n    } else if (this.isClassPlugin(plugin)) {\n      return this.injector.injectClass(plugin.injectableClass);\n    } else {\n      throw new Error(`Plugin \"${this.kind}:${name}\" could not be created, missing \"factory\" or \"injectableClass\" property.`);\n    }\n  }\n\n  private isFactoryPlugin(plugin: Plugin<PluginKind>): plugin is FactoryPlugin<TPluginKind, Array<InjectionToken<PluginContexts[TPluginKind]>>> {\n    return !!(plugin as FactoryPlugin<TPluginKind, Array<InjectionToken<PluginContexts[TPluginKind]>>>).factory;\n  }\n  private isClassPlugin(plugin: Plugin<PluginKind>): plugin is ClassPlugin<TPluginKind, Array<InjectionToken<PluginContexts[TPluginKind]>>> {\n    return !!(plugin as ClassPlugin<TPluginKind, Array<InjectionToken<PluginContexts[TPluginKind]>>>).injectableClass;\n  }\n\n  public static createFactory<TPluginKind extends PluginKind, TContext extends PluginContexts[TPluginKind]>(\n    kind: TPluginKind\n  ): InjectableFunctionWithInject<TContext, PluginCreator<TPluginKind>, [typeof commonTokens.pluginResolver, typeof commonTokens.injector]> {\n    function factory(pluginResolver: PluginResolver, injector: Injector<TContext>): PluginCreator<TPluginKind> {\n      return new PluginCreator(kind, pluginResolver, injector);\n    }\n    factory.inject = tokens(commonTokens.pluginResolver, commonTokens.injector);\n    return factory;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/di/PluginLoader.ts":{"language":"typescript","mutants":[{"id":"1097","location":{"end":{"column":49,"line":12},"start":{"column":26,"line":12}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"CompileError"},{"id":"1098","location":{"end":{"column":33,"line":12},"start":{"column":27,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1099","location":{"end":{"column":40,"line":12},"start":{"column":35,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1100","location":{"end":{"column":48,"line":12},"start":{"column":42,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1101","location":{"end":{"column":4,"line":28},"start":{"column":17,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1102","location":{"end":{"column":6,"line":27},"start":{"column":55,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1103","location":{"end":{"column":4,"line":44},"start":{"column":78,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1104","location":{"end":{"column":16,"line":32},"start":{"column":9,"line":32}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1105","location":{"end":{"column":16,"line":32},"start":{"column":9,"line":32}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1106","location":{"end":{"column":6,"line":41},"start":{"column":18,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1107","location":{"end":{"column":93,"line":33},"start":{"column":35,"line":33}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage"},{"id":"1108","location":{"end":{"column":93,"line":33},"start":{"column":45,"line":33}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"1109","location":{"end":{"column":93,"line":33},"start":{"column":45,"line":33}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"1110","location":{"end":{"column":74,"line":33},"start":{"column":71,"line":33}},"mutatorName":"EqualityOperator","replacement":"!==","status":"NoCoverage"},{"id":"1111","location":{"end":{"column":17,"line":34},"start":{"column":11,"line":34}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1112","location":{"end":{"column":17,"line":34},"start":{"column":11,"line":34}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"1113","location":{"end":{"column":8,"line":36},"start":{"column":19,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1114","location":{"end":{"column":8,"line":40},"start":{"column":14,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1115","location":{"end":{"column":148,"line":38},"start":{"column":11,"line":38}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1116","location":{"end":{"column":134,"line":38},"start":{"column":123,"line":38}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage"},{"id":"1117","location":{"end":{"column":145,"line":38},"start":{"column":141,"line":38}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1118","location":{"end":{"column":6,"line":43},"start":{"column":12,"line":41}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1119","location":{"end":{"column":133,"line":42},"start":{"column":23,"line":42}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1120","location":{"end":{"column":4,"line":49},"start":{"column":74,"line":46}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1121","location":{"end":{"column":34,"line":48},"start":{"column":12,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1122","location":{"end":{"column":34,"line":48},"start":{"column":12,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1123","location":{"end":{"column":22,"line":48},"start":{"column":20,"line":48}},"mutatorName":"LogicalOperator","replacement":"&&","status":"NoCoverage"},{"id":"1124","location":{"end":{"column":26,"line":48},"start":{"column":24,"line":48}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"NoCoverage"},{"id":"1125","location":{"end":{"column":4,"line":84},"start":{"column":34,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1126","location":{"end":{"column":33,"line":52},"start":{"column":31,"line":52}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"1127","location":{"end":{"column":6,"line":81},"start":{"column":56,"line":53}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1128","location":{"end":{"column":47,"line":54},"start":{"column":11,"line":54}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1129","location":{"end":{"column":47,"line":54},"start":{"column":11,"line":54}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1130","location":{"end":{"column":38,"line":54},"start":{"column":35,"line":54}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"1131","location":{"end":{"column":47,"line":54},"start":{"column":39,"line":54}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1132","location":{"end":{"column":8,"line":78},"start":{"column":49,"line":54}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1133","location":{"end":{"column":43,"line":55},"start":{"column":13,"line":55}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1134","location":{"end":{"column":43,"line":55},"start":{"column":13,"line":55}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1135","location":{"end":{"column":42,"line":55},"start":{"column":39,"line":55}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1136","location":{"end":{"column":10,"line":75},"start":{"column":45,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1137","location":{"end":{"column":76,"line":58},"start":{"column":72,"line":58}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1138","location":{"end":{"column":82,"line":58},"start":{"column":78,"line":58}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1139","location":{"end":{"column":88,"line":58},"start":{"column":84,"line":58}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1140","location":{"end":{"column":94,"line":58},"start":{"column":90,"line":58}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1141","location":{"end":{"column":42,"line":59},"start":{"column":41,"line":59}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"1142","location":{"end":{"column":40,"line":59},"start":{"column":37,"line":59}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1143","location":{"end":{"column":86,"line":59},"start":{"column":83,"line":59}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1144","location":{"end":{"column":92,"line":59},"start":{"column":88,"line":59}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1145","location":{"end":{"column":46,"line":61},"start":{"column":26,"line":61}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1146","location":{"end":{"column":100,"line":64},"start":{"column":21,"line":64}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1147","location":{"end":{"column":100,"line":64},"start":{"column":35,"line":64}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1148","location":{"end":{"column":100,"line":64},"start":{"column":35,"line":64}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1149","location":{"end":{"column":76,"line":64},"start":{"column":74,"line":64}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"1150","location":{"end":{"column":73,"line":64},"start":{"column":35,"line":64}},"mutatorName":"BooleanLiteral","replacement":"IGNORED_PACKAGES.includes(pluginName)","status":"Killed"},{"id":"1151","location":{"end":{"column":73,"line":65},"start":{"column":18,"line":65}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1152","location":{"end":{"column":35,"line":66},"start":{"column":15,"line":66}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1153","location":{"end":{"column":35,"line":66},"start":{"column":15,"line":66}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1154","location":{"end":{"column":33,"line":66},"start":{"column":30,"line":66}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Survived"},{"id":"1155","location":{"end":{"column":12,"line":68},"start":{"column":37,"line":66}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1156","location":{"end":{"column":75,"line":67},"start":{"column":28,"line":67}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1157","location":{"end":{"column":14,"line":73},"start":{"column":28,"line":70}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1158","location":{"end":{"column":80,"line":71},"start":{"column":30,"line":71}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1159","location":{"end":{"column":42,"line":74},"start":{"column":22,"line":74}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1160","location":{"end":{"column":10,"line":77},"start":{"column":16,"line":75}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1161","location":{"end":{"column":8,"line":80},"start":{"column":14,"line":78}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1162","location":{"end":{"column":69,"line":79},"start":{"column":23,"line":79}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1163","location":{"end":{"column":4,"line":100},"start":{"column":39,"line":86}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1164","location":{"end":{"column":45,"line":87},"start":{"column":20,"line":87}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1165","location":{"end":{"column":6,"line":93},"start":{"column":9,"line":88}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1166","location":{"end":{"column":38,"line":90},"start":{"column":11,"line":90}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1167","location":{"end":{"column":38,"line":90},"start":{"column":11,"line":90}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1168","location":{"end":{"column":8,"line":92},"start":{"column":40,"line":90}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1169","location":{"end":{"column":72,"line":91},"start":{"column":39,"line":91}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage"},{"id":"1170","location":{"end":{"column":6,"line":99},"start":{"column":17,"line":93}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1171","location":{"end":{"column":74,"line":94},"start":{"column":11,"line":94}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1172","location":{"end":{"column":74,"line":94},"start":{"column":11,"line":94}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1173","location":{"end":{"column":43,"line":94},"start":{"column":41,"line":94}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"1174","location":{"end":{"column":21,"line":94},"start":{"column":18,"line":94}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1175","location":{"end":{"column":40,"line":94},"start":{"column":22,"line":94}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1176","location":{"end":{"column":71,"line":94},"start":{"column":68,"line":94}},"mutatorName":"EqualityOperator","replacement":"===","status":"Survived"},{"id":"1177","location":{"end":{"column":74,"line":94},"start":{"column":72,"line":94}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Killed"},{"id":"1178","location":{"end":{"column":8,"line":96},"start":{"column":76,"line":94}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1179","location":{"end":{"column":87,"line":95},"start":{"column":86,"line":95}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"1180","location":{"end":{"column":85,"line":95},"start":{"column":23,"line":95}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1181","location":{"end":{"column":117,"line":95},"start":{"column":88,"line":95}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1182","location":{"end":{"column":8,"line":98},"start":{"column":14,"line":96}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1183","location":{"end":{"column":64,"line":97},"start":{"column":23,"line":97}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1184","location":{"end":{"column":4,"line":109},"start":{"column":43,"line":102}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"1185","location":{"end":{"column":17,"line":104},"start":{"column":9,"line":104}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"1186","location":{"end":{"column":17,"line":104},"start":{"column":9,"line":104}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1187","location":{"end":{"column":17,"line":104},"start":{"column":9,"line":104}},"mutatorName":"BooleanLiteral","replacement":"plugins","status":"CompileError"},{"id":"1188","location":{"end":{"column":6,"line":107},"start":{"column":19,"line":104}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1189","location":{"end":{"column":19,"line":105},"start":{"column":17,"line":105}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"1190","location":{"end":{"column":4,"line":114},"start":{"column":67,"line":111}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1191","location":{"end":{"column":101,"line":113},"start":{"column":12,"line":113}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1192","location":{"end":{"column":101,"line":113},"start":{"column":12,"line":113}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1193","location":{"end":{"column":58,"line":113},"start":{"column":56,"line":113}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"1194","location":{"end":{"column":55,"line":113},"start":{"column":12,"line":113}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1195","location":{"end":{"column":55,"line":113},"start":{"column":12,"line":113}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1196","location":{"end":{"column":27,"line":113},"start":{"column":25,"line":113}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"}],"source":"import * as path from 'path';\n\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, Plugin, PluginKind, PluginResolver, Plugins } from '@stryker-mutator/api/plugin';\nimport { fsAsPromised } from '@stryker-mutator/util';\nimport { tokens } from 'typed-inject';\n\nimport { importModule } from '../utils/fileUtils';\n\nimport * as coreTokens from './coreTokens';\n\nconst IGNORED_PACKAGES = ['core', 'api', 'util'];\n\ninterface PluginModule {\n  strykerPlugins: Array<Plugin<any>>;\n}\n\nexport class PluginLoader implements PluginResolver {\n  private readonly pluginsByKind: Map<PluginKind, Array<Plugin<any>>> = new Map();\n\n  public static inject = tokens(commonTokens.logger, coreTokens.pluginDescriptors);\n  constructor(private readonly log: Logger, private readonly pluginDescriptors: readonly string[]) {}\n\n  public load() {\n    this.resolvePluginModules().forEach(moduleName => {\n      this.requirePlugin(moduleName);\n    });\n  }\n\n  public resolve<T extends keyof Plugins>(kind: T, name: string): Plugins[T] {\n    const plugins = this.pluginsByKind.get(kind);\n    if (plugins) {\n      const plugin = plugins.find(plugin => plugin.name.toLowerCase() === name.toLowerCase());\n      if (plugin) {\n        return plugin as any;\n      } else {\n        throw new Error(\n          `Cannot load ${kind} plugin \"${name}\". Did you forget to install it? Loaded ${kind} plugins were: ${plugins.map(p => p.name).join(', ')}`\n        );\n      }\n    } else {\n      throw new Error(`Cannot load ${kind} plugin \"${name}\". In fact, no ${kind} plugins were loaded. Did you forget to install it?`);\n    }\n  }\n\n  public resolveAll<T extends keyof Plugins>(kind: T): Array<Plugins[T]> {\n    const plugins = this.pluginsByKind.get(kind);\n    return plugins || ([] as any);\n  }\n\n  private resolvePluginModules() {\n    const modules: string[] = [];\n    this.pluginDescriptors.forEach(pluginExpression => {\n      if (typeof pluginExpression === 'string') {\n        if (pluginExpression.includes('*')) {\n          // Plugin directory is the node_modules folder of the module that installed stryker\n          // So if current __dirname is './@stryker-mutator/core/src/di' so 4 directories above\n          const pluginDirectory = path.dirname(path.resolve(__dirname, '..', '..', '..', '..', pluginExpression));\n          const regexp = new RegExp('^' + path.basename(pluginExpression).replace('*', '.*'));\n\n          this.log.debug('Loading %s from %s', pluginExpression, pluginDirectory);\n          const plugins = fsAsPromised\n            .readdirSync(pluginDirectory)\n            .filter(pluginName => !IGNORED_PACKAGES.includes(pluginName) && regexp.test(pluginName))\n            .map(pluginName => path.resolve(pluginDirectory, pluginName));\n          if (plugins.length === 0) {\n            this.log.debug('Expression %s not resulted in plugins to load', pluginExpression);\n          }\n          plugins\n            .map(plugin => {\n              this.log.debug('Loading plugin \"%s\" (matched with expression %s)', plugin, pluginExpression);\n              return plugin;\n            })\n            .forEach(p => modules.push(p));\n        } else {\n          modules.push(pluginExpression);\n        }\n      } else {\n        this.log.warn('Ignoring plugin %s, as its not a string type', pluginExpression);\n      }\n    });\n\n    return modules;\n  }\n\n  private requirePlugin(name: string) {\n    this.log.debug(`Loading plugins ${name}`);\n    try {\n      const module = importModule(name);\n      if (this.isPluginModule(module)) {\n        module.strykerPlugins.forEach(plugin => this.loadPlugin(plugin));\n      }\n    } catch (e) {\n      if (e.code === 'MODULE_NOT_FOUND' && e.message.indexOf(name) !== -1) {\n        this.log.warn('Cannot find plugin \"%s\".\\n  Did you forget to install it ?\\n' + '  npm install %s --save-dev', name, name);\n      } else {\n        this.log.warn('Error during loading \"%s\" plugin:\\n  %s', name, e.message);\n      }\n    }\n  }\n\n  private loadPlugin(plugin: Plugin<any>) {\n    let plugins = this.pluginsByKind.get(plugin.kind);\n    if (!plugins) {\n      plugins = [];\n      this.pluginsByKind.set(plugin.kind, plugins);\n    }\n    plugins.push(plugin);\n  }\n\n  private isPluginModule(module: unknown): module is PluginModule {\n    const pluginModule = module as PluginModule;\n    return pluginModule && pluginModule.strykerPlugins && Array.isArray(pluginModule.strykerPlugins);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/di/buildChildProcessInjector.ts":{"language":"typescript","mutants":[{"id":"1197","location":{"end":{"column":2,"line":18},"start":{"column":94,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1198","location":{"end":{"column":2,"line":22},"start":{"column":79,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import { StrykerOptions } from '@stryker-mutator/api/core';\nimport { commonTokens, Injector, OptionsContext, Scope, tokens } from '@stryker-mutator/api/plugin';\nimport { getLogger } from 'log4js';\nimport { rootInjector } from 'typed-inject';\n\nimport { loggerFactory, mutatorDescriptorFactory, pluginResolverFactory } from './factoryMethods';\n\nimport { coreTokens } from '.';\n\nexport function buildChildProcessInjector(options: StrykerOptions): Injector<OptionsContext> {\n  return rootInjector\n    .provideValue(commonTokens.options, options)\n    .provideValue(commonTokens.getLogger, getLogger)\n    .provideFactory(commonTokens.logger, loggerFactory, Scope.Transient)\n    .provideFactory(coreTokens.pluginDescriptors, pluginDescriptorsFactory)\n    .provideFactory(commonTokens.pluginResolver, pluginResolverFactory)\n    .provideFactory(commonTokens.mutatorDescriptor, mutatorDescriptorFactory);\n}\n\nfunction pluginDescriptorsFactory(options: StrykerOptions): readonly string[] {\n  return options.plugins;\n}\n\npluginDescriptorsFactory.inject = tokens(commonTokens.options);\n"},"/home/runner/work/stryker/stryker/packages/core/src/di/buildMainInjector.ts":{"language":"typescript","mutants":[{"id":"1199","location":{"end":{"column":2,"line":50},"start":{"column":95,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1200","location":{"end":{"column":2,"line":55},"start":{"column":70,"line":52}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1201","location":{"end":{"column":53,"line":53},"start":{"column":39,"line":53}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import { StrykerOptions } from '@stryker-mutator/api/core';\nimport { Config } from '@stryker-mutator/api/config';\nimport { commonTokens, Injector, OptionsContext, PluginKind, Scope, tokens } from '@stryker-mutator/api/plugin';\nimport { Reporter } from '@stryker-mutator/api/report';\nimport { TestFramework } from '@stryker-mutator/api/test_framework';\nimport { getLogger } from 'log4js';\nimport { rootInjector } from 'typed-inject';\n\nimport { ConfigEditorApplier, readConfig } from '../config';\nimport ConfigReader from '../config/ConfigReader';\nimport BroadcastReporter from '../reporters/BroadcastReporter';\nimport { TemporaryDirectory } from '../utils/TemporaryDirectory';\nimport Timer from '../utils/Timer';\n\nimport { loggerFactory, mutatorDescriptorFactory, optionsFactory, pluginResolverFactory, testFrameworkFactory } from './factoryMethods';\n\nimport { coreTokens, PluginCreator } from '.';\n\nexport interface MainContext extends OptionsContext {\n  [coreTokens.reporter]: Required<Reporter>;\n  [coreTokens.testFramework]: TestFramework | null;\n  [coreTokens.pluginCreatorReporter]: PluginCreator<PluginKind.Reporter>;\n  [coreTokens.pluginCreatorConfigEditor]: PluginCreator<PluginKind.ConfigEditor>;\n  [coreTokens.pluginCreatorMutator]: PluginCreator<PluginKind.Mutator>;\n  [coreTokens.pluginCreatorTestFramework]: PluginCreator<PluginKind.TestFramework>;\n  [coreTokens.timer]: Timer;\n  [coreTokens.temporaryDirectory]: TemporaryDirectory;\n}\n\nexport function buildMainInjector(cliOptions: Partial<StrykerOptions>): Injector<MainContext> {\n  return rootInjector\n    .provideValue(commonTokens.getLogger, getLogger)\n    .provideFactory(commonTokens.logger, loggerFactory, Scope.Transient)\n    .provideValue(coreTokens.cliOptions, cliOptions)\n    .provideClass(coreTokens.configReader, ConfigReader)\n    .provideFactory(coreTokens.configReadFromConfigFile, readConfig)\n    .provideFactory(coreTokens.pluginDescriptors, pluginDescriptorsFactory)\n    .provideFactory(commonTokens.pluginResolver, pluginResolverFactory)\n    .provideFactory(coreTokens.pluginCreatorConfigEditor, PluginCreator.createFactory(PluginKind.ConfigEditor))\n    .provideClass(coreTokens.configEditorApplier, ConfigEditorApplier)\n    .provideFactory(commonTokens.options, optionsFactory)\n    .provideFactory(commonTokens.mutatorDescriptor, mutatorDescriptorFactory)\n    .provideFactory(coreTokens.pluginCreatorReporter, PluginCreator.createFactory(PluginKind.Reporter))\n    .provideFactory(coreTokens.pluginCreatorTestFramework, PluginCreator.createFactory(PluginKind.TestFramework))\n    .provideFactory(coreTokens.pluginCreatorMutator, PluginCreator.createFactory(PluginKind.Mutator))\n    .provideClass(coreTokens.reporter, BroadcastReporter)\n    .provideFactory(coreTokens.testFramework, testFrameworkFactory)\n    .provideClass(coreTokens.temporaryDirectory, TemporaryDirectory)\n    .provideClass(coreTokens.timer, Timer);\n}\n\nfunction pluginDescriptorsFactory(config: Config): readonly string[] {\n  config.plugins.push(require.resolve('../reporters'));\n  return config.plugins;\n}\npluginDescriptorsFactory.inject = tokens(coreTokens.configReadFromConfigFile);\n"},"/home/runner/work/stryker/stryker/packages/core/src/di/coreTokens.ts":{"language":"typescript","mutants":[{"id":"1202","location":{"end":{"column":39,"line":1},"start":{"column":27,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1203","location":{"end":{"column":43,"line":2},"start":{"column":29,"line":2}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1204","location":{"end":{"column":67,"line":3},"start":{"column":41,"line":3}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1205","location":{"end":{"column":57,"line":4},"start":{"column":36,"line":4}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1206","location":{"end":{"column":39,"line":5},"start":{"column":27,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1207","location":{"end":{"column":51,"line":6},"start":{"column":33,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1208","location":{"end":{"column":49,"line":7},"start":{"column":32,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1209","location":{"end":{"column":67,"line":8},"start":{"column":41,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1210","location":{"end":{"column":41,"line":9},"start":{"column":28,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1211","location":{"end":{"column":55,"line":10},"start":{"column":35,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1212","location":{"end":{"column":45,"line":11},"start":{"column":30,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1213","location":{"end":{"column":29,"line":12},"start":{"column":22,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1214","location":{"end":{"column":47,"line":13},"start":{"column":31,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1215","location":{"end":{"column":47,"line":14},"start":{"column":31,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1216","location":{"end":{"column":39,"line":15},"start":{"column":27,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1217","location":{"end":{"column":43,"line":16},"start":{"column":29,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1218","location":{"end":{"column":35,"line":17},"start":{"column":25,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1219","location":{"end":{"column":39,"line":18},"start":{"column":27,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1220","location":{"end":{"column":53,"line":19},"start":{"column":34,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1221","location":{"end":{"column":61,"line":20},"start":{"column":38,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1222","location":{"end":{"column":69,"line":21},"start":{"column":42,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1223","location":{"end":{"column":65,"line":22},"start":{"column":40,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1224","location":{"end":{"column":65,"line":23},"start":{"column":40,"line":23}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1225","location":{"end":{"column":59,"line":24},"start":{"column":37,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1226","location":{"end":{"column":71,"line":25},"start":{"column":43,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"export const cliOptions = 'cliOptions';\nexport const configReader = 'configReader';\nexport const configReadFromConfigFile = 'configReadFromConfigFile';\nexport const configEditorApplier = 'configEditorApplier';\nexport const inputFiles = 'inputFiles';\nexport const initialRunResult = 'initialRunResult';\nexport const transpiledFiles = 'transpiledFiles';\nexport const mutantTranspileScheduler = 'mutantTranspileScheduler';\nexport const sandboxPool = 'sandboxPool';\nexport const temporaryDirectory = 'temporaryDirectory';\nexport const testFramework = 'testFramework';\nexport const timer = 'timer';\nexport const timeOverheadMS = 'timeOverheadMS';\nexport const loggingContext = 'loggingContext';\nexport const transpiler = 'transpiler';\nexport const sandboxIndex = 'sandboxIndex';\nexport const reporter = 'reporter';\nexport const pluginKind = 'pluginKind';\nexport const pluginDescriptors = 'pluginDescriptors';\nexport const pluginCreatorReporter = 'pluginCreatorReporter';\nexport const pluginCreatorConfigEditor = 'pluginCreatorConfigEditor';\nexport const pluginCreatorTranspiler = 'pluginCreatorTranspiler';\nexport const pluginCreatorTestRunner = 'pluginCreatorTestRunner';\nexport const pluginCreatorMutator = 'pluginCreatorMutator';\nexport const pluginCreatorTestFramework = 'pluginCreatorTestFramework';\n"},"/home/runner/work/stryker/stryker/packages/core/src/di/factoryMethods.ts":{"language":"typescript","mutants":[{"id":"1227","location":{"end":{"column":2,"line":18},"start":{"column":19,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1228","location":{"end":{"column":2,"line":25},"start":{"column":3,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1229","location":{"end":{"column":2,"line":30},"start":{"column":93,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1230","location":{"end":{"column":52,"line":29},"start":{"column":43,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1231","location":{"end":{"column":2,"line":36},"start":{"column":106,"line":33}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1232","location":{"end":{"column":2,"line":59},"start":{"column":86,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1233","location":{"end":{"column":4,"line":47},"start":{"column":39,"line":43}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1234","location":{"end":{"column":23,"line":45},"start":{"column":11,"line":45}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1235","location":{"end":{"column":26,"line":46},"start":{"column":24,"line":46}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"1236","location":{"end":{"column":42,"line":48},"start":{"column":7,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1237","location":{"end":{"column":42,"line":48},"start":{"column":7,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1238","location":{"end":{"column":33,"line":48},"start":{"column":30,"line":48}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"1239","location":{"end":{"column":42,"line":48},"start":{"column":34,"line":48}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1240","location":{"end":{"column":4,"line":53},"start":{"column":44,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1241","location":{"end":{"column":6,"line":52},"start":{"column":12,"line":49}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1242","location":{"end":{"column":4,"line":58},"start":{"column":10,"line":55}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"}],"source":"import { Config } from '@stryker-mutator/api/config';\nimport { MutatorDescriptor, StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger, LoggerFactoryMethod } from '@stryker-mutator/api/logging';\nimport { commonTokens, Injector, OptionsContext, PluginKind, PluginResolver, tokens } from '@stryker-mutator/api/plugin';\n\nimport { ConfigEditorApplier } from '../config';\nimport TestFrameworkOrchestrator from '../TestFrameworkOrchestrator';\nimport { freezeRecursively } from '../utils/objectUtils';\n\nimport { coreTokens, PluginCreator, PluginLoader } from '.';\n\nexport function pluginResolverFactory(\n  injector: Injector<{ [commonTokens.logger]: Logger; [coreTokens.pluginDescriptors]: readonly string[] }>\n): PluginResolver {\n  const pluginLoader = injector.injectClass(PluginLoader);\n  pluginLoader.load();\n  return pluginLoader;\n}\npluginResolverFactory.inject = tokens(commonTokens.injector);\n\nexport function testFrameworkFactory(\n  injector: Injector<OptionsContext & { [coreTokens.pluginCreatorTestFramework]: PluginCreator<PluginKind.TestFramework> }>\n) {\n  return injector.injectClass(TestFrameworkOrchestrator).determineTestFramework();\n}\ntestFrameworkFactory.inject = tokens(commonTokens.injector);\n\nexport function loggerFactory(getLogger: LoggerFactoryMethod, target: Function | undefined) {\n  return getLogger(target ? target.name : 'UNKNOWN');\n}\nloggerFactory.inject = tokens(commonTokens.getLogger, commonTokens.target);\n\nexport function optionsFactory(config: Config, configEditorApplier: ConfigEditorApplier): StrykerOptions {\n  configEditorApplier.edit(config);\n  return freezeRecursively(config);\n}\noptionsFactory.inject = tokens<[typeof coreTokens.configReadFromConfigFile, typeof coreTokens.configEditorApplier]>(\n  coreTokens.configReadFromConfigFile,\n  coreTokens.configEditorApplier\n);\n\nexport function mutatorDescriptorFactory(options: StrykerOptions): MutatorDescriptor {\n  const defaults: MutatorDescriptor = {\n    plugins: null,\n    name: 'javascript',\n    excludedMutations: []\n  };\n  if (typeof options.mutator === 'string') {\n    return {\n      ...defaults,\n      name: options.mutator\n    };\n  }\n\n  return {\n    ...defaults,\n    ...options.mutator\n  };\n}\nmutatorDescriptorFactory.inject = tokens(commonTokens.options);\n"},"/home/runner/work/stryker/stryker/packages/core/src/initializer/NpmClient.ts":{"language":"typescript","mutants":[{"id":"1243","location":{"end":{"column":2,"line":26},"start":{"column":42,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1244","location":{"end":{"column":33,"line":23},"start":{"column":14,"line":23}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1245","location":{"end":{"column":37,"line":23},"start":{"column":35,"line":23}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"1246","location":{"end":{"column":24,"line":24},"start":{"column":14,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1247","location":{"end":{"column":28,"line":24},"start":{"column":26,"line":24}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"1248","location":{"end":{"column":15,"line":25},"start":{"column":12,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1249","location":{"end":{"column":6,"line":32},"start":{"column":39,"line":28}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1250","location":{"end":{"column":5,"line":32},"start":{"column":29,"line":29}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1251","location":{"end":{"column":4,"line":32},"start":{"column":40,"line":29}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1252","location":{"end":{"column":2,"line":40},"start":{"column":22,"line":34}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1253","location":{"end":{"column":2,"line":40},"start":{"column":78,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1254","location":{"end":{"column":53,"line":35},"start":{"column":7,"line":35}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1255","location":{"end":{"column":53,"line":35},"start":{"column":7,"line":35}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1256","location":{"end":{"column":37,"line":35},"start":{"column":35,"line":35}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"1257","location":{"end":{"column":30,"line":35},"start":{"column":27,"line":35}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1258","location":{"end":{"column":4,"line":37},"start":{"column":55,"line":35}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1259","location":{"end":{"column":4,"line":39},"start":{"column":10,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1260","location":{"end":{"column":89,"line":38},"start":{"column":21,"line":38}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1261","location":{"end":{"column":4,"line":48},"start":{"column":58,"line":46}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1262","location":{"end":{"column":83,"line":47},"start":{"column":24,"line":47}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1263","location":{"end":{"column":4,"line":59},"start":{"column":92,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1264","location":{"end":{"column":86,"line":51},"start":{"column":24,"line":51}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1265","location":{"end":{"column":8,"line":57},"start":{"column":29,"line":52}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1266","location":{"end":{"column":29,"line":53},"start":{"column":13,"line":53}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1267","location":{"end":{"column":29,"line":53},"start":{"column":13,"line":53}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1268","location":{"end":{"column":10,"line":55},"start":{"column":31,"line":53}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1269","location":{"end":{"column":128,"line":54},"start":{"column":62,"line":54}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1270","location":{"end":{"column":4,"line":63},"start":{"column":55,"line":61}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1271","location":{"end":{"column":79,"line":62},"start":{"column":24,"line":62}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1272","location":{"end":{"column":4,"line":67},"start":{"column":58,"line":65}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1273","location":{"end":{"column":82,"line":66},"start":{"column":24,"line":66}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1274","location":{"end":{"column":4,"line":71},"start":{"column":60,"line":69}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1275","location":{"end":{"column":80,"line":70},"start":{"column":24,"line":70}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1276","location":{"end":{"column":4,"line":83},"start":{"column":65,"line":73}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1277","location":{"end":{"column":60,"line":74},"start":{"column":18,"line":74}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1278","location":{"end":{"column":47,"line":78},"start":{"column":13,"line":78}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1279","location":{"end":{"column":47,"line":78},"start":{"column":20,"line":78}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1280","location":{"end":{"column":47,"line":78},"start":{"column":20,"line":78}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1281","location":{"end":{"column":44,"line":78},"start":{"column":42,"line":78}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"1282","location":{"end":{"column":8,"line":82},"start":{"column":21,"line":79}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1283","location":{"end":{"column":141,"line":80},"start":{"column":23,"line":80}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1284","location":{"end":{"column":4,"line":98},"start":{"column":58,"line":85}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1285","location":{"end":{"column":40,"line":86},"start":{"column":20,"line":86}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1286","location":{"end":{"column":8,"line":97},"start":{"column":21,"line":90}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1287","location":{"end":{"column":109,"line":91},"start":{"column":24,"line":91}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1288","location":{"end":{"column":10,"line":95},"start":{"column":41,"line":92}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1289","location":{"end":{"column":22,"line":93},"start":{"column":20,"line":93}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"}],"source":"import { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { errorToString } from '@stryker-mutator/util';\nimport { IRestResponse, RestClient } from 'typed-rest-client/RestClient';\n\nimport { PackageInfo } from './PackageInfo';\nimport PromptOption from './PromptOption';\n\nimport { initializerTokens } from '.';\n\ninterface NpmSearchResult {\n  total: number;\n  results: Array<{ package: PackageInfo }>;\n}\n\ninterface NpmPackage {\n  name: string;\n  initStrykerConfig?: object;\n}\n\nconst getName = (packageName: string) => {\n  return packageName\n    .replace('@stryker-mutator/', '')\n    .replace('stryker-', '')\n    .split('-')[0];\n};\n\nconst mapSearchResultToPromptOption = (searchResults: NpmSearchResult): PromptOption[] =>\n  searchResults.results.map(result => ({\n    name: getName(result.package.name),\n    pkg: result.package\n  }));\n\nconst handleResult = (from: string) => <T>(response: IRestResponse<T>): T => {\n  if (response.statusCode === 200 && response.result) {\n    return response.result;\n  } else {\n    throw new Error(`Path ${from} resulted in http status code: ${response.statusCode}.`);\n  }\n};\n\nexport default class NpmClient {\n  public static inject = tokens(commonTokens.logger, initializerTokens.restClientNpmSearch, initializerTokens.restClientNpm);\n  constructor(private readonly log: Logger, private readonly searchClient: RestClient, private readonly packageClient: RestClient) {}\n\n  public getTestRunnerOptions(): Promise<PromptOption[]> {\n    return this.search('/v2/search?q=keywords:@stryker-mutator/test-runner-plugin').then(mapSearchResultToPromptOption);\n  }\n\n  public getTestFrameworkOptions(testRunnerFilter: string | null): Promise<PromptOption[]> {\n    return this.search('/v2/search?q=keywords:@stryker-mutator/test-framework-plugin')\n      .then(searchResult => {\n        if (testRunnerFilter) {\n          searchResult.results = searchResult.results.filter(framework => framework.package.keywords.includes(testRunnerFilter));\n        }\n        return searchResult;\n      })\n      .then(mapSearchResultToPromptOption);\n  }\n\n  public getMutatorOptions(): Promise<PromptOption[]> {\n    return this.search('/v2/search?q=keywords:@stryker-mutator/mutator-plugin').then(mapSearchResultToPromptOption);\n  }\n\n  public getTranspilerOptions(): Promise<PromptOption[]> {\n    return this.search('/v2/search?q=keywords:@stryker-mutator/transpiler-plugin').then(mapSearchResultToPromptOption);\n  }\n\n  public getTestReporterOptions(): Promise<PromptOption[]> {\n    return this.search('/v2/search?q=keywords:@stryker-mutator/reporter-plugin').then(mapSearchResultToPromptOption);\n  }\n\n  public getAdditionalConfig(pkg: PackageInfo): Promise<object> {\n    const path = `/${pkg.name}@${pkg.version}/package.json`;\n    return this.packageClient\n      .get<NpmPackage>(path)\n      .then(handleResult(path))\n      .then(pkg => pkg.initStrykerConfig || {})\n      .catch(err => {\n        this.log.warn(`Could not fetch additional initialization config for dependency ${pkg.name}. You might need to configure it manually`, err);\n        return {};\n      });\n  }\n\n  private search(path: string): Promise<NpmSearchResult> {\n    this.log.debug(`Searching: ${path}`);\n    return this.searchClient\n      .get<NpmSearchResult>(path)\n      .then(handleResult(path))\n      .catch(err => {\n        this.log.error(`Unable to reach npms.io (for query ${path}). Please check your internet connection.`, errorToString(err));\n        const result: NpmSearchResult = {\n          results: [],\n          total: 0\n        };\n        return result;\n      });\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/initializer/StrykerConfigWriter.ts":{"language":"typescript","mutants":[{"id":"1290","location":{"end":{"column":46,"line":11},"start":{"column":29,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1291","location":{"end":{"column":4,"line":23},"start":{"column":35,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1292","location":{"end":{"column":53,"line":18},"start":{"column":9,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1293","location":{"end":{"column":53,"line":18},"start":{"column":9,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1294","location":{"end":{"column":6,"line":22},"start":{"column":55,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1295","location":{"end":{"column":131,"line":19},"start":{"column":19,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1296","location":{"end":{"column":4,"line":49},"start":{"column":20,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1297","location":{"end":{"column":6,"line":44},"start":{"column":51,"line":38}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"1298","location":{"end":{"column":59,"line":39},"start":{"column":57,"line":39}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"1299","location":{"end":{"column":55,"line":41},"start":{"column":40,"line":41}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1300","location":{"end":{"column":68,"line":42},"start":{"column":66,"line":42}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"1301","location":{"end":{"column":77,"line":43},"start":{"column":66,"line":43}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1302","location":{"end":{"column":83,"line":43},"start":{"column":81,"line":43}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"1303","location":{"end":{"column":4,"line":61},"start":{"column":63,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1304","location":{"end":{"column":82,"line":59},"start":{"column":7,"line":58}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1305","location":{"end":{"column":4,"line":70},"start":{"column":117,"line":63}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1306","location":{"end":{"column":30,"line":64},"start":{"column":9,"line":64}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1307","location":{"end":{"column":30,"line":64},"start":{"column":9,"line":64}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1308","location":{"end":{"column":6,"line":67},"start":{"column":32,"line":64}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1309","location":{"end":{"column":48,"line":66},"start":{"column":39,"line":66}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1310","location":{"end":{"column":6,"line":69},"start":{"column":12,"line":67}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1311","location":{"end":{"column":44,"line":68},"start":{"column":39,"line":68}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1312","location":{"end":{"column":72,"line":72},"start":{"column":70,"line":72}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"1313","location":{"end":{"column":4,"line":87},"start":{"column":74,"line":72}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1314","location":{"end":{"column":55,"line":73},"start":{"column":14,"line":73}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1315","location":{"end":{"column":9,"line":79},"start":{"column":27,"line":74}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1316","location":{"end":{"column":6,"line":83},"start":{"column":9,"line":81}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1317","location":{"end":{"column":86,"line":82},"start":{"column":41,"line":82}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1318","location":{"end":{"column":6,"line":86},"start":{"column":21,"line":83}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1319","location":{"end":{"column":50,"line":84},"start":{"column":22,"line":84}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1320","location":{"end":{"column":125,"line":85},"start":{"column":16,"line":85}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1321","location":{"end":{"column":4,"line":91},"start":{"column":69,"line":89}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1322","location":{"end":{"column":4,"line":95},"start":{"column":71,"line":93}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import { StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { childProcessAsPromised, fsAsPromised } from '@stryker-mutator/util';\n\nimport PresetConfiguration from './presets/PresetConfiguration';\nimport PromptOption from './PromptOption';\n\nimport { initializerTokens } from '.';\n\nconst STRYKER_CONFIG_FILE = 'stryker.conf.js';\n\nexport default class StrykerConfigWriter {\n  public static inject = tokens(commonTokens.logger, initializerTokens.out);\n  constructor(private readonly log: Logger, private readonly out: typeof console.log) {}\n\n  public guardForExistingConfig() {\n    if (fsAsPromised.existsSync(STRYKER_CONFIG_FILE)) {\n      const msg = 'Stryker config file \"stryker.conf.js\" already exists in the current directory. Please remove it and try again.';\n      this.log.error(msg);\n      throw new Error(msg);\n    }\n  }\n\n  /**\n   * Create stryker.conf.js based on the chosen framework and test runner\n   * @function\n   */\n  public write(\n    selectedTestRunner: null | PromptOption,\n    selectedTestFramework: null | PromptOption,\n    selectedMutator: null | PromptOption,\n    selectedTranspilers: null | PromptOption[],\n    selectedReporters: PromptOption[],\n    selectedPackageManager: PromptOption,\n    additionalPiecesOfConfig: Array<Partial<StrykerOptions>>\n  ): Promise<void> {\n    const configObject: Partial<StrykerOptions> = {\n      mutator: selectedMutator ? selectedMutator.name : '',\n      packageManager: selectedPackageManager.name,\n      reporters: selectedReporters.map(rep => rep.name),\n      testRunner: selectedTestRunner ? selectedTestRunner.name : '',\n      transpilers: selectedTranspilers ? selectedTranspilers.map(t => t.name) : []\n    };\n\n    this.configureTestFramework(configObject, selectedTestFramework);\n    Object.assign(configObject, ...additionalPiecesOfConfig);\n    return this.writeStrykerConfig(configObject);\n  }\n\n  /**\n   * Create stryker.conf.js based on the chosen preset\n   * @function\n   */\n  public async writePreset(presetConfig: PresetConfiguration) {\n    return this.writeStrykerConfigRaw(\n      presetConfig.config,\n      `// This config was generated using a preset.\n    // Please see the handbook for more information: ${presetConfig.handbookUrl}`\n    );\n  }\n\n  private configureTestFramework(configObject: Partial<StrykerOptions>, selectedTestFramework: null | PromptOption) {\n    if (selectedTestFramework) {\n      configObject.testFramework = selectedTestFramework.name;\n      configObject.coverageAnalysis = 'perTest';\n    } else {\n      configObject.coverageAnalysis = 'all';\n    }\n  }\n\n  private async writeStrykerConfigRaw(rawConfig: string, rawHeader = '') {\n    this.out('Writing & formatting stryker.conf.js...');\n    const formattedConf = `${rawHeader}\n      module.exports = function(config){\n        config.set(\n          ${rawConfig}\n        );\n      }`;\n    await fsAsPromised.writeFile(STRYKER_CONFIG_FILE, formattedConf);\n    try {\n      await childProcessAsPromised.exec(`npx prettier --write ${STRYKER_CONFIG_FILE}`);\n    } catch (error) {\n      this.log.debug('Prettier exited with error', error);\n      this.out('Unable to format stryker.conf.js file for you. This is not a big problem, but it might look a bit messy 🙈.');\n    }\n  }\n\n  private writeStrykerConfig(configObject: Partial<StrykerOptions>) {\n    return this.writeStrykerConfigRaw(this.wrapInModule(configObject));\n  }\n\n  private wrapInModule(configObject: Partial<StrykerOptions>): string {\n    return JSON.stringify(configObject, null, 2);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/initializer/StrykerInitializer.ts":{"language":"typescript","mutants":[{"id":"1323","location":{"end":{"column":14,"line":19},"start":{"column":9,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1324","location":{"end":{"column":16,"line":20},"start":{"column":10,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1325","location":{"end":{"column":4,"line":57},"start":{"column":44,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1326","location":{"end":{"column":23,"line":49},"start":{"column":9,"line":49}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1327","location":{"end":{"column":23,"line":49},"start":{"column":9,"line":49}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1328","location":{"end":{"column":6,"line":51},"start":{"column":25,"line":49}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1329","location":{"end":{"column":6,"line":53},"start":{"column":12,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1330","location":{"end":{"column":145,"line":54},"start":{"column":14,"line":54}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1331","location":{"end":{"column":72,"line":55},"start":{"column":14,"line":55}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1332","location":{"end":{"column":146,"line":56},"start":{"column":14,"line":56}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1333","location":{"end":{"column":4,"line":71},"start":{"column":26,"line":63}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1334","location":{"end":{"column":6,"line":68},"start":{"column":59,"line":64}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1335","location":{"end":{"column":48,"line":65},"start":{"column":11,"line":65}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1336","location":{"end":{"column":48,"line":65},"start":{"column":11,"line":65}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1337","location":{"end":{"column":31,"line":65},"start":{"column":29,"line":65}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"1338","location":{"end":{"column":48,"line":65},"start":{"column":32,"line":65}},"mutatorName":"BooleanLiteral","replacement":"process.env[to]","status":"Survived"},{"id":"1339","location":{"end":{"column":8,"line":67},"start":{"column":50,"line":65}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1340","location":{"end":{"column":33,"line":69},"start":{"column":21,"line":69}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1341","location":{"end":{"column":47,"line":69},"start":{"column":35,"line":69}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1342","location":{"end":{"column":34,"line":70},"start":{"column":21,"line":70}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1343","location":{"end":{"column":49,"line":70},"start":{"column":36,"line":70}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1344","location":{"end":{"column":4,"line":82},"start":{"column":61,"line":73}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1345","location":{"end":{"column":29,"line":75},"start":{"column":9,"line":75}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1346","location":{"end":{"column":29,"line":75},"start":{"column":9,"line":75}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1347","location":{"end":{"column":6,"line":78},"start":{"column":31,"line":75}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1348","location":{"end":{"column":71,"line":76},"start":{"column":22,"line":76}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1349","location":{"end":{"column":6,"line":81},"start":{"column":12,"line":78}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1350","location":{"end":{"column":90,"line":79},"start":{"column":22,"line":79}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1351","location":{"end":{"column":4,"line":89},"start":{"column":91,"line":84}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1352","location":{"end":{"column":4,"line":115},"start":{"column":67,"line":91}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1353","location":{"end":{"column":75,"line":94},"start":{"column":7,"line":94}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1354","location":{"end":{"column":75,"line":94},"start":{"column":7,"line":94}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1355","location":{"end":{"column":28,"line":94},"start":{"column":26,"line":94}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"1356","location":{"end":{"column":75,"line":94},"start":{"column":29,"line":94}},"mutatorName":"BooleanLiteral","replacement":"CommandTestRunner.is(selectedTestRunner.name)","status":"Killed"},{"id":"1357","location":{"end":{"column":67,"line":100},"start":{"column":7,"line":100}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"CompileError"},{"id":"1358","location":{"end":{"column":42,"line":112},"start":{"column":27,"line":112}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1359","location":{"end":{"column":4,"line":126},"start":{"column":66,"line":117}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1360","location":{"end":{"column":33,"line":119},"start":{"column":9,"line":119}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1361","location":{"end":{"column":33,"line":119},"start":{"column":9,"line":119}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1362","location":{"end":{"column":6,"line":122},"start":{"column":35,"line":119}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1363","location":{"end":{"column":80,"line":120},"start":{"column":22,"line":120}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1364","location":{"end":{"column":6,"line":125},"start":{"column":12,"line":122}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1365","location":{"end":{"column":89,"line":123},"start":{"column":16,"line":123}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1366","location":{"end":{"column":4,"line":146},"start":{"column":60,"line":128}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1367","location":{"end":{"column":8,"line":135},"start":{"column":7,"line":132}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1368","location":{"end":{"column":27,"line":133},"start":{"column":15,"line":133}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1369","location":{"end":{"column":8,"line":139},"start":{"column":7,"line":136}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1370","location":{"end":{"column":25,"line":137},"start":{"column":15,"line":137}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1371","location":{"end":{"column":8,"line":143},"start":{"column":7,"line":140}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1372","location":{"end":{"column":26,"line":141},"start":{"column":15,"line":141}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1373","location":{"end":{"column":4,"line":167},"start":{"column":99,"line":148}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1374","location":{"end":{"column":36,"line":151},"start":{"column":9,"line":151}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1375","location":{"end":{"column":36,"line":151},"start":{"column":9,"line":151}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1376","location":{"end":{"column":6,"line":163},"start":{"column":38,"line":151}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1377","location":{"end":{"column":115,"line":152},"start":{"column":22,"line":152}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1378","location":{"end":{"column":8,"line":156},"start":{"column":34,"line":153}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1379","location":{"end":{"column":27,"line":154},"start":{"column":15,"line":154}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1380","location":{"end":{"column":41,"line":159},"start":{"column":11,"line":159}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1381","location":{"end":{"column":41,"line":159},"start":{"column":11,"line":159}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1382","location":{"end":{"column":36,"line":159},"start":{"column":33,"line":159}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1383","location":{"end":{"column":8,"line":162},"start":{"column":43,"line":159}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1384","location":{"end":{"column":61,"line":161},"start":{"column":18,"line":161}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1385","location":{"end":{"column":6,"line":165},"start":{"column":12,"line":163}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1386","location":{"end":{"column":144,"line":164},"start":{"column":16,"line":164}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1387","location":{"end":{"column":4,"line":178},"start":{"column":63,"line":169}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1388","location":{"end":{"column":30,"line":171},"start":{"column":9,"line":171}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1389","location":{"end":{"column":30,"line":171},"start":{"column":9,"line":171}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1390","location":{"end":{"column":6,"line":174},"start":{"column":32,"line":171}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1391","location":{"end":{"column":73,"line":172},"start":{"column":22,"line":172}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1392","location":{"end":{"column":6,"line":177},"start":{"column":12,"line":174}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1393","location":{"end":{"column":85,"line":175},"start":{"column":16,"line":175}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1394","location":{"end":{"column":4,"line":189},"start":{"column":69,"line":180}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1395","location":{"end":{"column":23,"line":182},"start":{"column":9,"line":182}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1396","location":{"end":{"column":23,"line":182},"start":{"column":9,"line":182}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1397","location":{"end":{"column":6,"line":185},"start":{"column":25,"line":182}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1398","location":{"end":{"column":69,"line":183},"start":{"column":22,"line":183}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1399","location":{"end":{"column":6,"line":188},"start":{"column":12,"line":185}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1400","location":{"end":{"column":111,"line":186},"start":{"column":16,"line":186}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1401","location":{"end":{"column":4,"line":202},"start":{"column":63,"line":191}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1402","location":{"end":{"column":6,"line":201},"start":{"column":47,"line":192}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"1403","location":{"end":{"column":8,"line":196},"start":{"column":7,"line":193}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1404","location":{"end":{"column":8,"line":200},"start":{"column":7,"line":197}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1405","location":{"end":{"column":4,"line":206},"start":{"column":98,"line":204}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1406","location":{"end":{"column":77,"line":205},"start":{"column":57,"line":205}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1407","location":{"end":{"column":4,"line":226},"start":{"column":94,"line":212}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1408","location":{"end":{"column":34,"line":213},"start":{"column":9,"line":213}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1409","location":{"end":{"column":34,"line":213},"start":{"column":9,"line":213}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1410","location":{"end":{"column":32,"line":213},"start":{"column":29,"line":213}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1411","location":{"end":{"column":6,"line":215},"start":{"column":36,"line":213}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1412","location":{"end":{"column":48,"line":217},"start":{"column":45,"line":217}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1413","location":{"end":{"column":46,"line":218},"start":{"column":14,"line":218}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1414","location":{"end":{"column":59,"line":219},"start":{"column":17,"line":219}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1415","location":{"end":{"column":59,"line":219},"start":{"column":17,"line":219}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1416","location":{"end":{"column":40,"line":219},"start":{"column":37,"line":219}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1417","location":{"end":{"column":97,"line":219},"start":{"column":62,"line":219}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1418","location":{"end":{"column":133,"line":219},"start":{"column":100,"line":219}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1419","location":{"end":{"column":6,"line":223},"start":{"column":9,"line":221}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1420","location":{"end":{"column":47,"line":222},"start":{"column":27,"line":222}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"1421","location":{"end":{"column":45,"line":222},"start":{"column":36,"line":222}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"1422","location":{"end":{"column":6,"line":225},"start":{"column":17,"line":223}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1423","location":{"end":{"column":89,"line":224},"start":{"column":16,"line":224}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1424","location":{"end":{"column":4,"line":230},"start":{"column":87,"line":228}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1425","location":{"end":{"column":102,"line":229},"start":{"column":59,"line":229}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"}],"source":"import * as child from 'child_process';\n\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { Logger } from '@stryker-mutator/api/logging';\n\nimport CommandTestRunner from '../test-runner/CommandTestRunner';\nimport { filterEmpty } from '../utils/objectUtils';\n\nimport NpmClient from './NpmClient';\nimport { PackageInfo } from './PackageInfo';\nimport Preset from './presets/Preset';\nimport PromptOption from './PromptOption';\nimport StrykerConfigWriter from './StrykerConfigWriter';\nimport { StrykerInquirer } from './StrykerInquirer';\n\nimport { initializerTokens } from '.';\n\nconst enum PackageManager {\n  Npm = 'npm',\n  Yarn = 'yarn'\n}\n\nexport default class StrykerInitializer {\n  public static inject = tokens(\n    commonTokens.logger,\n    initializerTokens.out,\n    initializerTokens.npmClient,\n    initializerTokens.strykerPresets,\n    initializerTokens.configWriter,\n    initializerTokens.inquirer\n  );\n  constructor(\n    private readonly log: Logger,\n    private readonly out: typeof console.log,\n    private readonly client: NpmClient,\n    private readonly strykerPresets: Preset[],\n    private readonly configWriter: StrykerConfigWriter,\n    private readonly inquirer: StrykerInquirer\n  ) {}\n\n  /**\n   * Runs the initializer will prompt the user for questions about his setup. After that, install plugins and configure Stryker.\n   * @function\n   */\n  public async initialize(): Promise<void> {\n    this.configWriter.guardForExistingConfig();\n    this.patchProxies();\n    const selectedPreset = await this.selectPreset();\n    if (selectedPreset) {\n      await this.initiatePreset(this.configWriter, selectedPreset);\n    } else {\n      await this.initiateCustom(this.configWriter);\n    }\n    this.out('Done configuring stryker. Please review `stryker.conf.js`, you might need to configure transpilers or your test runner correctly.');\n    this.out(\"Let's kill some mutants with this command: `stryker run`\");\n    this.out('Note: Stryker will use `.stryker-temp` as location for temporary files. Be sure to add it to your ignored files in source control.');\n  }\n\n  /**\n   * The typed rest client works only with the specific HTTP_PROXY and HTTPS_PROXY env settings.\n   * Let's make sure they are available.\n   */\n  private patchProxies() {\n    const copyEnvVariable = (from: string, to: string) => {\n      if (process.env[from] && !process.env[to]) {\n        process.env[to] = process.env[from];\n      }\n    };\n    copyEnvVariable('http_proxy', 'HTTP_PROXY');\n    copyEnvVariable('https_proxy', 'HTTPS_PROXY');\n  }\n\n  private async selectPreset(): Promise<Preset | undefined> {\n    const presetOptions: Preset[] = this.strykerPresets;\n    if (presetOptions.length) {\n      this.log.debug(`Found presets: ${JSON.stringify(presetOptions)}`);\n      return this.inquirer.promptPresets(presetOptions);\n    } else {\n      this.log.debug('No presets have been configured, reverting to custom configuration');\n      return undefined;\n    }\n  }\n\n  private async initiatePreset(configWriter: StrykerConfigWriter, selectedPreset: Preset) {\n    const presetConfig = await selectedPreset.createConfig();\n    await configWriter.writePreset(presetConfig);\n    const selectedPackageManager = await this.selectPackageManager();\n    this.installNpmDependencies(presetConfig.dependencies, selectedPackageManager);\n  }\n\n  private async initiateCustom(configWriter: StrykerConfigWriter) {\n    const selectedTestRunner = await this.selectTestRunner();\n    const selectedTestFramework =\n      selectedTestRunner && !CommandTestRunner.is(selectedTestRunner.name) ? await this.selectTestFramework(selectedTestRunner) : null;\n    const selectedMutator = await this.selectMutator();\n    const selectedTranspilers = await this.selectTranspilers();\n    const selectedReporters = await this.selectReporters();\n    const selectedPackageManager = await this.selectPackageManager();\n    const npmDependencies = this.getSelectedNpmDependencies(\n      [selectedTestRunner, selectedTestFramework, selectedMutator].concat(selectedTranspilers).concat(selectedReporters)\n    );\n    await configWriter.write(\n      selectedTestRunner,\n      selectedTestFramework,\n      selectedMutator,\n      selectedTranspilers,\n      selectedReporters,\n      selectedPackageManager,\n      await this.fetchAdditionalConfig(npmDependencies)\n    );\n    this.installNpmDependencies(\n      npmDependencies.map(pkg => pkg.name),\n      selectedPackageManager\n    );\n  }\n\n  private async selectTestRunner(): Promise<PromptOption | null> {\n    const testRunnerOptions = await this.client.getTestRunnerOptions();\n    if (testRunnerOptions.length) {\n      this.log.debug(`Found test runners: ${JSON.stringify(testRunnerOptions)}`);\n      return this.inquirer.promptTestRunners(testRunnerOptions);\n    } else {\n      this.out('Unable to select a test runner. You will need to configure it manually.');\n      return null;\n    }\n  }\n\n  private async selectReporters(): Promise<PromptOption[]> {\n    let reporterOptions: PromptOption[];\n    reporterOptions = await this.client.getTestReporterOptions();\n    reporterOptions.push(\n      {\n        name: 'clear-text',\n        pkg: null\n      },\n      {\n        name: 'progress',\n        pkg: null\n      },\n      {\n        name: 'dashboard',\n        pkg: null\n      }\n    );\n    return this.inquirer.promptReporters(reporterOptions);\n  }\n\n  private async selectTestFramework(testRunnerOption: PromptOption): Promise<null | PromptOption> {\n    let selectedTestFramework: PromptOption | null = null;\n    const testFrameworkOptions = await this.client.getTestFrameworkOptions(testRunnerOption.pkg ? testRunnerOption.pkg.name : null);\n    if (testFrameworkOptions.length) {\n      this.log.debug(`Found test frameworks for ${testRunnerOption.name}: ${JSON.stringify(testFrameworkOptions)}`);\n      const none: PromptOption = {\n        name: 'None/other',\n        pkg: null\n      };\n      testFrameworkOptions.push(none);\n      selectedTestFramework = await this.inquirer.promptTestFrameworks(testFrameworkOptions);\n      if (selectedTestFramework === none) {\n        selectedTestFramework = null;\n        this.out('OK, downgrading coverageAnalysis to \"all\"');\n      }\n    } else {\n      this.out(`No stryker test framework plugin found that is compatible with ${testRunnerOption.name}, downgrading coverageAnalysis to \"all\"`);\n    }\n    return selectedTestFramework;\n  }\n\n  private async selectMutator(): Promise<PromptOption | null> {\n    const mutatorOptions = await this.client.getMutatorOptions();\n    if (mutatorOptions.length) {\n      this.log.debug(`Found mutators: ${JSON.stringify(mutatorOptions)}`);\n      return this.inquirer.promptMutator(mutatorOptions);\n    } else {\n      this.out('Unable to select a mutator. You will need to configure it manually.');\n      return null;\n    }\n  }\n\n  private async selectTranspilers(): Promise<PromptOption[] | null> {\n    const options = await this.client.getTranspilerOptions();\n    if (options.length) {\n      this.log.debug(`Found transpilers: ${JSON.stringify(options)}`);\n      return this.inquirer.promptTranspilers(options);\n    } else {\n      this.out('Unable to select transpilers. You will need to configure it manually, if you want to use any.');\n      return null;\n    }\n  }\n\n  private async selectPackageManager(): Promise<PromptOption> {\n    return this.inquirer.promptPackageManager([\n      {\n        name: PackageManager.Npm,\n        pkg: null\n      },\n      {\n        name: PackageManager.Yarn,\n        pkg: null\n      }\n    ]);\n  }\n\n  private getSelectedNpmDependencies(selectedOptions: Array<PromptOption | null>): PackageInfo[] {\n    return filterEmpty(filterEmpty(selectedOptions).map(option => option.pkg));\n  }\n\n  /**\n   * Install the npm packages\n   * @function\n   */\n  private installNpmDependencies(dependencies: string[], selectedOption: PromptOption): void {\n    if (dependencies.length === 0) {\n      return;\n    }\n\n    const dependencyArg = dependencies.join(' ');\n    this.out('Installing NPM dependencies...');\n    const cmd = selectedOption.name === PackageManager.Npm ? `npm i --save-dev ${dependencyArg}` : `yarn add ${dependencyArg} --dev`;\n    this.out(cmd);\n    try {\n      child.execSync(cmd, { stdio: [0, 1, 2] });\n    } catch (_) {\n      this.out(`An error occurred during installation, please try it yourself: \"${cmd}\"`);\n    }\n  }\n\n  private async fetchAdditionalConfig(dependencies: PackageInfo[]): Promise<object[]> {\n    return filterEmpty(await Promise.all(dependencies.map(dep => this.client.getAdditionalConfig(dep))));\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/initializer/StrykerInquirer.ts":{"language":"typescript","mutants":[{"id":"1426","location":{"end":{"column":4,"line":25},"start":{"column":78,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1427","location":{"end":{"column":80,"line":15},"start":{"column":69,"line":15}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1428","location":{"end":{"column":30,"line":17},"start":{"column":18,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1429","location":{"end":{"column":6,"line":23},"start":{"column":63,"line":18}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"1430","location":{"end":{"column":92,"line":20},"start":{"column":16,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1431","location":{"end":{"column":21,"line":21},"start":{"column":13,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1432","location":{"end":{"column":19,"line":22},"start":{"column":13,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1433","location":{"end":{"column":55,"line":24},"start":{"column":25,"line":24}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1434","location":{"end":{"column":55,"line":24},"start":{"column":30,"line":24}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1435","location":{"end":{"column":55,"line":24},"start":{"column":30,"line":24}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1436","location":{"end":{"column":40,"line":24},"start":{"column":37,"line":24}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1437","location":{"end":{"column":4,"line":40},"start":{"column":82,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1438","location":{"end":{"column":80,"line":28},"start":{"column":69,"line":28}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1439","location":{"end":{"column":6,"line":38},"start":{"column":67,"line":31}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"1440","location":{"end":{"column":23,"line":33},"start":{"column":16,"line":33}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1441","location":{"end":{"column":193,"line":35},"start":{"column":9,"line":35}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1442","location":{"end":{"column":25,"line":36},"start":{"column":13,"line":36}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1443","location":{"end":{"column":19,"line":37},"start":{"column":13,"line":37}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1444","location":{"end":{"column":118,"line":39},"start":{"column":12,"line":39}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1445","location":{"end":{"column":118,"line":39},"start":{"column":12,"line":39}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1446","location":{"end":{"column":68,"line":39},"start":{"column":66,"line":39}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"1447","location":{"end":{"column":61,"line":39},"start":{"column":27,"line":39}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1448","location":{"end":{"column":61,"line":39},"start":{"column":32,"line":39}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1449","location":{"end":{"column":61,"line":39},"start":{"column":32,"line":39}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1450","location":{"end":{"column":42,"line":39},"start":{"column":39,"line":39}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1451","location":{"end":{"column":118,"line":39},"start":{"column":69,"line":39}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"1452","location":{"end":{"column":4,"line":50},"start":{"column":85,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1453","location":{"end":{"column":6,"line":48},"start":{"column":70,"line":43}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"1454","location":{"end":{"column":39,"line":44},"start":{"column":28,"line":44}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1455","location":{"end":{"column":58,"line":45},"start":{"column":16,"line":45}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1456","location":{"end":{"column":28,"line":46},"start":{"column":13,"line":46}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1457","location":{"end":{"column":19,"line":47},"start":{"column":13,"line":47}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1458","location":{"end":{"column":64,"line":49},"start":{"column":27,"line":49}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1459","location":{"end":{"column":64,"line":49},"start":{"column":32,"line":49}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1460","location":{"end":{"column":64,"line":49},"start":{"column":32,"line":49}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1461","location":{"end":{"column":42,"line":49},"start":{"column":39,"line":49}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1462","location":{"end":{"column":4,"line":60},"start":{"column":78,"line":52}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1463","location":{"end":{"column":6,"line":58},"start":{"column":64,"line":53}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"1464","location":{"end":{"column":39,"line":54},"start":{"column":28,"line":54}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1465","location":{"end":{"column":58,"line":55},"start":{"column":16,"line":55}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1466","location":{"end":{"column":22,"line":56},"start":{"column":13,"line":56}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1467","location":{"end":{"column":19,"line":57},"start":{"column":13,"line":57}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1468","location":{"end":{"column":58,"line":59},"start":{"column":27,"line":59}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1469","location":{"end":{"column":58,"line":59},"start":{"column":32,"line":59}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1470","location":{"end":{"column":58,"line":59},"start":{"column":32,"line":59}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1471","location":{"end":{"column":42,"line":59},"start":{"column":39,"line":59}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1472","location":{"end":{"column":4,"line":70},"start":{"column":84,"line":62}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1473","location":{"end":{"column":6,"line":68},"start":{"column":70,"line":63}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"1474","location":{"end":{"column":39,"line":64},"start":{"column":28,"line":64}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1475","location":{"end":{"column":86,"line":65},"start":{"column":16,"line":65}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1476","location":{"end":{"column":26,"line":66},"start":{"column":13,"line":66}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1477","location":{"end":{"column":23,"line":67},"start":{"column":13,"line":67}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1478","location":{"end":{"column":111,"line":69},"start":{"column":27,"line":69}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1479","location":{"end":{"column":110,"line":69},"start":{"column":62,"line":69}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1480","location":{"end":{"column":110,"line":69},"start":{"column":80,"line":69}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1481","location":{"end":{"column":110,"line":69},"start":{"column":80,"line":69}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1482","location":{"end":{"column":95,"line":69},"start":{"column":92,"line":69}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1483","location":{"end":{"column":4,"line":81},"start":{"column":82,"line":72}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1484","location":{"end":{"column":6,"line":79},"start":{"column":68,"line":73}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"1485","location":{"end":{"column":39,"line":74},"start":{"column":28,"line":74}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1486","location":{"end":{"column":42,"line":75},"start":{"column":16,"line":75}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"1487","location":{"end":{"column":29,"line":75},"start":{"column":17,"line":75}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1488","location":{"end":{"column":41,"line":75},"start":{"column":31,"line":75}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1489","location":{"end":{"column":55,"line":76},"start":{"column":16,"line":76}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1490","location":{"end":{"column":24,"line":77},"start":{"column":13,"line":77}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1491","location":{"end":{"column":23,"line":78},"start":{"column":13,"line":78}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1492","location":{"end":{"column":105,"line":80},"start":{"column":27,"line":80}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1493","location":{"end":{"column":104,"line":80},"start":{"column":60,"line":80}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1494","location":{"end":{"column":104,"line":80},"start":{"column":76,"line":80}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1495","location":{"end":{"column":104,"line":80},"start":{"column":76,"line":80}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1496","location":{"end":{"column":91,"line":80},"start":{"column":88,"line":80}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1497","location":{"end":{"column":4,"line":92},"start":{"column":85,"line":83}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1498","location":{"end":{"column":6,"line":90},"start":{"column":71,"line":84}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"1499","location":{"end":{"column":39,"line":85},"start":{"column":28,"line":85}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1500","location":{"end":{"column":23,"line":86},"start":{"column":16,"line":86}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"1501","location":{"end":{"column":22,"line":86},"start":{"column":17,"line":86}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1502","location":{"end":{"column":59,"line":87},"start":{"column":16,"line":87}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1503","location":{"end":{"column":29,"line":88},"start":{"column":13,"line":88}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1504","location":{"end":{"column":19,"line":89},"start":{"column":13,"line":89}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1505","location":{"end":{"column":65,"line":91},"start":{"column":27,"line":91}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1506","location":{"end":{"column":65,"line":91},"start":{"column":32,"line":91}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1507","location":{"end":{"column":65,"line":91},"start":{"column":32,"line":91}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1508","location":{"end":{"column":42,"line":91},"start":{"column":39,"line":91}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"}],"source":"import * as inquirer from 'inquirer';\n\nimport CommandTestRunner from '../test-runner/CommandTestRunner';\n\nimport Preset from './presets/Preset';\nimport PromptOption from './PromptOption';\n\nexport interface PromptResult {\n  additionalNpmDependencies: string[];\n  additionalConfig: object;\n}\n\nexport class StrykerInquirer {\n  public async promptPresets(options: Preset[]): Promise<Preset | undefined> {\n    const choices: Array<inquirer.ChoiceType<string>> = options.map(_ => _.name);\n    choices.push(new inquirer.Separator());\n    choices.push('None/other');\n    const answers = await inquirer.prompt<{ preset: string }>({\n      choices,\n      message: 'Are you using one of these frameworks? Then select a preset configuration.',\n      name: 'preset',\n      type: 'list'\n    });\n    return options.find(_ => _.name === answers.preset);\n  }\n\n  public async promptTestRunners(options: PromptOption[]): Promise<PromptOption> {\n    const choices: Array<inquirer.ChoiceType<string>> = options.map(_ => _.name);\n    choices.push(new inquirer.Separator());\n    choices.push(CommandTestRunner.runnerName);\n    const answers = await inquirer.prompt<{ testRunner: string }>({\n      choices,\n      default: 'Mocha',\n      message:\n        'Which test runner do you want to use? If your test runner isn\\'t listed here, you can choose \"command\" (it uses your `npm test` command, but will come with a big performance penalty)',\n      name: 'testRunner',\n      type: 'list'\n    });\n    return options.filter(_ => _.name === answers.testRunner)[0] || { name: CommandTestRunner.runnerName, pkg: null };\n  }\n\n  public async promptTestFrameworks(options: PromptOption[]): Promise<PromptOption> {\n    const answers = await inquirer.prompt<{ testFramework: string }>({\n      choices: options.map(_ => _.name),\n      message: 'Which test framework do you want to use?',\n      name: 'testFramework',\n      type: 'list'\n    });\n    return options.filter(_ => _.name === answers.testFramework)[0];\n  }\n\n  public async promptMutator(options: PromptOption[]): Promise<PromptOption> {\n    const answers = await inquirer.prompt<{ mutator: string }>({\n      choices: options.map(_ => _.name),\n      message: 'What kind of code do you want to mutate?',\n      name: 'mutator',\n      type: 'list'\n    });\n    return options.filter(_ => _.name === answers.mutator)[0];\n  }\n\n  public async promptTranspilers(options: PromptOption[]): Promise<PromptOption[]> {\n    const answers = await inquirer.prompt<{ transpilers: string[] }>({\n      choices: options.map(_ => _.name),\n      message: '[optional] What kind transformations should be applied to your code?',\n      name: 'transpilers',\n      type: 'checkbox'\n    });\n    return options.filter(option => answers.transpilers.some(transpilerName => option.name === transpilerName));\n  }\n\n  public async promptReporters(options: PromptOption[]): Promise<PromptOption[]> {\n    const answers = await inquirer.prompt<{ reporters: string[] }>({\n      choices: options.map(_ => _.name),\n      default: ['clear-text', 'progress'],\n      message: 'Which reporter(s) do you want to use?',\n      name: 'reporters',\n      type: 'checkbox'\n    });\n    return options.filter(option => answers.reporters.some(reporterName => option.name === reporterName));\n  }\n\n  public async promptPackageManager(options: PromptOption[]): Promise<PromptOption> {\n    const answers = await inquirer.prompt<{ packageManager: string }>({\n      choices: options.map(_ => _.name),\n      default: ['npm'],\n      message: 'Which package manager do you want to use?',\n      name: 'packageManager',\n      type: 'list'\n    });\n    return options.filter(_ => _.name === answers.packageManager)[0];\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/initializer/StrykerPresets.ts":{"language":"typescript","mutants":[{"id":"1509","location":{"end":{"column":93,"line":7},"start":{"column":34,"line":7}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"}],"source":"import { AngularPreset } from './presets/AngularPreset';\nimport Preset from './presets/Preset';\nimport { ReactPreset } from './presets/ReactPreset';\nimport { VueJsPreset } from './presets/VueJsPreset';\n\n// Add new presets here\nconst strykerPresets: Preset[] = [new AngularPreset(), new ReactPreset(), new VueJsPreset()];\nexport default strykerPresets;\n"},"/home/runner/work/stryker/stryker/packages/core/src/initializer/index.ts":{"language":"typescript","mutants":[{"id":"1510","location":{"end":{"column":46,"line":15},"start":{"column":25,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1511","location":{"end":{"column":49,"line":16},"start":{"column":26,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1512","location":{"end":{"column":2,"line":30},"start":{"column":58,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1513","location":{"end":{"column":84,"line":24},"start":{"column":73,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1514","location":{"end":{"column":72,"line":25},"start":{"column":67,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"}],"source":"import { commonTokens } from '@stryker-mutator/api/plugin';\nimport { getLogger } from 'log4js';\nimport { rootInjector } from 'typed-inject';\nimport { RestClient } from 'typed-rest-client';\n\nimport { loggerFactory } from '../di/factoryMethods';\n\nimport * as initializerTokens from './initializerTokens';\nimport NpmClient from './NpmClient';\nimport StrykerConfigWriter from './StrykerConfigWriter';\nimport StrykerInitializer from './StrykerInitializer';\nimport { StrykerInquirer } from './StrykerInquirer';\nimport strykerPresets from './StrykerPresets';\n\nconst BASE_NPM_SEARCH = 'https://api.npms.io';\nconst BASE_NPM_PACKAGE = 'https://www.unpkg.com';\n\nexport function initializerFactory(): StrykerInitializer {\n  return rootInjector\n    .provideValue(commonTokens.getLogger, getLogger)\n    .provideFactory(commonTokens.logger, loggerFactory)\n    .provideValue(initializerTokens.out, console.log)\n    .provideValue(initializerTokens.strykerPresets, strykerPresets)\n    .provideValue(initializerTokens.restClientNpmSearch, new RestClient('npmSearch', BASE_NPM_SEARCH))\n    .provideValue(initializerTokens.restClientNpm, new RestClient('npm', BASE_NPM_PACKAGE))\n    .provideClass(initializerTokens.npmClient, NpmClient)\n    .provideClass(initializerTokens.configWriter, StrykerConfigWriter)\n    .provideClass(initializerTokens.inquirer, StrykerInquirer)\n    .injectClass(StrykerInitializer);\n}\n\nexport { initializerTokens };\n"},"/home/runner/work/stryker/stryker/packages/core/src/initializer/initializerTokens.ts":{"language":"typescript","mutants":[{"id":"1515","location":{"end":{"column":57,"line":1},"start":{"column":36,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1516","location":{"end":{"column":45,"line":2},"start":{"column":30,"line":2}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1517","location":{"end":{"column":37,"line":3},"start":{"column":26,"line":3}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1518","location":{"end":{"column":47,"line":4},"start":{"column":31,"line":4}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1519","location":{"end":{"column":43,"line":5},"start":{"column":29,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1520","location":{"end":{"column":35,"line":6},"start":{"column":25,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1521","location":{"end":{"column":25,"line":7},"start":{"column":20,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"export const restClientNpmSearch = 'restClientNpmSearch';\nexport const restClientNpm = 'restClientNpm';\nexport const npmClient = 'npmClient';\nexport const strykerPresets = 'strykerPresets';\nexport const configWriter = 'configWriter';\nexport const inquirer = 'inquirer';\nexport const out = 'out';\n"},"/home/runner/work/stryker/stryker/packages/core/src/initializer/presets/AngularPreset.ts":{"language":"typescript","mutants":[{"id":"1522","location":{"end":{"column":120,"line":6},"start":{"column":21,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1523","location":{"end":{"column":39,"line":9},"start":{"column":26,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1524","location":{"end":{"column":4,"line":16},"start":{"column":35,"line":11}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"1525","location":{"end":{"column":28,"line":12},"start":{"column":5,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1526","location":{"end":{"column":36,"line":13},"start":{"column":5,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1527","location":{"end":{"column":34,"line":14},"start":{"column":5,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1528","location":{"end":{"column":37,"line":15},"start":{"column":5,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1529","location":{"end":{"column":7,"line":38},"start":{"column":29,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1530","location":{"end":{"column":29,"line":35},"start":{"column":28,"line":35}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Survived"},{"id":"1531","location":{"end":{"column":4,"line":41},"start":{"column":61,"line":39}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1532","location":{"end":{"column":81,"line":40},"start":{"column":12,"line":40}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"}],"source":"import * as os from 'os';\n\nimport Preset from './Preset';\nimport PresetConfiguration from './PresetConfiguration';\n\nconst handbookUrl = 'https://github.com/stryker-mutator/stryker-handbook/blob/master/stryker/guides/angular.md#angular';\n\nexport class AngularPreset implements Preset {\n  public readonly name = 'angular-cli';\n  // Please keep config in sync with handbook\n  private readonly dependencies = [\n    '@stryker-mutator/core',\n    '@stryker-mutator/karma-runner',\n    '@stryker-mutator/typescript',\n    '@stryker-mutator/html-reporter'\n  ];\n  private readonly config = `{\n        mutate: [\n          'src/**/*.ts',\n          '!src/**/*.spec.ts',\n          '!src/test.ts',\n          '!src/environments/*.ts'\n        ],\n        mutator: 'typescript',\n        testRunner: 'karma',\n        karma: {\n          configFile: 'src/karma.conf.js',\n          projectType: 'angular-cli',\n          config: {\n            browsers: ['ChromeHeadless']\n          }\n        },\n        reporters: ['progress', 'clear-text', 'html'],\n        maxConcurrentTestRunners: ${Math.floor(\n          os.cpus().length / 2\n        )}, // Recommended to use about half of your available cores when running stryker with angular.\n        coverageAnalysis: 'off'\n    }`;\n  public async createConfig(): Promise<PresetConfiguration> {\n    return { config: this.config, handbookUrl, dependencies: this.dependencies };\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/initializer/presets/ReactPreset.ts":{"language":"typescript","mutants":[{"id":"1533","location":{"end":{"column":116,"line":5},"start":{"column":21,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1534","location":{"end":{"column":33,"line":12},"start":{"column":26,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1535","location":{"end":{"column":133,"line":13},"start":{"column":42,"line":13}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"1536","location":{"end":{"column":66,"line":13},"start":{"column":43,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1537","location":{"end":{"column":98,"line":13},"start":{"column":68,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1538","location":{"end":{"column":132,"line":13},"start":{"column":100,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1539","location":{"end":{"column":4,"line":21},"start":{"column":35,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1540","location":{"end":{"column":98,"line":23},"start":{"column":38,"line":23}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"1541","location":{"end":{"column":68,"line":23},"start":{"column":39,"line":23}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1542","location":{"end":{"column":7,"line":28},"start":{"column":30,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1543","location":{"end":{"column":106,"line":30},"start":{"column":38,"line":30}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"1544","location":{"end":{"column":76,"line":30},"start":{"column":39,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1545","location":{"end":{"column":7,"line":35},"start":{"column":30,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1546","location":{"end":{"column":4,"line":46},"start":{"column":61,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1547","location":{"end":{"column":71,"line":38},"start":{"column":57,"line":38}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"1548","location":{"end":{"column":63,"line":38},"start":{"column":58,"line":38}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1549","location":{"end":{"column":70,"line":38},"start":{"column":65,"line":38}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1550","location":{"end":{"column":6,"line":44},"start":{"column":63,"line":39}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"1551","location":{"end":{"column":65,"line":41},"start":{"column":16,"line":41}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1552","location":{"end":{"column":21,"line":42},"start":{"column":13,"line":42}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1553","location":{"end":{"column":19,"line":43},"start":{"column":13,"line":43}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1554","location":{"end":{"column":4,"line":55},"start":{"column":53,"line":47}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1555","location":{"end":{"column":25,"line":48},"start":{"column":9,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1556","location":{"end":{"column":25,"line":48},"start":{"column":9,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1557","location":{"end":{"column":19,"line":48},"start":{"column":16,"line":48}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"1558","location":{"end":{"column":25,"line":48},"start":{"column":20,"line":48}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1559","location":{"end":{"column":6,"line":50},"start":{"column":27,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1560","location":{"end":{"column":87,"line":49},"start":{"column":14,"line":49}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1561","location":{"end":{"column":32,"line":50},"start":{"column":16,"line":50}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1562","location":{"end":{"column":32,"line":50},"start":{"column":16,"line":50}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1563","location":{"end":{"column":26,"line":50},"start":{"column":23,"line":50}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1564","location":{"end":{"column":32,"line":50},"start":{"column":27,"line":50}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1565","location":{"end":{"column":6,"line":52},"start":{"column":34,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1566","location":{"end":{"column":87,"line":51},"start":{"column":14,"line":51}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1567","location":{"end":{"column":6,"line":54},"start":{"column":12,"line":52}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1568","location":{"end":{"column":55,"line":53},"start":{"column":23,"line":53}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"}],"source":"import inquirer = require('inquirer');\nimport Preset from './Preset';\nimport PresetConfiguration from './PresetConfiguration';\n\nconst handbookUrl = 'https://github.com/stryker-mutator/stryker-handbook/blob/master/stryker/guides/react.md#react';\n\n/**\n * More information can be found in the Stryker handbook:\n * https://github.com/stryker-mutator/stryker-handbook/blob/master/stryker/guides/react.md#react\n */\nexport class ReactPreset implements Preset {\n  public readonly name = 'react';\n  private readonly generalDependencies = ['@stryker-mutator/core', '@stryker-mutator/jest-runner', '@stryker-mutator/html-reporter'];\n\n  private readonly sharedConfig = `testRunner: 'jest',\n    reporters: ['progress', 'clear-text', 'html'],\n    coverageAnalysis: 'off',\n    jest: {\n      projectType: 'react'\n    }\n  `;\n\n  private readonly tsxDependencies = ['@stryker-mutator/typescript', ...this.generalDependencies];\n  private readonly tsxConf = `{\n      mutate: ['src/**/*.ts?(x)', '!src/**/*@(.test|.spec|Spec).ts?(x)'],\n      mutator: 'typescript',\n      ${this.sharedConfig}\n    }`;\n\n  private readonly jsxDependencies = ['@stryker-mutator/javascript-mutator', ...this.generalDependencies];\n  private readonly jsxConf = `{\n      mutate: ['src/**/*.js?(x)', '!src/**/*@(.test|.spec|Spec).js?(x)'],\n      mutator: 'javascript',\n      ${this.sharedConfig}\n    }`;\n\n  public async createConfig(): Promise<PresetConfiguration> {\n    const choices: Array<inquirer.ChoiceType<string>> = ['JSX', 'TSX'];\n    const answers = await inquirer.prompt<{ choice: string }>({\n      choices,\n      message: 'Is your project a JSX project or a TSX project?',\n      name: 'choice',\n      type: 'list'\n    });\n    return this.load(answers.choice);\n  }\n  private load(choice: string): PresetConfiguration {\n    if (choice === 'JSX') {\n      return { config: this.jsxConf, handbookUrl, dependencies: this.jsxDependencies };\n    } else if (choice === 'TSX') {\n      return { config: this.tsxConf, handbookUrl, dependencies: this.tsxDependencies };\n    } else {\n      throw new Error(`Invalid project type ${choice}`);\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/initializer/presets/VueJsPreset.ts":{"language":"typescript","mutants":[{"id":"1569","location":{"end":{"column":116,"line":5},"start":{"column":21,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1570","location":{"end":{"column":33,"line":12},"start":{"column":26,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1571","location":{"end":{"column":133,"line":13},"start":{"column":42,"line":13}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"CompileError"},{"id":"1572","location":{"end":{"column":66,"line":13},"start":{"column":43,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1573","location":{"end":{"column":98,"line":13},"start":{"column":68,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1574","location":{"end":{"column":132,"line":13},"start":{"column":100,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1575","location":{"end":{"column":67,"line":15},"start":{"column":37,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1576","location":{"end":{"column":7,"line":25},"start":{"column":31,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1577","location":{"end":{"column":69,"line":27},"start":{"column":38,"line":27}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1578","location":{"end":{"column":7,"line":40},"start":{"column":32,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1579","location":{"end":{"column":4,"line":64},"start":{"column":61,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1580","location":{"end":{"column":84,"line":43},"start":{"column":67,"line":43}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"1581","location":{"end":{"column":75,"line":43},"start":{"column":68,"line":43}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1582","location":{"end":{"column":83,"line":43},"start":{"column":77,"line":43}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1583","location":{"end":{"column":6,"line":49},"start":{"column":77,"line":44}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"1584","location":{"end":{"column":55,"line":46},"start":{"column":16,"line":46}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1585","location":{"end":{"column":25,"line":47},"start":{"column":13,"line":47}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1586","location":{"end":{"column":19,"line":48},"start":{"column":13,"line":48}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1587","location":{"end":{"column":91,"line":50},"start":{"column":63,"line":50}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"1588","location":{"end":{"column":76,"line":50},"start":{"column":64,"line":50}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1589","location":{"end":{"column":90,"line":50},"start":{"column":78,"line":50}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1590","location":{"end":{"column":6,"line":56},"start":{"column":69,"line":51}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"1591","location":{"end":{"column":55,"line":53},"start":{"column":16,"line":53}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1592","location":{"end":{"column":21,"line":54},"start":{"column":13,"line":54}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1593","location":{"end":{"column":19,"line":55},"start":{"column":13,"line":55}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1594","location":{"end":{"column":6,"line":63},"start":{"column":12,"line":59}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1595","location":{"end":{"column":4,"line":74},"start":{"column":47,"line":66}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1596","location":{"end":{"column":31,"line":67},"start":{"column":9,"line":67}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1597","location":{"end":{"column":31,"line":67},"start":{"column":9,"line":67}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1598","location":{"end":{"column":23,"line":67},"start":{"column":20,"line":67}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"1599","location":{"end":{"column":31,"line":67},"start":{"column":24,"line":67}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1600","location":{"end":{"column":6,"line":69},"start":{"column":33,"line":67}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1601","location":{"end":{"column":37,"line":69},"start":{"column":16,"line":69}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1602","location":{"end":{"column":37,"line":69},"start":{"column":16,"line":69}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1603","location":{"end":{"column":30,"line":69},"start":{"column":27,"line":69}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1604","location":{"end":{"column":37,"line":69},"start":{"column":31,"line":69}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1605","location":{"end":{"column":6,"line":71},"start":{"column":39,"line":69}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1606","location":{"end":{"column":6,"line":73},"start":{"column":12,"line":71}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1607","location":{"end":{"column":66,"line":72},"start":{"column":23,"line":72}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1608","location":{"end":{"column":4,"line":81},"start":{"column":76,"line":76}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1609","location":{"end":{"column":4,"line":91},"start":{"column":55,"line":83}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1610","location":{"end":{"column":32,"line":84},"start":{"column":9,"line":84}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1611","location":{"end":{"column":32,"line":84},"start":{"column":9,"line":84}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1612","location":{"end":{"column":19,"line":84},"start":{"column":16,"line":84}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"1613","location":{"end":{"column":32,"line":84},"start":{"column":20,"line":84}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1614","location":{"end":{"column":6,"line":86},"start":{"column":34,"line":84}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1615","location":{"end":{"column":43,"line":85},"start":{"column":14,"line":85}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1616","location":{"end":{"column":39,"line":86},"start":{"column":16,"line":86}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1617","location":{"end":{"column":39,"line":86},"start":{"column":16,"line":86}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1618","location":{"end":{"column":26,"line":86},"start":{"column":23,"line":86}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1619","location":{"end":{"column":39,"line":86},"start":{"column":27,"line":86}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1620","location":{"end":{"column":6,"line":88},"start":{"column":41,"line":86}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1621","location":{"end":{"column":51,"line":87},"start":{"column":14,"line":87}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1622","location":{"end":{"column":6,"line":90},"start":{"column":12,"line":88}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1623","location":{"end":{"column":57,"line":89},"start":{"column":23,"line":89}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1624","location":{"end":{"column":4,"line":101},"start":{"column":63,"line":93}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1625","location":{"end":{"column":31,"line":94},"start":{"column":9,"line":94}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1626","location":{"end":{"column":31,"line":94},"start":{"column":9,"line":94}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1627","location":{"end":{"column":23,"line":94},"start":{"column":20,"line":94}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"1628","location":{"end":{"column":31,"line":94},"start":{"column":24,"line":94}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1629","location":{"end":{"column":6,"line":96},"start":{"column":33,"line":94}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1630","location":{"end":{"column":37,"line":96},"start":{"column":16,"line":96}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1631","location":{"end":{"column":37,"line":96},"start":{"column":16,"line":96}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1632","location":{"end":{"column":30,"line":96},"start":{"column":27,"line":96}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1633","location":{"end":{"column":37,"line":96},"start":{"column":31,"line":96}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1634","location":{"end":{"column":6,"line":98},"start":{"column":39,"line":96}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1635","location":{"end":{"column":6,"line":100},"start":{"column":12,"line":98}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1636","location":{"end":{"column":66,"line":99},"start":{"column":23,"line":99}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"}],"source":"import inquirer = require('inquirer');\nimport Preset from './Preset';\nimport PresetConfiguration from './PresetConfiguration';\n\nconst handbookUrl = 'https://github.com/stryker-mutator/stryker-handbook/blob/master/stryker/guides/vuejs.md#vuejs';\n\n/**\n * More information can be found in the Stryker handbook:\n * https://github.com/stryker-mutator/stryker-handbook/blob/master/stryker/guides/vuejs.md#vuejs\n */\nexport class VueJsPreset implements Preset {\n  public readonly name = 'vueJs';\n  private readonly generalDependencies = ['@stryker-mutator/core', '@stryker-mutator/vue-mutator', '@stryker-mutator/html-reporter'];\n\n  private readonly jestDependency = '@stryker-mutator/jest-runner';\n  private readonly jestConf = `{\n      mutate: ['src/**/*.js', 'src/**/*.ts', 'src/**/*.vue'],\n      mutator: 'vue',\n      testRunner: 'jest',\n      jest: {\n        // config: require('path/to/your/custom/jestConfig.js')\n      },\n      reporters: ['progress', 'clear-text', 'html'],\n      coverageAnalysis: 'off'\n    }`;\n\n  private readonly karmaDependency = '@stryker-mutator/karma-runner';\n  private readonly karmaConf = `{\n      mutate: ['src/**/*.js', 'src/**/*.ts', 'src/**/*.vue'],\n      mutator: 'vue',\n      testRunner: 'karma',\n      karma: {\n        configFile: 'test/unit/karma.conf.js',\n        config: {\n          browsers: ['ChromeHeadless']\n        }\n      },\n      reporters: ['progress', 'clear-text', 'html'],\n      coverageAnalysis: 'off'\n    }`;\n\n  public async createConfig(): Promise<PresetConfiguration> {\n    const testRunnerChoices: Array<inquirer.ChoiceType<string>> = ['karma', 'jest'];\n    const testRunnerAnswers = await inquirer.prompt<{ testRunner: string }>({\n      choices: testRunnerChoices,\n      message: 'Which test runner do you want to use?',\n      name: 'testRunner',\n      type: 'list'\n    });\n    const scriptChoices: Array<inquirer.ChoiceType<string>> = ['typescript', 'javascript'];\n    const scriptAnswers = await inquirer.prompt<{ script: string }>({\n      choices: scriptChoices,\n      message: 'Which language does your project use?',\n      name: 'script',\n      type: 'list'\n    });\n    const chosenTestRunner = testRunnerAnswers.testRunner;\n    const chosenScript = scriptAnswers.script;\n    return {\n      config: this.getConfigString(chosenTestRunner),\n      dependencies: this.createDependencies(chosenTestRunner, chosenScript),\n      handbookUrl\n    };\n  }\n\n  private getConfigString(testRunner: string) {\n    if (testRunner === 'karma') {\n      return this.karmaConf;\n    } else if (testRunner === 'jest') {\n      return this.jestConf;\n    } else {\n      throw new Error(`Invalid test runner chosen: ${testRunner}`);\n    }\n  }\n\n  private createDependencies(testRunner: string, script: string): string[] {\n    const dependencies = this.generalDependencies;\n    dependencies.push(this.getTestRunnerDependency(testRunner));\n    dependencies.push(this.getScriptDependency(script));\n    return dependencies;\n  }\n\n  private getScriptDependency(script: string): string {\n    if (script === 'typescript') {\n      return '@stryker-mutator/typescript';\n    } else if (script === 'javascript') {\n      return '@stryker-mutator/javascript-mutator';\n    } else {\n      throw new Error(`Invalid script chosen: ${script}`);\n    }\n  }\n\n  private getTestRunnerDependency(testRunner: string): string {\n    if (testRunner === 'karma') {\n      return this.karmaDependency;\n    } else if (testRunner === 'jest') {\n      return this.jestDependency;\n    } else {\n      throw new Error(`Invalid test runner chosen: ${testRunner}`);\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/input/InputFileCollection.ts":{"language":"typescript","mutants":[{"id":"1637","location":{"end":{"column":4,"line":14},"start":{"column":76,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1638","location":{"end":{"column":96,"line":13},"start":{"column":39,"line":13}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1639","location":{"end":{"column":95,"line":13},"start":{"column":69,"line":13}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1640","location":{"end":{"column":95,"line":13},"start":{"column":77,"line":13}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1641","location":{"end":{"column":95,"line":13},"start":{"column":77,"line":13}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1642","location":{"end":{"column":85,"line":13},"start":{"column":82,"line":13}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1643","location":{"end":{"column":4,"line":49},"start":{"column":32,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1644","location":{"end":{"column":27,"line":17},"start":{"column":9,"line":17}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1645","location":{"end":{"column":27,"line":17},"start":{"column":9,"line":17}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1646","location":{"end":{"column":27,"line":17},"start":{"column":9,"line":17}},"mutatorName":"BooleanLiteral","replacement":"this.files.length","status":"Killed"},{"id":"1647","location":{"end":{"column":6,"line":23},"start":{"column":29,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1648","location":{"end":{"column":68,"line":20},"start":{"column":67,"line":20}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"1649","location":{"end":{"column":68,"line":19},"start":{"column":67,"line":19}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"1650","location":{"end":{"column":66,"line":19},"start":{"column":9,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1651","location":{"end":{"column":66,"line":20},"start":{"column":11,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1652","location":{"end":{"column":106,"line":21},"start":{"column":11,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1653","location":{"end":{"column":6,"line":48},"start":{"column":12,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1654","location":{"end":{"column":36,"line":24},"start":{"column":11,"line":24}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1655","location":{"end":{"column":36,"line":24},"start":{"column":11,"line":24}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1656","location":{"end":{"column":8,"line":26},"start":{"column":38,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1657","location":{"end":{"column":101,"line":25},"start":{"column":18,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1658","location":{"end":{"column":8,"line":31},"start":{"column":14,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1659","location":{"end":{"column":120,"line":29},"start":{"column":32,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1660","location":{"end":{"column":31,"line":32},"start":{"column":11,"line":32}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1661","location":{"end":{"column":31,"line":32},"start":{"column":11,"line":32}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1662","location":{"end":{"column":8,"line":47},"start":{"column":33,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1663","location":{"end":{"column":14,"line":38},"start":{"column":11,"line":34}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1664","location":{"end":{"column":45,"line":35},"start":{"column":28,"line":35}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage"},{"id":"1665","location":{"end":{"column":14,"line":45},"start":{"column":11,"line":41}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1666","location":{"end":{"column":53,"line":42},"start":{"column":36,"line":42}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage"}],"source":"import { File } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { normalizeWhitespaces } from '@stryker-mutator/util';\n\nimport os = require('os');\n\nexport default class InputFileCollection {\n  public readonly files: readonly File[];\n  public readonly filesToMutate: readonly File[];\n\n  constructor(files: readonly File[], mutateGlobResult: readonly string[]) {\n    this.files = files;\n    this.filesToMutate = files.filter(file => mutateGlobResult.some(name => name === file.name));\n  }\n\n  public logFiles(log: Logger) {\n    if (!this.files.length) {\n      log.warn(\n        `No files selected. Please make sure you either${os.EOL}` +\n          ` (1) Run Stryker inside a Git repository; or${os.EOL}` +\n          ' (2) Specify the `files` property in your Stryker configuration (`--files via command line`).'\n      );\n    } else {\n      if (this.filesToMutate.length) {\n        log.info(`Found ${this.filesToMutate.length} of ${this.files.length} file(s) to be mutated.`);\n      } else {\n        log.warn(\n          normalizeWhitespaces(`No files marked to be mutated, Stryker will perform a dry-run without actually mutating anything.\n        You can configure the \\`mutate\\` property in your stryker.conf.js file (or use \\`--mutate\\` via command line).`)\n        );\n      }\n      if (log.isDebugEnabled()) {\n        log.debug(\n          `All input files: ${JSON.stringify(\n            this.files.map(file => file.name),\n            null,\n            2\n          )}`\n        );\n        log.debug(\n          `Files to mutate: ${JSON.stringify(\n            this.filesToMutate.map(file => file.name),\n            null,\n            2\n          )}`\n        );\n      }\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/input/InputFileResolver.ts":{"language":"typescript","mutants":[{"id":"1667","location":{"end":{"column":2,"line":22},"start":{"column":53,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1668","location":{"end":{"column":4,"line":21},"start":{"column":10,"line":18}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1669","location":{"end":{"column":37,"line":24},"start":{"column":34,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1670","location":{"end":{"column":4,"line":38},"start":{"column":136,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1671","location":{"end":{"column":39,"line":34},"start":{"column":27,"line":34}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1672","location":{"end":{"column":39,"line":34},"start":{"column":27,"line":34}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1673","location":{"end":{"column":36,"line":34},"start":{"column":34,"line":34}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"1674","location":{"end":{"column":39,"line":34},"start":{"column":37,"line":34}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"1675","location":{"end":{"column":14,"line":35},"start":{"column":9,"line":35}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1676","location":{"end":{"column":14,"line":35},"start":{"column":9,"line":35}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1677","location":{"end":{"column":6,"line":37},"start":{"column":16,"line":35}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1678","location":{"end":{"column":4,"line":47},"start":{"column":56,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1679","location":{"end":{"column":114,"line":41},"start":{"column":61,"line":41}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"1680","location":{"end":{"column":4,"line":55},"start":{"column":31,"line":49}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1681","location":{"end":{"column":26,"line":50},"start":{"column":9,"line":50}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1682","location":{"end":{"column":26,"line":50},"start":{"column":9,"line":50}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1683","location":{"end":{"column":6,"line":52},"start":{"column":28,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1684","location":{"end":{"column":6,"line":54},"start":{"column":12,"line":52}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1685","location":{"end":{"column":4,"line":72},"start":{"column":32,"line":57}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1686","location":{"end":{"column":101,"line":58},"start":{"column":45,"line":58}},"mutatorName":"BooleanLiteral","replacement":"shallowEquals(this.mutatePatterns, new Config().mutate)","status":"Killed"},{"id":"1687","location":{"end":{"column":6,"line":71},"start":{"column":87,"line":60}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1688","location":{"end":{"column":38,"line":61},"start":{"column":11,"line":61}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1689","location":{"end":{"column":38,"line":61},"start":{"column":11,"line":61}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1690","location":{"end":{"column":26,"line":61},"start":{"column":23,"line":61}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"1691","location":{"end":{"column":8,"line":63},"start":{"column":40,"line":61}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1692","location":{"end":{"column":21,"line":62},"start":{"column":16,"line":62}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"1693","location":{"end":{"column":8,"line":70},"start":{"column":14,"line":63}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1694","location":{"end":{"column":40,"line":64},"start":{"column":25,"line":64}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1695","location":{"end":{"column":28,"line":64},"start":{"column":27,"line":64}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Survived"},{"id":"1696","location":{"end":{"column":28,"line":64},"start":{"column":27,"line":64}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"1697","location":{"end":{"column":45,"line":64},"start":{"column":42,"line":64}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Timeout"},{"id":"1698","location":{"end":{"column":10,"line":68},"start":{"column":47,"line":64}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1699","location":{"end":{"column":34,"line":65},"start":{"column":15,"line":65}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1700","location":{"end":{"column":34,"line":65},"start":{"column":15,"line":65}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1701","location":{"end":{"column":26,"line":65},"start":{"column":23,"line":65}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"1702","location":{"end":{"column":12,"line":67},"start":{"column":36,"line":65}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1703","location":{"end":{"column":25,"line":66},"start":{"column":20,"line":66}},"mutatorName":"BooleanLiteral","replacement":"true","status":"NoCoverage"},{"id":"1704","location":{"end":{"column":20,"line":69},"start":{"column":16,"line":69}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"1705","location":{"end":{"column":83,"line":79},"start":{"column":79,"line":79}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"1706","location":{"end":{"column":4,"line":91},"start":{"column":104,"line":79}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1707","location":{"end":{"column":6,"line":89},"start":{"column":37,"line":81}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1708","location":{"end":{"column":55,"line":82},"start":{"column":11,"line":82}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1709","location":{"end":{"column":55,"line":82},"start":{"column":11,"line":82}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1710","location":{"end":{"column":8,"line":85},"start":{"column":57,"line":82}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1711","location":{"end":{"column":59,"line":84},"start":{"column":23,"line":84}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1712","location":{"end":{"column":8,"line":88},"start":{"column":14,"line":85}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1713","location":{"end":{"column":56,"line":87},"start":{"column":23,"line":87}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1714","location":{"end":{"column":4,"line":99},"start":{"column":112,"line":93}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1715","location":{"end":{"column":102,"line":94},"start":{"column":60,"line":94}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1716","location":{"end":{"column":53,"line":95},"start":{"column":9,"line":95}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1717","location":{"end":{"column":53,"line":95},"start":{"column":9,"line":95}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1718","location":{"end":{"column":29,"line":95},"start":{"column":27,"line":95}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"1719","location":{"end":{"column":26,"line":95},"start":{"column":9,"line":95}},"mutatorName":"BooleanLiteral","replacement":"fileNames.length","status":"Killed"},{"id":"1720","location":{"end":{"column":6,"line":97},"start":{"column":55,"line":95}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1721","location":{"end":{"column":95,"line":96},"start":{"column":21,"line":96}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1722","location":{"end":{"column":4,"line":123},"start":{"column":59,"line":101}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1723","location":{"end":{"column":6,"line":113},"start":{"column":9,"line":102}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1724","location":{"end":{"column":144,"line":103},"start":{"column":60,"line":103}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1725","location":{"end":{"column":8,"line":105},"start":{"column":146,"line":103}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"1726","location":{"end":{"column":31,"line":104},"start":{"column":30,"line":104}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Killed"},{"id":"1727","location":{"end":{"column":24,"line":104},"start":{"column":23,"line":104}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Killed"},{"id":"1728","location":{"end":{"column":20,"line":108},"start":{"column":16,"line":108}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1729","location":{"end":{"column":33,"line":109},"start":{"column":14,"line":109}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1730","location":{"end":{"column":29,"line":110},"start":{"column":17,"line":110}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1731","location":{"end":{"column":64,"line":111},"start":{"column":14,"line":111}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1732","location":{"end":{"column":6,"line":122},"start":{"column":21,"line":113}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1733","location":{"end":{"column":44,"line":118},"start":{"column":11,"line":116}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1734","location":{"end":{"column":4,"line":127},"start":{"column":54,"line":125}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1735","location":{"end":{"column":4,"line":131},"start":{"column":49,"line":129}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1736","location":{"end":{"column":4,"line":135},"start":{"column":55,"line":133}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1737","location":{"end":{"column":69,"line":134},"start":{"column":34,"line":134}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1738","location":{"end":{"column":4,"line":153},"start":{"column":60,"line":137}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1739","location":{"end":{"column":61,"line":140},"start":{"column":13,"line":140}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1740","location":{"end":{"column":8,"line":144},"start":{"column":29,"line":141}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1741","location":{"end":{"column":8,"line":152},"start":{"column":23,"line":145}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1742","location":{"end":{"column":92,"line":146},"start":{"column":13,"line":146}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1743","location":{"end":{"column":92,"line":146},"start":{"column":13,"line":146}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1744","location":{"end":{"column":68,"line":146},"start":{"column":66,"line":146}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"1745","location":{"end":{"column":64,"line":146},"start":{"column":14,"line":146}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1746","location":{"end":{"column":64,"line":146},"start":{"column":14,"line":146}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1747","location":{"end":{"column":40,"line":146},"start":{"column":38,"line":146}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"1748","location":{"end":{"column":64,"line":146},"start":{"column":41,"line":146}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1749","location":{"end":{"column":64,"line":146},"start":{"column":41,"line":146}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1750","location":{"end":{"column":55,"line":146},"start":{"column":52,"line":146}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1751","location":{"end":{"column":64,"line":146},"start":{"column":56,"line":146}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1752","location":{"end":{"column":83,"line":146},"start":{"column":80,"line":146}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1753","location":{"end":{"column":92,"line":146},"start":{"column":84,"line":146}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1754","location":{"end":{"column":10,"line":148},"start":{"column":94,"line":146}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1755","location":{"end":{"column":10,"line":151},"start":{"column":16,"line":148}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import * as path from 'path';\n\nimport { Config } from '@stryker-mutator/api/config';\nimport { File, StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { SourceFile } from '@stryker-mutator/api/report';\nimport { childProcessAsPromised, fsAsPromised, isErrnoException, normalizeWhitespaces, StrykerError } from '@stryker-mutator/util';\n\nimport { coreTokens } from '../di';\nimport StrictReporter from '../reporters/StrictReporter';\nimport { glob } from '../utils/fileUtils';\nimport { filterEmpty } from '../utils/objectUtils';\n\nimport InputFileCollection from './InputFileCollection';\n\nfunction toReportSourceFile(file: File): SourceFile {\n  return {\n    content: file.textContent,\n    path: file.name\n  };\n}\n\nconst IGNORE_PATTERN_CHARACTER = '!';\n\nexport default class InputFileResolver {\n  private readonly mutatePatterns: readonly string[];\n  private readonly filePatterns: readonly string[] | undefined;\n  private readonly tempDirName: string;\n\n  public static inject = tokens(commonTokens.logger, commonTokens.options, coreTokens.reporter);\n  constructor(private readonly log: Logger, { mutate, files, tempDirName }: StrykerOptions, private readonly reporter: StrictReporter) {\n    this.tempDirName = tempDirName;\n    this.mutatePatterns = mutate || [];\n    if (files) {\n      this.filePatterns = files;\n    }\n  }\n\n  public async resolve(): Promise<InputFileCollection> {\n    const [inputFileNames, mutateFiles] = await Promise.all([this.resolveInputFiles(), this.resolveMutateFiles()]);\n    const files: File[] = await this.readFiles(inputFileNames);\n    const inputFileCollection = new InputFileCollection(files, mutateFiles);\n    this.reportAllSourceFilesRead(files);\n    inputFileCollection.logFiles(this.log);\n    return inputFileCollection;\n  }\n\n  private resolveInputFiles() {\n    if (this.filePatterns) {\n      return this.expand(this.filePatterns);\n    } else {\n      return this.resolveFilesUsingGit();\n    }\n  }\n\n  private resolveMutateFiles() {\n    return this.expand(this.mutatePatterns, !shallowEquals(this.mutatePatterns, new Config().mutate));\n\n    function shallowEquals(arr1: readonly string[], arr2: readonly string[]): boolean {\n      if (arr1.length !== arr2.length) {\n        return false;\n      } else {\n        for (let i = 0; i < arr1.length; i++) {\n          if (arr1[i] !== arr2[i]) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Takes a list of globbing patterns and expands them into files.\n   * If a patterns starts with a `!`, it negates the pattern.\n   * @param patterns The patterns to expand into files\n   */\n  private async expand(patterns: readonly string[], logAboutUselessPatterns = true): Promise<string[]> {\n    const fileSet = new Set<string>();\n    for (const pattern of patterns) {\n      if (pattern.startsWith(IGNORE_PATTERN_CHARACTER)) {\n        const files = await this.expandPattern(pattern.substr(1), logAboutUselessPatterns);\n        files.forEach(fileName => fileSet.delete(fileName));\n      } else {\n        const files = await this.expandPattern(pattern, logAboutUselessPatterns);\n        files.forEach(fileName => fileSet.add(fileName));\n      }\n    }\n    return Array.from(fileSet);\n  }\n\n  private async expandPattern(globbingExpression: string, logAboutUselessPatterns: boolean): Promise<string[]> {\n    const fileNames = (await glob(globbingExpression)).map(relativeFile => path.resolve(relativeFile));\n    if (!fileNames.length && logAboutUselessPatterns) {\n      this.log.warn(`Globbing expression \"${globbingExpression}\" did not result in any files.`);\n    }\n    return fileNames;\n  }\n\n  private async resolveFilesUsingGit(): Promise<string[]> {\n    try {\n      const { stdout } = await childProcessAsPromised.exec(`git ls-files --others --exclude-standard --cached --exclude /${this.tempDirName}/*`, {\n        maxBuffer: 10 * 1000 * 1024\n      });\n      const fileNames = stdout\n        .toString()\n        .split('\\n')\n        .map(line => line.trim())\n        .filter(line => line) // remove empty lines\n        .map(relativeFileName => path.resolve(relativeFileName));\n      return fileNames;\n    } catch (error) {\n      throw new StrykerError(\n        normalizeWhitespaces(\n          `Cannot determine input files. Either specify a \\`files\\`\n        array in your stryker configuration, or make sure \"${process.cwd()}\"\n        is located inside a git repository`\n        ),\n        error\n      );\n    }\n  }\n\n  private reportAllSourceFilesRead(allFiles: File[]) {\n    this.reporter.onAllSourceFilesRead(allFiles.map(toReportSourceFile));\n  }\n\n  private reportSourceFilesRead(textFile: File) {\n    this.reporter.onSourceFileRead(toReportSourceFile(textFile));\n  }\n\n  private readFiles(files: string[]): Promise<File[]> {\n    return Promise.all(files.map(fileName => this.readFile(fileName))).then(filterEmpty);\n  }\n\n  private readFile(fileName: string): Promise<File | null> {\n    return fsAsPromised\n      .readFile(fileName)\n      .then((content: Buffer) => new File(fileName, content))\n      .then((file: File) => {\n        this.reportSourceFilesRead(file);\n        return file;\n      })\n      .catch(error => {\n        if ((isErrnoException(error) && error.code === 'ENOENT') || error.code === 'EISDIR') {\n          return null; // file is deleted or a directory. This can be a valid result of the git command\n        } else {\n          // Rethrow\n          throw error;\n        }\n      });\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/logging/LogConfigurator.ts":{"language":"typescript","mutants":[{"id":"1756","location":{"end":{"column":16,"line":10},"start":{"column":10,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1757","location":{"end":{"column":32,"line":11},"start":{"column":18,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1758","location":{"end":{"column":22,"line":12},"start":{"column":13,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1759","location":{"end":{"column":48,"line":13},"start":{"column":26,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1760","location":{"end":{"column":54,"line":14},"start":{"column":29,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1761","location":{"end":{"column":14,"line":15},"start":{"column":9,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1762","location":{"end":{"column":20,"line":16},"start":{"column":12,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1763","location":{"end":{"column":2,"line":28},"start":{"column":81,"line":19}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1764","location":{"end":{"column":4,"line":23},"start":{"column":10,"line":20}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1765","location":{"end":{"column":36,"line":21},"start":{"column":14,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1766","location":{"end":{"column":20,"line":22},"start":{"column":11,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1767","location":{"end":{"column":4,"line":27},"start":{"column":12,"line":24}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1768","location":{"end":{"column":32,"line":25},"start":{"column":14,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1769","location":{"end":{"column":20,"line":26},"start":{"column":11,"line":26}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1770","location":{"end":{"column":36,"line":34},"start":{"column":23,"line":34}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1771","location":{"end":{"column":4,"line":63},"start":{"column":149,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1772","location":{"end":{"column":119,"line":38},"start":{"column":27,"line":38}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1773","location":{"end":{"column":68,"line":38},"start":{"column":51,"line":38}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1774","location":{"end":{"column":117,"line":38},"start":{"column":82,"line":38}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"CompileError"},{"id":"1775","location":{"end":{"column":6,"line":48},"start":{"column":48,"line":42}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"1776","location":{"end":{"column":72,"line":43},"start":{"column":31,"line":43}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1777","location":{"end":{"column":47,"line":43},"start":{"column":39,"line":43}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1778","location":{"end":{"column":124,"line":45},"start":{"column":47,"line":45}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1779","location":{"end":{"column":71,"line":45},"start":{"column":55,"line":45}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1780","location":{"end":{"column":122,"line":45},"start":{"column":114,"line":45}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1781","location":{"end":{"column":142,"line":46},"start":{"column":44,"line":46}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1782","location":{"end":{"column":68,"line":46},"start":{"column":52,"line":46}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1783","location":{"end":{"column":66,"line":51},"start":{"column":9,"line":51}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1784","location":{"end":{"column":66,"line":51},"start":{"column":9,"line":51}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1785","location":{"end":{"column":39,"line":51},"start":{"column":36,"line":51}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"1786","location":{"end":{"column":6,"line":60},"start":{"column":68,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1787","location":{"end":{"column":115,"line":52},"start":{"column":49,"line":52}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1788","location":{"end":{"column":63,"line":52},"start":{"column":57,"line":52}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1789","location":{"end":{"column":132,"line":53},"start":{"column":67,"line":53}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1790","location":{"end":{"column":91,"line":53},"start":{"column":75,"line":53}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1791","location":{"end":{"column":109,"line":53},"start":{"column":103,"line":53}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1792","location":{"end":{"column":124,"line":57},"start":{"column":36,"line":57}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"1793","location":{"end":{"column":4,"line":75},"start":{"column":121,"line":65}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1794","location":{"end":{"column":6,"line":74},"start":{"column":12,"line":66}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1795","location":{"end":{"column":8,"line":73},"start":{"column":19,"line":68}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"1796","location":{"end":{"column":10,"line":72},"start":{"column":18,"line":69}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1797","location":{"end":{"column":40,"line":70},"start":{"column":22,"line":70}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"1798","location":{"end":{"column":39,"line":85},"start":{"column":35,"line":85}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"1799","location":{"end":{"column":4,"line":89},"start":{"column":5,"line":86}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1800","location":{"end":{"column":4,"line":124},"start":{"column":36,"line":104}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1801","location":{"end":{"column":6,"line":114},"start":{"column":63,"line":109}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1802","location":{"end":{"column":21,"line":112},"start":{"column":13,"line":112}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1803","location":{"end":{"column":27,"line":113},"start":{"column":13,"line":113}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1804","location":{"end":{"column":6,"line":122},"start":{"column":43,"line":119}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1805","location":{"end":{"column":4,"line":135},"start":{"column":70,"line":131}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1806","location":{"end":{"column":123,"line":132},"start":{"column":57,"line":132}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1807","location":{"end":{"column":79,"line":132},"start":{"column":65,"line":132}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1808","location":{"end":{"column":95,"line":132},"start":{"column":87,"line":132}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1809","location":{"end":{"column":85,"line":133},"start":{"column":47,"line":133}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"1810","location":{"end":{"column":4,"line":147},"start":{"column":43,"line":137}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1811","location":{"end":{"column":6,"line":146},"start":{"column":38,"line":138}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1812","location":{"end":{"column":8,"line":145},"start":{"column":30,"line":139}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1813","location":{"end":{"column":16,"line":140},"start":{"column":13,"line":140}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1814","location":{"end":{"column":16,"line":140},"start":{"column":13,"line":140}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1815","location":{"end":{"column":10,"line":142},"start":{"column":18,"line":140}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1816","location":{"end":{"column":10,"line":144},"start":{"column":16,"line":142}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import { LogLevel } from '@stryker-mutator/api/core';\nimport * as log4js from 'log4js';\n\nimport { getFreePort } from '../utils/netUtils';\n\nimport LoggingClientContext from './LoggingClientContext';\nimport { minLevel } from './logUtils';\n\nconst enum AppenderName {\n  File = 'file',\n  FilteredFile = 'filteredFile',\n  Console = 'console',\n  FilteredConsoleLevel = 'filteredConsoleLevel',\n  FilteredConsoleCategory = 'filteredConsoleCategory',\n  All = 'all',\n  Server = 'server'\n}\n\nconst layouts: { color: log4js.PatternLayout; noColor: log4js.PatternLayout } = {\n  color: {\n    pattern: '%[%r (%z) %p %c%] %m',\n    type: 'pattern'\n  },\n  noColor: {\n    pattern: '%r (%z) %p %c %m',\n    type: 'pattern'\n  }\n};\n\ninterface AppendersConfiguration {\n  [name: string]: log4js.Appender;\n}\n\nconst LOG_FILE_NAME = 'stryker.log';\nexport default class LogConfigurator {\n  private static createMainProcessAppenders(consoleLogLevel: LogLevel, fileLogLevel: LogLevel, allowConsoleColors: boolean): AppendersConfiguration {\n    // Add the custom \"multiAppender\": https://log4js-node.github.io/log4js-node/appenders.html#other-appenders\n    const multiAppender = { type: require.resolve('./MultiAppender'), appenders: [AppenderName.FilteredConsoleLevel] };\n\n    const consoleLayout = allowConsoleColors ? layouts.color : layouts.noColor;\n\n    let allAppenders: AppendersConfiguration = {\n      [AppenderName.Console]: { type: 'stdout', layout: consoleLayout },\n      // Exclude messages like: \"ERROR log4js A worker log process hung up unexpectedly\" #1245\n      [AppenderName.FilteredConsoleCategory]: { type: 'categoryFilter', appender: AppenderName.Console, exclude: 'log4js' },\n      [AppenderName.FilteredConsoleLevel]: { type: 'logLevelFilter', appender: AppenderName.FilteredConsoleCategory, level: consoleLogLevel },\n      [AppenderName.All]: multiAppender\n    };\n\n    // only add file if it is needed. Otherwise log4js will create the file directly, pretty annoying.\n    if (fileLogLevel.toUpperCase() !== LogLevel.Off.toUpperCase()) {\n      const fileAppender: log4js.FileAppender = { type: 'file', filename: LOG_FILE_NAME, layout: layouts.noColor };\n      const filteredFileAppender: log4js.LogLevelFilterAppender = { type: 'logLevelFilter', appender: 'file', level: fileLogLevel };\n\n      // Don't simply add the appenders, instead actually make sure they are ordinal \"before\" the others.\n      // See https://github.com/log4js-node/log4js-node/issues/746\n      allAppenders = Object.assign({ [AppenderName.File]: fileAppender, [AppenderName.FilteredFile]: filteredFileAppender }, allAppenders);\n\n      multiAppender.appenders.push(AppenderName.FilteredFile);\n    }\n\n    return allAppenders;\n  }\n\n  private static createLog4jsConfig(defaultLogLevel: LogLevel, appenders: AppendersConfiguration): log4js.Configuration {\n    return {\n      appenders,\n      categories: {\n        default: {\n          appenders: [AppenderName.All],\n          level: defaultLogLevel\n        }\n      }\n    };\n  }\n\n  /**\n   * Configure logging for the master process. Either call this method or `configureChildProcess` before any `getLogger` calls.\n   * @param consoleLogLevel The log level to configure for the console\n   * @param fileLogLevel The log level to configure for the \"stryker.log\" file\n   */\n  public static configureMainProcess(\n    consoleLogLevel: LogLevel = LogLevel.Information,\n    fileLogLevel: LogLevel = LogLevel.Off,\n    allowConsoleColors: boolean = true\n  ) {\n    const appenders = this.createMainProcessAppenders(consoleLogLevel, fileLogLevel, allowConsoleColors);\n    log4js.configure(this.createLog4jsConfig(minLevel(consoleLogLevel, fileLogLevel), appenders));\n  }\n\n  /**\n   * Configure the logging for the server. Includes the master configuration.\n   * This method should only be called ONCE, as it starts the log4js server to listen for log events.\n   * It returns the logging client context that should be used to configure the child processes.\n   *\n   * @param consoleLogLevel the console log level\n   * @param fileLogLevel the file log level\n   * @returns the context\n   */\n  public static async configureLoggingServer(\n    consoleLogLevel: LogLevel,\n    fileLogLevel: LogLevel,\n    allowConsoleColors: boolean\n  ): Promise<LoggingClientContext> {\n    const loggerPort = await getFreePort();\n\n    // Include the appenders for the main Stryker process, as log4js has only one single `configure` method.\n    const appenders = this.createMainProcessAppenders(consoleLogLevel, fileLogLevel, allowConsoleColors);\n    const multiProcessAppender: log4js.MultiprocessAppender = {\n      appender: AppenderName.All,\n      loggerPort,\n      mode: 'master',\n      type: 'multiprocess'\n    };\n    appenders[AppenderName.Server] = multiProcessAppender;\n    const defaultLogLevel = minLevel(consoleLogLevel, fileLogLevel);\n    log4js.configure(this.createLog4jsConfig(defaultLogLevel, appenders));\n\n    const context: LoggingClientContext = {\n      level: defaultLogLevel,\n      port: loggerPort\n    };\n    return context;\n  }\n\n  /**\n   * Configures the logging for a worker process. Sends all logging to the master process.\n   * Either call this method or `configureMainProcess` before any `getLogger` calls.\n   * @param context the logging client context used to configure the logging client\n   */\n  public static configureChildProcess(context: LoggingClientContext) {\n    const clientAppender: log4js.MultiprocessAppender = { type: 'multiprocess', mode: 'worker', loggerPort: context.port };\n    const appenders: AppendersConfiguration = { [AppenderName.All]: clientAppender };\n    log4js.configure(this.createLog4jsConfig(context.level, appenders));\n  }\n\n  public static shutdown(): Promise<void> {\n    return new Promise((res, rej) => {\n      log4js.shutdown(err => {\n        if (err) {\n          rej(err);\n        } else {\n          res();\n        }\n      });\n    });\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/logging/MultiAppender.ts":{"language":"typescript","mutants":[{"id":"1817","location":{"end":{"column":4,"line":10},"start":{"column":45,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1818","location":{"end":{"column":62,"line":9},"start":{"column":28,"line":9}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1819","location":{"end":{"column":2,"line":24},"start":{"column":134,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1820","location":{"end":{"column":90,"line":22},"start":{"column":64,"line":22}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"}],"source":"import { LoggingEvent } from 'log4js';\n\nexport type RuntimeAppender = (loggingEvent: LoggingEvent) => void;\n\nexport class MultiAppender {\n  constructor(private readonly appenders: RuntimeAppender[]) {}\n\n  public append(loggingEvent: LoggingEvent) {\n    this.appenders.forEach(appender => appender(loggingEvent));\n  }\n}\n\n/**\n * This method is expected by log4js to have this _exact_ name\n * and signature.\n * @see https://log4js-node.github.io/log4js-node/writing-appenders.html\n * @param config The appender configuration delivered by log4js\n * @param _ The layouts provided by log4js\n * @param findAppender A method to locate other appenders\n */\nexport function configure(config: { appenders: string[] }, _: any, findAppender: (name: string) => RuntimeAppender): RuntimeAppender {\n  const multiAppender = new MultiAppender(config.appenders.map(name => findAppender(name)));\n  return multiAppender.append.bind(multiAppender);\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/logging/logUtils.ts":{"language":"typescript","mutants":[{"id":"1821","location":{"end":{"column":2,"line":15},"start":{"column":52,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1822","location":{"end":{"column":82,"line":10},"start":{"column":7,"line":10}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1823","location":{"end":{"column":82,"line":10},"start":{"column":7,"line":10}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1824","location":{"end":{"column":4,"line":12},"start":{"column":84,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1825","location":{"end":{"column":4,"line":14},"start":{"column":10,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import { LogLevel } from '@stryker-mutator/api/core';\nimport * as log4js from 'log4js';\n\n/**\n * Determines the minimal log level (where trace < off)\n * @param a one log level\n * @param b other log level\n */\nexport function minLevel(a: LogLevel, b: LogLevel) {\n  if (log4js.levels.getLevel(b).isGreaterThanOrEqualTo(log4js.levels.getLevel(a))) {\n    return a;\n  } else {\n    return b;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/mutants/MutantTestMatcher.ts":{"language":"typescript","mutants":[{"id":"1826","location":{"end":{"column":4,"line":48},"start":{"column":53,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1827","location":{"end":{"column":79,"line":43},"start":{"column":9,"line":43}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1828","location":{"end":{"column":79,"line":43},"start":{"column":9,"line":43}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1829","location":{"end":{"column":6,"line":45},"start":{"column":81,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1830","location":{"end":{"column":6,"line":47},"start":{"column":12,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1831","location":{"end":{"column":4,"line":66},"start":{"column":97,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1832","location":{"end":{"column":48,"line":53},"start":{"column":9,"line":53}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1833","location":{"end":{"column":48,"line":53},"start":{"column":9,"line":53}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"1834","location":{"end":{"column":42,"line":53},"start":{"column":39,"line":53}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1835","location":{"end":{"column":48,"line":53},"start":{"column":43,"line":53}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1836","location":{"end":{"column":6,"line":55},"start":{"column":50,"line":53}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1837","location":{"end":{"column":124,"line":54},"start":{"column":31,"line":54}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1838","location":{"end":{"column":57,"line":55},"start":{"column":16,"line":55}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1839","location":{"end":{"column":57,"line":55},"start":{"column":16,"line":55}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1840","location":{"end":{"column":57,"line":55},"start":{"column":16,"line":55}},"mutatorName":"BooleanLiteral","replacement":"this.initialRunResult.runResult.coverage","status":"Killed"},{"id":"1841","location":{"end":{"column":6,"line":61},"start":{"column":59,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1842","location":{"end":{"column":166,"line":57},"start":{"column":9,"line":57}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1843","location":{"end":{"column":141,"line":60},"start":{"column":31,"line":60}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1844","location":{"end":{"column":6,"line":63},"start":{"column":12,"line":61}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1845","location":{"end":{"column":106,"line":62},"start":{"column":45,"line":62}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1846","location":{"end":{"column":4,"line":92},"start":{"column":71,"line":68}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1847","location":{"end":{"column":6,"line":72},"start":{"column":95,"line":69}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1848","location":{"end":{"column":23,"line":75},"start":{"column":9,"line":75}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1849","location":{"end":{"column":23,"line":75},"start":{"column":9,"line":75}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1850","location":{"end":{"column":6,"line":85},"start":{"column":25,"line":75}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1851","location":{"end":{"column":80,"line":76},"start":{"column":11,"line":76}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1852","location":{"end":{"column":80,"line":76},"start":{"column":11,"line":76}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1853","location":{"end":{"column":8,"line":78},"start":{"column":82,"line":76}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1854","location":{"end":{"column":8,"line":84},"start":{"column":14,"line":78}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1855","location":{"end":{"column":10,"line":83},"start":{"column":75,"line":79}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1856","location":{"end":{"column":84,"line":80},"start":{"column":15,"line":80}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1857","location":{"end":{"column":84,"line":80},"start":{"column":15,"line":80}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1858","location":{"end":{"column":12,"line":82},"start":{"column":86,"line":80}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1859","location":{"end":{"column":6,"line":91},"start":{"column":12,"line":85}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1860","location":{"end":{"column":4,"line":101},"start":{"column":90,"line":94}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1861","location":{"end":{"column":22,"line":95},"start":{"column":9,"line":95}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1862","location":{"end":{"column":22,"line":95},"start":{"column":9,"line":95}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1863","location":{"end":{"column":6,"line":98},"start":{"column":24,"line":95}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1864","location":{"end":{"column":6,"line":100},"start":{"column":12,"line":98}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1865","location":{"end":{"column":19,"line":99},"start":{"column":14,"line":99}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"1866","location":{"end":{"column":4,"line":107},"start":{"column":102,"line":103}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1867","location":{"end":{"column":75,"line":105},"start":{"column":25,"line":105}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1868","location":{"end":{"column":75,"line":105},"start":{"column":25,"line":105}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1869","location":{"end":{"column":46,"line":105},"start":{"column":44,"line":105}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"1870","location":{"end":{"column":4,"line":119},"start":{"column":118,"line":109}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1871","location":{"end":{"column":20,"line":110},"start":{"column":9,"line":110}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1872","location":{"end":{"column":20,"line":110},"start":{"column":9,"line":110}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1873","location":{"end":{"column":6,"line":116},"start":{"column":22,"line":110}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1874","location":{"end":{"column":63,"line":111},"start":{"column":11,"line":111}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1875","location":{"end":{"column":63,"line":111},"start":{"column":11,"line":111}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1876","location":{"end":{"column":34,"line":111},"start":{"column":31,"line":111}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1877","location":{"end":{"column":8,"line":113},"start":{"column":65,"line":111}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1878","location":{"end":{"column":55,"line":112},"start":{"column":16,"line":112}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1879","location":{"end":{"column":55,"line":112},"start":{"column":16,"line":112}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1880","location":{"end":{"column":53,"line":112},"start":{"column":52,"line":112}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"1881","location":{"end":{"column":53,"line":112},"start":{"column":52,"line":112}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"1882","location":{"end":{"column":8,"line":115},"start":{"column":14,"line":113}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1883","location":{"end":{"column":55,"line":114},"start":{"column":16,"line":114}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1884","location":{"end":{"column":55,"line":114},"start":{"column":16,"line":114}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1885","location":{"end":{"column":53,"line":114},"start":{"column":52,"line":114}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"1886","location":{"end":{"column":53,"line":114},"start":{"column":52,"line":114}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"1887","location":{"end":{"column":6,"line":118},"start":{"column":12,"line":116}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1888","location":{"end":{"column":19,"line":117},"start":{"column":14,"line":117}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"1889","location":{"end":{"column":4,"line":138},"start":{"column":88,"line":121}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1890","location":{"end":{"column":82,"line":122},"start":{"column":54,"line":122}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1891","location":{"end":{"column":8,"line":136},"start":{"column":38,"line":124}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1892","location":{"end":{"column":82,"line":125},"start":{"column":45,"line":125}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1893","location":{"end":{"column":82,"line":125},"start":{"column":53,"line":125}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1894","location":{"end":{"column":82,"line":125},"start":{"column":53,"line":125}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1895","location":{"end":{"column":66,"line":125},"start":{"column":63,"line":125}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1896","location":{"end":{"column":23,"line":126},"start":{"column":13,"line":126}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1897","location":{"end":{"column":23,"line":126},"start":{"column":13,"line":126}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1898","location":{"end":{"column":10,"line":128},"start":{"column":25,"line":126}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1899","location":{"end":{"column":10,"line":135},"start":{"column":16,"line":128}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1900","location":{"end":{"column":87,"line":132},"start":{"column":13,"line":130}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1901","location":{"end":{"column":71,"line":132},"start":{"column":60,"line":132}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage"},{"id":"1902","location":{"end":{"column":84,"line":132},"start":{"column":78,"line":132}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"1903","location":{"end":{"column":4,"line":156},"start":{"column":83,"line":145}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1904","location":{"end":{"column":6,"line":154},"start":{"column":42,"line":146}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1905","location":{"end":{"column":88,"line":152},"start":{"column":55,"line":152}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1906","location":{"end":{"column":4,"line":176},"start":{"column":110,"line":158}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1907","location":{"end":{"column":23,"line":160},"start":{"column":9,"line":160}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1908","location":{"end":{"column":23,"line":160},"start":{"column":9,"line":160}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1909","location":{"end":{"column":6,"line":165},"start":{"column":25,"line":160}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1910","location":{"end":{"column":8,"line":164},"start":{"column":14,"line":161}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1911","location":{"end":{"column":6,"line":175},"start":{"column":12,"line":165}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1912","location":{"end":{"column":24,"line":167},"start":{"column":11,"line":167}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1913","location":{"end":{"column":24,"line":167},"start":{"column":11,"line":167}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1914","location":{"end":{"column":8,"line":172},"start":{"column":26,"line":167}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1915","location":{"end":{"column":10,"line":171},"start":{"column":16,"line":168}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1916","location":{"end":{"column":8,"line":174},"start":{"column":14,"line":172}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1917","location":{"end":{"column":4,"line":202},"start":{"column":101,"line":184}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1918","location":{"end":{"column":6,"line":188},"start":{"column":81,"line":185}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1919","location":{"end":{"column":17,"line":189},"start":{"column":9,"line":189}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"1920","location":{"end":{"column":17,"line":189},"start":{"column":9,"line":189}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1921","location":{"end":{"column":6,"line":200},"start":{"column":19,"line":189}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1922","location":{"end":{"column":8,"line":199},"start":{"column":52,"line":190}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1923","location":{"end":{"column":113,"line":193},"start":{"column":13,"line":193}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1924","location":{"end":{"column":113,"line":193},"start":{"column":13,"line":193}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1925","location":{"end":{"column":53,"line":193},"start":{"column":51,"line":193}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"1926","location":{"end":{"column":10,"line":198},"start":{"column":115,"line":193}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1927","location":{"end":{"column":12,"line":197},"start":{"column":31,"line":194}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1928","location":{"end":{"column":4,"line":214},"start":{"column":84,"line":204}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1929","location":{"end":{"column":49,"line":205},"start":{"column":9,"line":205}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1930","location":{"end":{"column":49,"line":205},"start":{"column":9,"line":205}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1931","location":{"end":{"column":6,"line":211},"start":{"column":51,"line":205}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1932","location":{"end":{"column":81,"line":206},"start":{"column":11,"line":206}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1933","location":{"end":{"column":81,"line":206},"start":{"column":11,"line":206}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1934","location":{"end":{"column":8,"line":208},"start":{"column":83,"line":206}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1935","location":{"end":{"column":8,"line":210},"start":{"column":14,"line":208}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1936","location":{"end":{"column":6,"line":213},"start":{"column":12,"line":211}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1937","location":{"end":{"column":4,"line":218},"start":{"column":138,"line":216}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1938","location":{"end":{"column":55,"line":217},"start":{"column":12,"line":217}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1939","location":{"end":{"column":55,"line":217},"start":{"column":12,"line":217}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1940","location":{"end":{"column":45,"line":217},"start":{"column":42,"line":217}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1941","location":{"end":{"column":55,"line":217},"start":{"column":46,"line":217}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"}],"source":"import { StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { Mutant } from '@stryker-mutator/api/mutant';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { MatchedMutant } from '@stryker-mutator/api/report';\nimport { CoverageCollection, CoveragePerTestResult, CoverageResult, StatementMap } from '@stryker-mutator/api/test_runner';\n\nimport { coreTokens } from '../di';\nimport InputFileCollection from '../input/InputFileCollection';\nimport { InitialTestRunResult } from '../process/InitialTestExecutor';\nimport StrictReporter from '../reporters/StrictReporter';\nimport SourceFile from '../SourceFile';\nimport TestableMutant, { TestSelectionResult } from '../TestableMutant';\nimport { CoverageMaps } from '../transpiler/CoverageInstrumenterTranspiler';\nimport LocationHelper from '../utils/LocationHelper';\nimport { filterEmpty } from '../utils/objectUtils';\n\nconst enum StatementIndexKind {\n  Function,\n  Statement\n}\n\n/**\n * Represents a statement index inside the coverage maps of a file\n * Either the function map, or statement map\n */\ninterface StatementIndex {\n  kind: StatementIndexKind;\n  index: string;\n}\n\nexport class MutantTestMatcher {\n  public static inject = tokens(commonTokens.logger, commonTokens.options, coreTokens.reporter, coreTokens.inputFiles, coreTokens.initialRunResult);\n  constructor(\n    private readonly log: Logger,\n    private readonly options: StrykerOptions,\n    private readonly reporter: StrictReporter,\n    private readonly input: InputFileCollection,\n    private readonly initialRunResult: InitialTestRunResult\n  ) {}\n\n  private get baseline(): CoverageCollection | null {\n    if (this.isCoveragePerTestResult(this.initialRunResult.runResult.coverage)) {\n      return this.initialRunResult.runResult.coverage.baseline;\n    } else {\n      return null;\n    }\n  }\n\n  public async matchWithMutants(mutants: readonly Mutant[]): Promise<readonly TestableMutant[]> {\n    const testableMutants = this.createTestableMutants(mutants);\n\n    if (this.options.coverageAnalysis === 'off') {\n      testableMutants.forEach(mutant => mutant.selectAllTests(this.initialRunResult.runResult, TestSelectionResult.Success));\n    } else if (!this.initialRunResult.runResult.coverage) {\n      this.log.warn(\n        'No coverage result found, even though coverageAnalysis is \"%s\". Assuming that all tests cover each mutant. This might have a big impact on the performance.',\n        this.options.coverageAnalysis\n      );\n      testableMutants.forEach(mutant => mutant.selectAllTests(this.initialRunResult.runResult, TestSelectionResult.FailedButAlreadyReported));\n    } else {\n      await Promise.all(testableMutants.map(testableMutant => this.enrichWithCoveredTests(testableMutant)));\n    }\n    this.reporter.onAllMutantsMatchedWithTests(Object.freeze(testableMutants.map(this.mapMutantOnMatchedMutant)));\n    return testableMutants;\n  }\n\n  public async enrichWithCoveredTests(testableMutant: TestableMutant) {\n    const transpiledLocation = await this.initialRunResult.sourceMapper.transpiledLocationFor({\n      fileName: testableMutant.mutant.fileName,\n      location: testableMutant.location\n    });\n    const fileCoverage = this.initialRunResult.coverageMaps[transpiledLocation.fileName];\n    const statementIndex = this.findMatchingStatement(new LocationHelper(transpiledLocation.location), fileCoverage);\n    if (statementIndex) {\n      if (this.isCoveredByBaseline(transpiledLocation.fileName, statementIndex)) {\n        testableMutant.selectAllTests(this.initialRunResult.runResult, TestSelectionResult.Success);\n      } else {\n        this.initialRunResult.runResult.tests.forEach((testResult, id) => {\n          if (this.isCoveredByTest(id, transpiledLocation.fileName, statementIndex)) {\n            testableMutant.selectTest(testResult, id);\n          }\n        });\n      }\n    } else {\n      // Could not find a statement corresponding to this mutant\n      // This can happen when for example mutating a TypeScript interface\n      // It should result in an early result during mutation testing\n      // Lets delay error reporting for now\n      testableMutant.selectAllTests(this.initialRunResult.runResult, TestSelectionResult.Failed);\n    }\n  }\n\n  private isCoveredByBaseline(fileName: string, statementIndex: StatementIndex): boolean {\n    if (this.baseline) {\n      const coverageResult = this.baseline[fileName];\n      return this.isCoveredByCoverageCollection(coverageResult, statementIndex);\n    } else {\n      return false;\n    }\n  }\n\n  private isCoveredByTest(testId: number, fileName: string, statementIndex: StatementIndex): boolean {\n    const coverageCollection = this.findCoverageCollectionForTest(testId);\n    const coveredFile = coverageCollection && coverageCollection[fileName];\n    return this.isCoveredByCoverageCollection(coveredFile, statementIndex);\n  }\n\n  private isCoveredByCoverageCollection(coveredFile: CoverageResult | null, statementIndex: StatementIndex): boolean {\n    if (coveredFile) {\n      if (statementIndex.kind === StatementIndexKind.Statement) {\n        return coveredFile.s[statementIndex.index] > 0;\n      } else {\n        return coveredFile.f[statementIndex.index] > 0;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  private createTestableMutants(mutants: readonly Mutant[]): readonly TestableMutant[] {\n    const sourceFiles = this.input.filesToMutate.map(file => new SourceFile(file));\n    return filterEmpty(\n      mutants.map((mutant, index) => {\n        const sourceFile = sourceFiles.find(file => file.name === mutant.fileName);\n        if (sourceFile) {\n          return new TestableMutant(index.toString(), mutant, sourceFile);\n        } else {\n          this.log.error(\n            `Mutant \"${mutant.mutatorName}${mutant.replacement}\" is corrupt, because cannot find a text file with name ${\n              mutant.fileName\n            }. List of source files: \\n\\t${sourceFiles.map(s => s.name).join('\\n\\t')}`\n          );\n          return null;\n        }\n      })\n    );\n  }\n\n  /**\n   * Map the Mutant object on the MatchMutant Object.\n   * @param testableMutant The mutant.\n   * @returns The MatchedMutant\n   */\n  private mapMutantOnMatchedMutant(testableMutant: TestableMutant): MatchedMutant {\n    const matchedMutant: MatchedMutant = {\n      fileName: testableMutant.mutant.fileName,\n      id: testableMutant.id,\n      mutatorName: testableMutant.mutant.mutatorName,\n      replacement: testableMutant.mutant.replacement,\n      runAllTests: testableMutant.runAllTests,\n      scopedTestIds: testableMutant.selectedTests.map(testSelection => testSelection.id),\n      timeSpentScopedTests: testableMutant.timeSpentScopedTests\n    };\n    return Object.freeze(matchedMutant);\n  }\n\n  private findMatchingStatement(location: LocationHelper, fileCoverage: CoverageMaps): StatementIndex | null {\n    const statementIndex = this.findMatchingStatementInMap(location, fileCoverage.statementMap);\n    if (statementIndex) {\n      return {\n        index: statementIndex,\n        kind: StatementIndexKind.Statement\n      };\n    } else {\n      const functionIndex = this.findMatchingStatementInMap(location, fileCoverage.fnMap);\n      if (functionIndex) {\n        return {\n          index: functionIndex,\n          kind: StatementIndexKind.Function\n        };\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Finds the smallest statement that covers a location\n   * @param needle The location to find.\n   * @param haystack the statement map or function map to search in.\n   * @returns The index of the smallest statement surrounding the location, or null if not found.\n   */\n  private findMatchingStatementInMap(needle: LocationHelper, haystack: StatementMap): string | null {\n    let smallestStatement: { index: string | null; location: LocationHelper } = {\n      index: null,\n      location: LocationHelper.MAX_VALUE\n    };\n    if (haystack) {\n      Object.keys(haystack).forEach(statementId => {\n        const statementLocation = haystack[statementId];\n\n        if (needle.isCoveredBy(statementLocation) && smallestStatement.location.isSmallerArea(statementLocation)) {\n          smallestStatement = {\n            index: statementId,\n            location: new LocationHelper(statementLocation)\n          };\n        }\n      });\n    }\n    return smallestStatement.index;\n  }\n\n  private findCoverageCollectionForTest(testId: number): CoverageCollection | null {\n    if (this.initialRunResult.runResult.coverage) {\n      if (this.isCoveragePerTestResult(this.initialRunResult.runResult.coverage)) {\n        return this.initialRunResult.runResult.coverage.deviations[testId];\n      } else {\n        return this.initialRunResult.runResult.coverage;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  private isCoveragePerTestResult(_coverage: CoverageCollection | CoveragePerTestResult | undefined): _coverage is CoveragePerTestResult {\n    return this.options.coverageAnalysis === 'perTest';\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/mutants/MutatorFacade.ts":{"language":"typescript","mutants":[{"id":"1942","location":{"end":{"column":4,"line":21},"start":{"column":65,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1943","location":{"end":{"column":4,"line":29},"start":{"column":80,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1944","location":{"end":{"column":56,"line":24},"start":{"column":9,"line":24}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1945","location":{"end":{"column":56,"line":24},"start":{"column":9,"line":24}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1946","location":{"end":{"column":6,"line":26},"start":{"column":58,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1947","location":{"end":{"column":109,"line":25},"start":{"column":29,"line":25}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1948","location":{"end":{"column":109,"line":25},"start":{"column":39,"line":25}},"mutatorName":"BooleanLiteral","replacement":"this.mutatorDescriptor.excludedMutations.includes(mutant.mutatorName)","status":"Killed"},{"id":"1949","location":{"end":{"column":6,"line":28},"start":{"column":12,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1950","location":{"end":{"column":4,"line":37},"start":{"column":63,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1951","location":{"end":{"column":36,"line":32},"start":{"column":9,"line":32}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"1952","location":{"end":{"column":36,"line":32},"start":{"column":9,"line":32}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"1953","location":{"end":{"column":27,"line":32},"start":{"column":24,"line":32}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"1954","location":{"end":{"column":36,"line":32},"start":{"column":28,"line":32}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"1955","location":{"end":{"column":6,"line":34},"start":{"column":38,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1956","location":{"end":{"column":6,"line":36},"start":{"column":12,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1957","location":{"end":{"column":4,"line":51},"start":{"column":81,"line":39}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1958","location":{"end":{"column":28,"line":41},"start":{"column":9,"line":41}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1959","location":{"end":{"column":28,"line":41},"start":{"column":9,"line":41}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1960","location":{"end":{"column":6,"line":43},"start":{"column":30,"line":41}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1961","location":{"end":{"column":72,"line":42},"start":{"column":28,"line":42}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1962","location":{"end":{"column":6,"line":45},"start":{"column":12,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1963","location":{"end":{"column":72,"line":44},"start":{"column":28,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1964","location":{"end":{"column":46,"line":46},"start":{"column":45,"line":46}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"1965","location":{"end":{"column":23,"line":47},"start":{"column":9,"line":47}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1966","location":{"end":{"column":23,"line":47},"start":{"column":9,"line":47}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1967","location":{"end":{"column":6,"line":49},"start":{"column":25,"line":47}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1968","location":{"end":{"column":70,"line":48},"start":{"column":7,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1969","location":{"end":{"column":70,"line":48},"start":{"column":7,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1970","location":{"end":{"column":70,"line":48},"start":{"column":29,"line":48}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import { File, MutatorDescriptor } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { Mutant, Mutator } from '@stryker-mutator/api/mutant';\nimport { commonTokens, PluginKind, tokens } from '@stryker-mutator/api/plugin';\n\nimport { coreTokens, PluginCreator } from '../di';\n\nexport class MutatorFacade implements Mutator {\n  public static inject = tokens(commonTokens.mutatorDescriptor, coreTokens.pluginCreatorMutator, commonTokens.logger);\n  constructor(\n    private readonly mutatorDescriptor: MutatorDescriptor,\n    private readonly pluginCreator: PluginCreator<PluginKind.Mutator>,\n    private readonly log: Logger\n  ) {}\n\n  public mutate(inputFiles: readonly File[]): readonly Mutant[] {\n    const allMutants = this.pluginCreator.create(this.getMutatorName(this.mutatorDescriptor.name)).mutate(inputFiles);\n    const includedMutants = this.removeExcludedMutants(allMutants);\n    this.logMutantCount(includedMutants.length, allMutants.length);\n    return includedMutants;\n  }\n\n  private removeExcludedMutants(mutants: readonly Mutant[]): readonly Mutant[] {\n    if (this.mutatorDescriptor.excludedMutations.length) {\n      return mutants.filter(mutant => !this.mutatorDescriptor.excludedMutations.includes(mutant.mutatorName));\n    } else {\n      return mutants;\n    }\n  }\n\n  private getMutatorName(mutator: string | MutatorDescriptor) {\n    if (typeof mutator === 'string') {\n      return mutator;\n    } else {\n      return mutator.name;\n    }\n  }\n\n  private logMutantCount(includedMutantCount: number, totalMutantCount: number) {\n    let mutantCountMessage;\n    if (includedMutantCount) {\n      mutantCountMessage = `${includedMutantCount} Mutant(s) generated`;\n    } else {\n      mutantCountMessage = \"It's a mutant-free world, nothing to test.\";\n    }\n    const numberExcluded = totalMutantCount - includedMutantCount;\n    if (numberExcluded) {\n      mutantCountMessage += ` (${numberExcluded} Mutant(s) excluded)`;\n    }\n    this.log.info(mutantCountMessage);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/process/InitialTestExecutor.ts":{"language":"typescript","mutants":[{"id":"1971","location":{"end":{"column":40,"line":23},"start":{"column":39,"line":23}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Killed"},{"id":"1972","location":{"end":{"column":33,"line":23},"start":{"column":32,"line":23}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Killed"},{"id":"1973","location":{"end":{"column":51,"line":24},"start":{"column":33,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1974","location":{"end":{"column":4,"line":96},"start":{"column":53,"line":71}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1975","location":{"end":{"column":70,"line":72},"start":{"column":19,"line":72}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"1976","location":{"end":{"column":6,"line":95},"start":{"column":12,"line":90}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1977","location":{"end":{"column":4,"line":105},"start":{"column":110,"line":98}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1978","location":{"end":{"column":38,"line":104},"start":{"column":12,"line":104}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1979","location":{"end":{"column":4,"line":115},"start":{"column":88,"line":110}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1980","location":{"end":{"column":130,"line":111},"start":{"column":65,"line":111}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1981","location":{"end":{"column":96,"line":114},"start":{"column":12,"line":114}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"1982","location":{"end":{"column":4,"line":140},"start":{"column":70,"line":117}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1983","location":{"end":{"column":10,"line":131},"start":{"column":7,"line":119}},"mutatorName":"ConditionalExpression","replacement":"case RunStatus.Complete:","status":"Killed"},{"id":"1984","location":{"end":{"column":31,"line":121},"start":{"column":13,"line":121}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1985","location":{"end":{"column":31,"line":121},"start":{"column":13,"line":121}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1986","location":{"end":{"column":10,"line":124},"start":{"column":33,"line":121}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1987","location":{"end":{"column":77,"line":123},"start":{"column":27,"line":123}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1988","location":{"end":{"column":41,"line":125},"start":{"column":13,"line":125}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"1989","location":{"end":{"column":41,"line":125},"start":{"column":13,"line":125}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1990","location":{"end":{"column":39,"line":125},"start":{"column":36,"line":125}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"1991","location":{"end":{"column":10,"line":128},"start":{"column":43,"line":125}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1992","location":{"end":{"column":114,"line":126},"start":{"column":25,"line":126}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1993","location":{"end":{"column":10,"line":131},"start":{"column":16,"line":128}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"1994","location":{"end":{"column":15,"line":134},"start":{"column":7,"line":132}},"mutatorName":"ConditionalExpression","replacement":"case RunStatus.Error:","status":"Killed"},{"id":"1995","location":{"end":{"column":15,"line":137},"start":{"column":7,"line":135}},"mutatorName":"ConditionalExpression","replacement":"case RunStatus.Timeout:","status":"Killed"},{"id":"1996","location":{"end":{"column":67,"line":139},"start":{"column":21,"line":139}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1997","location":{"end":{"column":4,"line":156},"start":{"column":86,"line":149}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1998","location":{"end":{"column":77,"line":150},"start":{"column":36,"line":150}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"1999","location":{"end":{"column":60,"line":150},"start":{"column":59,"line":150}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"2000","location":{"end":{"column":41,"line":151},"start":{"column":40,"line":151}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"2001","location":{"end":{"column":6,"line":155},"start":{"column":12,"line":152}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2002","location":{"end":{"column":35,"line":154},"start":{"column":17,"line":154}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2003","location":{"end":{"column":35,"line":154},"start":{"column":17,"line":154}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2004","location":{"end":{"column":33,"line":154},"start":{"column":32,"line":154}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Survived"},{"id":"2005","location":{"end":{"column":33,"line":154},"start":{"column":32,"line":154}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"2006","location":{"end":{"column":4,"line":171},"start":{"column":65,"line":158}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2007","location":{"end":{"column":52,"line":159},"start":{"column":9,"line":159}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"2008","location":{"end":{"column":52,"line":159},"start":{"column":9,"line":159}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2009","location":{"end":{"column":42,"line":159},"start":{"column":39,"line":159}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2010","location":{"end":{"column":52,"line":159},"start":{"column":43,"line":159}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2011","location":{"end":{"column":6,"line":169},"start":{"column":54,"line":159}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2012","location":{"end":{"column":29,"line":160},"start":{"column":11,"line":160}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2013","location":{"end":{"column":29,"line":160},"start":{"column":11,"line":160}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2014","location":{"end":{"column":8,"line":164},"start":{"column":31,"line":160}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2015","location":{"end":{"column":75,"line":162},"start":{"column":24,"line":162}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2016","location":{"end":{"column":8,"line":168},"start":{"column":14,"line":164}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2017","location":{"end":{"column":148,"line":166},"start":{"column":11,"line":166}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2018","location":{"end":{"column":4,"line":183},"start":{"column":64,"line":173}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2019","location":{"end":{"column":69,"line":174},"start":{"column":9,"line":174}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2020","location":{"end":{"column":69,"line":174},"start":{"column":9,"line":174}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2021","location":{"end":{"column":43,"line":174},"start":{"column":41,"line":174}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"2022","location":{"end":{"column":6,"line":182},"start":{"column":71,"line":174}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2023","location":{"end":{"column":12,"line":180},"start":{"column":9,"line":176}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2024","location":{"end":{"column":47,"line":177},"start":{"column":31,"line":177}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"2025","location":{"end":{"column":47,"line":177},"start":{"column":36,"line":177}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2026","location":{"end":{"column":4,"line":187},"start":{"column":54,"line":185}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2027","location":{"end":{"column":88,"line":186},"start":{"column":35,"line":186}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"2028","location":{"end":{"column":88,"line":186},"start":{"column":49,"line":186}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2029","location":{"end":{"column":88,"line":186},"start":{"column":49,"line":186}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2030","location":{"end":{"column":70,"line":186},"start":{"column":67,"line":186}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2031","location":{"end":{"column":4,"line":197},"start":{"column":75,"line":189}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2032","location":{"end":{"column":84,"line":191},"start":{"column":7,"line":191}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2033","location":{"end":{"column":4,"line":208},"start":{"column":71,"line":199}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2034","location":{"end":{"column":70,"line":200},"start":{"column":19,"line":200}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2035","location":{"end":{"column":6,"line":206},"start":{"column":33,"line":201}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2036","location":{"end":{"column":40,"line":202},"start":{"column":7,"line":202}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2037","location":{"end":{"column":40,"line":202},"start":{"column":7,"line":202}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2038","location":{"end":{"column":40,"line":202},"start":{"column":18,"line":202}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2039","location":{"end":{"column":62,"line":203},"start":{"column":11,"line":203}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2040","location":{"end":{"column":62,"line":203},"start":{"column":11,"line":203}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2041","location":{"end":{"column":34,"line":203},"start":{"column":32,"line":203}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"2042","location":{"end":{"column":8,"line":205},"start":{"column":64,"line":203}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2043","location":{"end":{"column":74,"line":204},"start":{"column":9,"line":204}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2044","location":{"end":{"column":74,"line":204},"start":{"column":9,"line":204}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2045","location":{"end":{"column":74,"line":204},"start":{"column":20,"line":204}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2046","location":{"end":{"column":71,"line":204},"start":{"column":59,"line":204}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2047","location":{"end":{"column":4,"line":215},"start":{"column":55,"line":209}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2048","location":{"end":{"column":60,"line":210},"start":{"column":19,"line":210}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2049","location":{"end":{"column":66,"line":211},"start":{"column":9,"line":211}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2050","location":{"end":{"column":66,"line":211},"start":{"column":9,"line":211}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2051","location":{"end":{"column":35,"line":211},"start":{"column":33,"line":211}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"2052","location":{"end":{"column":6,"line":213},"start":{"column":68,"line":211}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2053","location":{"end":{"column":79,"line":212},"start":{"column":39,"line":212}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"2054","location":{"end":{"column":78,"line":212},"start":{"column":49,"line":212}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2055","location":{"end":{"column":78,"line":212},"start":{"column":49,"line":212}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2056","location":{"end":{"column":78,"line":212},"start":{"column":60,"line":212}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2057","location":{"end":{"column":4,"line":221},"start":{"column":54,"line":217}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2058","location":{"end":{"column":84,"line":218},"start":{"column":19,"line":218}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2059","location":{"end":{"column":101,"line":219},"start":{"column":29,"line":219}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"2060","location":{"end":{"column":100,"line":219},"start":{"column":38,"line":219}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2061","location":{"end":{"column":100,"line":219},"start":{"column":38,"line":219}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2062","location":{"end":{"column":100,"line":219},"start":{"column":49,"line":219}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import { EOL } from 'os';\n\nimport { File, StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { TestFramework } from '@stryker-mutator/api/test_framework';\nimport { RunResult, RunStatus, TestResult, TestStatus } from '@stryker-mutator/api/test_runner';\nimport { Transpiler } from '@stryker-mutator/api/transpile';\n\nimport { coreTokens } from '../di';\nimport InputFileCollection from '../input/InputFileCollection';\nimport LoggingClientContext from '../logging/LoggingClientContext';\nimport Sandbox from '../Sandbox';\nimport { coveragePerTestHooks } from '../transpiler/coverageHooks';\nimport CoverageInstrumenterTranspiler, { CoverageMapsByFile } from '../transpiler/CoverageInstrumenterTranspiler';\nimport SourceMapper from '../transpiler/SourceMapper';\nimport { TemporaryDirectory } from '../utils/TemporaryDirectory';\nimport Timer from '../utils/Timer';\n\n// The initial run might take a while.\n// For example: angular-bootstrap takes up to 45 seconds.\n// Lets take 5 minutes just to be sure\nconst INITIAL_RUN_TIMEOUT = 60 * 1000 * 5;\nconst INITIAL_TEST_RUN_MARKER = 'Initial test run';\n\nexport interface InitialTestRunResult {\n  runResult: RunResult;\n  overheadTimeMS: number;\n  sourceMapper: SourceMapper;\n  coverageMaps: CoverageMapsByFile;\n}\n\n/**\n * A small object that keeps the timing variables of a test run.\n */\ninterface Timing {\n  /**\n   * The time that the test runner was actually executing tests in milliseconds.\n   */\n  net: number;\n  /**\n   * the time that was spend not executing tests in milliseconds.\n   * So the time it took to start the test runner and to report the result.\n   */\n  overhead: number;\n}\n\nexport default class InitialTestExecutor {\n  public static inject = tokens(\n    commonTokens.options,\n    commonTokens.logger,\n    coreTokens.inputFiles,\n    coreTokens.testFramework,\n    coreTokens.timer,\n    coreTokens.loggingContext,\n    coreTokens.transpiler,\n    coreTokens.temporaryDirectory\n  );\n\n  constructor(\n    private readonly options: StrykerOptions,\n    private readonly log: Logger,\n    private readonly inputFiles: InputFileCollection,\n    private readonly testFramework: TestFramework | null,\n    private readonly timer: Timer,\n    private readonly loggingContext: LoggingClientContext,\n    private readonly transpiler: Transpiler,\n    private readonly tempDir: TemporaryDirectory\n  ) {}\n\n  public async run(): Promise<InitialTestRunResult> {\n    this.log.info('Starting initial test run. This may take a while.');\n\n    // Before we can run the tests we transpile the input files.\n    // Files that are not transpiled should pass through without transpiling\n    const transpiledFiles = await this.transpiler.transpile(this.inputFiles.files);\n\n    // Now that we have the transpiled files, we create a source mapper so\n    // we can figure out which files we need to annotate for code coverage\n    const sourceMapper = SourceMapper.create(transpiledFiles, this.options);\n\n    // Annotate the transpiled files for code coverage. This allows the\n    // test runner to report code coverage (if `coverageAnalysis` is enabled)\n    const { coverageMaps, instrumentedFiles } = await this.annotateForCodeCoverage(transpiledFiles, sourceMapper);\n    this.logTranspileResult(instrumentedFiles);\n\n    const { runResult, grossTimeMS } = await this.runInSandbox(instrumentedFiles);\n    const timing = this.calculateTiming(grossTimeMS, runResult.tests);\n    this.validateResult(runResult, timing);\n    return {\n      coverageMaps,\n      overheadTimeMS: timing.overhead,\n      runResult,\n      sourceMapper\n    };\n  }\n\n  private async runInSandbox(files: readonly File[]): Promise<{ runResult: RunResult; grossTimeMS: number }> {\n    const sandbox = await Sandbox.create(this.options, 0, files, this.testFramework, 0, this.loggingContext, this.tempDir);\n    this.timer.mark(INITIAL_TEST_RUN_MARKER);\n    const runResult = await sandbox.run(INITIAL_RUN_TIMEOUT, this.getCollectCoverageHooksIfNeeded());\n    const grossTimeMS = this.timer.elapsedMs(INITIAL_TEST_RUN_MARKER);\n    await sandbox.dispose();\n    return { runResult, grossTimeMS };\n  }\n\n  private async annotateForCodeCoverage(\n    files: readonly File[],\n    sourceMapper: SourceMapper\n  ): Promise<{ instrumentedFiles: readonly File[]; coverageMaps: CoverageMapsByFile }> {\n    const filesToInstrument = this.inputFiles.filesToMutate.map(mutateFile => sourceMapper.transpiledFileNameFor(mutateFile.name));\n    const coverageInstrumenterTranspiler = new CoverageInstrumenterTranspiler(this.options, filesToInstrument);\n    const instrumentedFiles = await coverageInstrumenterTranspiler.transpile(files);\n    return { coverageMaps: coverageInstrumenterTranspiler.fileCoverageMaps, instrumentedFiles };\n  }\n\n  private validateResult(runResult: RunResult, timing: Timing): void {\n    switch (runResult.status) {\n      case RunStatus.Complete:\n        const failedTests = this.filterOutFailedTests(runResult);\n        if (failedTests.length) {\n          this.logFailedTestsInInitialRun(failedTests);\n          throw new Error('There were failed tests in the initial test run.');\n        }\n        if (runResult.tests.length === 0) {\n          this.log.warn('No tests were executed. Stryker will exit prematurely. Please check your configuration.');\n          return;\n        } else {\n          this.logInitialTestRunSucceeded(runResult.tests, timing);\n          return;\n        }\n      case RunStatus.Error:\n        this.logErrorsInInitialRun(runResult);\n        break;\n      case RunStatus.Timeout:\n        this.logTimeoutInitialRun(runResult);\n        break;\n    }\n    throw new Error('Something went wrong in the initial test run');\n  }\n\n  /**\n   * Calculates the timing variables for the test run.\n   * grossTime = NetTime + overheadTime\n   *\n   * The overhead time is used to calculate exact timeout values during mutation testing.\n   * See timeoutMS setting in README for more information on this calculation\n   */\n  private calculateTiming(grossTimeMS: number, tests: readonly TestResult[]): Timing {\n    const netTimeMS = tests.reduce((total, test) => total + test.timeSpentMs, 0);\n    const overheadTimeMS = grossTimeMS - netTimeMS;\n    return {\n      net: netTimeMS,\n      overhead: overheadTimeMS < 0 ? 0 : overheadTimeMS\n    };\n  }\n\n  private getCollectCoverageHooksIfNeeded(): string | undefined {\n    if (this.options.coverageAnalysis === 'perTest') {\n      if (this.testFramework) {\n        // Add piece of javascript to collect coverage per test results\n        this.log.debug('Adding test hooks for coverageAnalysis \"perTest\".');\n        return coveragePerTestHooks(this.testFramework);\n      } else {\n        this.log.warn(\n          'Cannot measure coverage results per test, there is no testFramework and thus no way of executing code right before and after each test.'\n        );\n      }\n    }\n    return undefined;\n  }\n\n  private logTranspileResult(transpiledFiles: readonly File[]) {\n    if (this.options.transpilers.length && this.log.isDebugEnabled()) {\n      this.log.debug(\n        `Transpiled files: ${JSON.stringify(\n          transpiledFiles.map(f => `${f.name}`),\n          null,\n          2\n        )}`\n      );\n    }\n  }\n\n  private filterOutFailedTests(runResult: RunResult) {\n    return runResult.tests.filter(testResult => testResult.status === TestStatus.Failed);\n  }\n\n  private logInitialTestRunSucceeded(tests: TestResult[], timing: Timing) {\n    this.log.info(\n      'Initial test run succeeded. Ran %s tests in %s (net %s ms, overhead %s ms).',\n      tests.length,\n      this.timer.humanReadableElapsed(),\n      timing.net,\n      timing.overhead\n    );\n  }\n\n  private logFailedTestsInInitialRun(failedTests: TestResult[]): void {\n    let message = 'One or more tests failed in the initial test run:';\n    failedTests.forEach(test => {\n      message += `${EOL}\\t${test.name}`;\n      if (test.failureMessages && test.failureMessages.length) {\n        message += `${EOL}\\t\\t${test.failureMessages.join(`${EOL}\\t\\t`)}`;\n      }\n    });\n    this.log.error(message);\n  }\n  private logErrorsInInitialRun(runResult: RunResult) {\n    let message = 'One or more tests resulted in an error:';\n    if (runResult.errorMessages && runResult.errorMessages.length) {\n      runResult.errorMessages.forEach(error => (message += `${EOL}\\t${error}`));\n    }\n    this.log.error(message);\n  }\n\n  private logTimeoutInitialRun(runResult: RunResult) {\n    let message = 'Initial test run timed out! Ran following tests before timeout:';\n    runResult.tests.forEach(test => (message += `${EOL}\\t${test.name} (${TestStatus[test.status]})`));\n    this.log.error(message);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/process/MutationTestExecutor.ts":{"language":"typescript","mutants":[{"id":"2063","location":{"end":{"column":4,"line":32},"start":{"column":84,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2064","location":{"end":{"column":4,"line":36},"start":{"column":73,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2065","location":{"end":{"column":4,"line":40},"start":{"column":73,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import { tokens } from '@stryker-mutator/api/plugin';\nimport { MutantResult } from '@stryker-mutator/api/report';\nimport { tap, toArray } from 'rxjs/operators';\n\nimport { coreTokens } from '../di';\nimport StrictReporter from '../reporters/StrictReporter';\nimport { SandboxPool } from '../SandboxPool';\nimport TestableMutant from '../TestableMutant';\nimport { MutantTranspileScheduler } from '../transpiler/MutantTranspileScheduler';\n\nexport class MutationTestExecutor {\n  public static inject = tokens(coreTokens.reporter, coreTokens.mutantTranspileScheduler, coreTokens.sandboxPool);\n  constructor(\n    private readonly reporter: StrictReporter,\n    private readonly mutantTranspileScheduler: MutantTranspileScheduler,\n    private readonly sandboxPool: SandboxPool\n  ) {}\n\n  public async run(allMutants: readonly TestableMutant[]): Promise<MutantResult[]> {\n    const results = await this.sandboxPool\n      .runMutants(this.mutantTranspileScheduler.scheduleTranspileMutants(allMutants))\n      .pipe(\n        tap(this.reportResult),\n        // Signal the mutant transpiler that there is another slot open for transpiling\n        tap(this.mutantTranspileScheduler.scheduleNext),\n        toArray(),\n        tap(this.reportAll)\n      )\n      .toPromise();\n\n    return results;\n  }\n\n  private readonly reportResult = (mutantResult: MutantResult): void => {\n    this.reporter.onMutantTested(mutantResult);\n  };\n\n  private readonly reportAll = (mutantResults: MutantResult[]): void => {\n    this.reporter.onAllMutantsTested(mutantResults);\n  };\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/reporters/BroadcastReporter.ts":{"language":"typescript","mutants":[{"id":"2066","location":{"end":{"column":4,"line":26},"start":{"column":5,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2067","location":{"end":{"column":85,"line":24},"start":{"column":36,"line":24}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"2068","location":{"end":{"column":4,"line":34},"start":{"column":54,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2069","location":{"end":{"column":61,"line":29},"start":{"column":9,"line":29}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2070","location":{"end":{"column":61,"line":29},"start":{"column":9,"line":29}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2071","location":{"end":{"column":39,"line":29},"start":{"column":37,"line":29}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"2072","location":{"end":{"column":25,"line":29},"start":{"column":22,"line":29}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2073","location":{"end":{"column":36,"line":29},"start":{"column":26,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2074","location":{"end":{"column":61,"line":29},"start":{"column":40,"line":29}},"mutatorName":"BooleanLiteral","replacement":"process.stdout.isTTY","status":"Killed"},{"id":"2075","location":{"end":{"column":6,"line":32},"start":{"column":63,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2076","location":{"end":{"column":141,"line":30},"start":{"column":21,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2077","location":{"end":{"column":44,"line":31},"start":{"column":22,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2078","location":{"end":{"column":4,"line":45},"start":{"column":37,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2079","location":{"end":{"column":29,"line":38},"start":{"column":9,"line":38}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2080","location":{"end":{"column":29,"line":38},"start":{"column":9,"line":38}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"2081","location":{"end":{"column":6,"line":42},"start":{"column":31,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"2082","location":{"end":{"column":36,"line":39},"start":{"column":11,"line":39}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"2083","location":{"end":{"column":36,"line":39},"start":{"column":11,"line":39}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"2084","location":{"end":{"column":8,"line":41},"start":{"column":38,"line":39}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"2085","location":{"end":{"column":84,"line":40},"start":{"column":24,"line":40}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"2086","location":{"end":{"column":6,"line":44},"start":{"column":12,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2087","location":{"end":{"column":131,"line":43},"start":{"column":21,"line":43}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2088","location":{"end":{"column":4,"line":66},"start":{"column":79,"line":47}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2089","location":{"end":{"column":8,"line":64},"start":{"column":61,"line":49}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2090","location":{"end":{"column":55,"line":51},"start":{"column":13,"line":51}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2091","location":{"end":{"column":55,"line":51},"start":{"column":13,"line":51}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2092","location":{"end":{"column":44,"line":51},"start":{"column":41,"line":51}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2093","location":{"end":{"column":55,"line":51},"start":{"column":45,"line":51}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2094","location":{"end":{"column":10,"line":63},"start":{"column":57,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2095","location":{"end":{"column":59,"line":52},"start":{"column":40,"line":52}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2096","location":{"end":{"column":50,"line":53},"start":{"column":15,"line":53}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"2097","location":{"end":{"column":50,"line":53},"start":{"column":15,"line":53}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2098","location":{"end":{"column":29,"line":53},"start":{"column":26,"line":53}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2099","location":{"end":{"column":12,"line":57},"start":{"column":52,"line":53}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2100","location":{"end":{"column":193,"line":55},"start":{"column":15,"line":55}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2101","location":{"end":{"column":12,"line":60},"start":{"column":15,"line":58}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2102","location":{"end":{"column":12,"line":62},"start":{"column":27,"line":60}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2103","location":{"end":{"column":4,"line":70},"start":{"column":51,"line":68}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2104","location":{"end":{"column":38,"line":69},"start":{"column":20,"line":69}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2105","location":{"end":{"column":4,"line":74},"start":{"column":58,"line":72}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2106","location":{"end":{"column":42,"line":73},"start":{"column":20,"line":73}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2107","location":{"end":{"column":4,"line":78},"start":{"column":80,"line":76}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2108","location":{"end":{"column":50,"line":77},"start":{"column":20,"line":77}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2109","location":{"end":{"column":4,"line":82},"start":{"column":53,"line":80}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2110","location":{"end":{"column":36,"line":81},"start":{"column":20,"line":81}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2111","location":{"end":{"column":4,"line":86},"start":{"column":60,"line":84}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2112","location":{"end":{"column":40,"line":85},"start":{"column":20,"line":85}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2113","location":{"end":{"column":4,"line":90},"start":{"column":95,"line":88}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2114","location":{"end":{"column":47,"line":89},"start":{"column":20,"line":89}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2115","location":{"end":{"column":4,"line":94},"start":{"column":54,"line":92}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2116","location":{"end":{"column":39,"line":93},"start":{"column":20,"line":93}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2117","location":{"end":{"column":4,"line":98},"start":{"column":40,"line":96}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2118","location":{"end":{"column":34,"line":97},"start":{"column":26,"line":97}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2119","location":{"end":{"column":4,"line":102},"start":{"column":79,"line":100}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2120","location":{"end":{"column":93,"line":101},"start":{"column":20,"line":101}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import { StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, PluginKind } from '@stryker-mutator/api/plugin';\nimport { MatchedMutant, MutantResult, mutationTestReportSchema, Reporter, ScoreResult, SourceFile } from '@stryker-mutator/api/report';\nimport { tokens } from 'typed-inject';\n\nimport { coreTokens } from '../di';\nimport { PluginCreator } from '../di/PluginCreator';\n\nimport StrictReporter from './StrictReporter';\n\nexport default class BroadcastReporter implements StrictReporter {\n  public static readonly inject = tokens(commonTokens.options, coreTokens.pluginCreatorReporter, commonTokens.logger);\n\n  public readonly reporters: {\n    [name: string]: Reporter;\n  };\n  constructor(\n    private readonly options: StrykerOptions,\n    private readonly pluginCreator: PluginCreator<PluginKind.Reporter>,\n    private readonly log: Logger\n  ) {\n    this.reporters = {};\n    this.options.reporters.forEach(reporterName => this.createReporter(reporterName));\n    this.logAboutReporters();\n  }\n\n  private createReporter(reporterName: string): void {\n    if (reporterName === 'progress' && !process.stdout.isTTY) {\n      this.log.info('Detected that current console does not support the \"progress\" reporter, downgrading to \"progress-append-only\" reporter');\n      reporterName = 'progress-append-only';\n    }\n    this.reporters[reporterName] = this.pluginCreator.create(reporterName);\n  }\n\n  private logAboutReporters(): void {\n    const reporterNames = Object.keys(this.reporters);\n    if (reporterNames.length) {\n      if (this.log.isDebugEnabled()) {\n        this.log.debug(`Broadcasting to reporters ${JSON.stringify(reporterNames)}`);\n      }\n    } else {\n      this.log.warn(\"No reporter configured. Please configure one or more reporters in the (for example: reporters: ['progress'])\");\n    }\n  }\n\n  private broadcast(methodName: keyof Reporter, eventArgs: any): Promise<any> {\n    return Promise.all(\n      Object.keys(this.reporters).map(async reporterName => {\n        const reporter = this.reporters[reporterName];\n        if (typeof reporter[methodName] === 'function') {\n          const deprecatedMethodName = 'onScoreCalculated';\n          if (methodName === deprecatedMethodName) {\n            this.log.warn(\n              `DEPRECATED: The reporter '${reporterName}' uses '${deprecatedMethodName}' which is deprecated. Please use 'onMutationTestReportReady' and calculate the score as an alternative.`\n            );\n          }\n          try {\n            await (reporter[methodName] as any)(eventArgs);\n          } catch (error) {\n            this.handleError(error, methodName, reporterName);\n          }\n        }\n      })\n    );\n  }\n\n  public onSourceFileRead(file: SourceFile): void {\n    this.broadcast('onSourceFileRead', file);\n  }\n\n  public onAllSourceFilesRead(files: SourceFile[]): void {\n    this.broadcast('onAllSourceFilesRead', files);\n  }\n\n  public onAllMutantsMatchedWithTests(results: readonly MatchedMutant[]): void {\n    this.broadcast('onAllMutantsMatchedWithTests', results);\n  }\n\n  public onMutantTested(result: MutantResult): void {\n    this.broadcast('onMutantTested', result);\n  }\n\n  public onAllMutantsTested(results: MutantResult[]): void {\n    this.broadcast('onAllMutantsTested', results);\n  }\n\n  public onMutationTestReportReady(report: mutationTestReportSchema.MutationTestResult): void {\n    this.broadcast('onMutationTestReportReady', report);\n  }\n\n  public onScoreCalculated(score: ScoreResult): void {\n    this.broadcast('onScoreCalculated', score);\n  }\n\n  public async wrapUp(): Promise<void> {\n    await this.broadcast('wrapUp', undefined);\n  }\n\n  private handleError(error: Error, methodName: string, reporterName: string) {\n    this.log.error(`An error occurred during '${methodName}' on reporter '${reporterName}'.`, error);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/reporters/ClearTextReporter.ts":{"language":"typescript","mutants":[{"id":"2121","location":{"end":{"column":4,"line":18},"start":{"column":87,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2122","location":{"end":{"column":4,"line":24},"start":{"column":38,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2123","location":{"end":{"column":46,"line":23},"start":{"column":20,"line":23}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2124","location":{"end":{"column":35,"line":23},"start":{"column":23,"line":23}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2125","location":{"end":{"column":35,"line":23},"start":{"column":23,"line":23}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2126","location":{"end":{"column":32,"line":23},"start":{"column":30,"line":23}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"2127","location":{"end":{"column":35,"line":23},"start":{"column":33,"line":23}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"2128","location":{"end":{"column":4,"line":30},"start":{"column":32,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2129","location":{"end":{"column":41,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"2130","location":{"end":{"column":41,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2131","location":{"end":{"column":41,"line":27},"start":{"column":9,"line":27}},"mutatorName":"BooleanLiteral","replacement":"this.options.allowConsoleColors","status":"Killed"},{"id":"2132","location":{"end":{"column":6,"line":29},"start":{"column":43,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2133","location":{"end":{"column":4,"line":70},"start":{"column":66,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2134","location":{"end":{"column":64,"line":37},"start":{"column":24,"line":37}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"2135","location":{"end":{"column":65,"line":38},"start":{"column":25,"line":38}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"2136","location":{"end":{"column":6,"line":68},"start":{"column":46,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2137","location":{"end":{"column":26,"line":41},"start":{"column":11,"line":41}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"2138","location":{"end":{"column":26,"line":41},"start":{"column":11,"line":41}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2139","location":{"end":{"column":8,"line":43},"start":{"column":28,"line":41}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2140","location":{"end":{"column":45,"line":42},"start":{"column":9,"line":42}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2141","location":{"end":{"column":45,"line":42},"start":{"column":9,"line":42}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2142","location":{"end":{"column":17,"line":48},"start":{"column":9,"line":45}},"mutatorName":"ConditionalExpression","replacement":"case MutantStatus.Killed:","status":"Survived"},{"id":"2143","location":{"end":{"column":59,"line":46},"start":{"column":43,"line":46}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2144","location":{"end":{"column":17,"line":52},"start":{"column":9,"line":49}},"mutatorName":"ConditionalExpression","replacement":"case MutantStatus.TimedOut:","status":"Survived"},{"id":"2145","location":{"end":{"column":63,"line":50},"start":{"column":44,"line":50}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2146","location":{"end":{"column":17,"line":56},"start":{"column":9,"line":53}},"mutatorName":"ConditionalExpression","replacement":"case MutantStatus.RuntimeError:","status":"Survived"},{"id":"2147","location":{"end":{"column":76,"line":54},"start":{"column":44,"line":54}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2148","location":{"end":{"column":17,"line":60},"start":{"column":9,"line":57}},"mutatorName":"ConditionalExpression","replacement":"case MutantStatus.TranspileError:","status":"Survived"},{"id":"2149","location":{"end":{"column":78,"line":58},"start":{"column":44,"line":58}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2150","location":{"end":{"column":17,"line":63},"start":{"column":9,"line":61}},"mutatorName":"ConditionalExpression","replacement":"case MutantStatus.Survived:","status":"Survived"},{"id":"2151","location":{"end":{"column":17,"line":66},"start":{"column":9,"line":64}},"mutatorName":"ConditionalExpression","replacement":"case MutantStatus.NoCoverage:","status":"Survived"},{"id":"2152","location":{"end":{"column":104,"line":69},"start":{"column":20,"line":69}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2153","location":{"end":{"column":40,"line":69},"start":{"column":39,"line":69}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Killed"},{"id":"2154","location":{"end":{"column":4,"line":88},"start":{"column":114,"line":72}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2155","location":{"end":{"column":89,"line":73},"start":{"column":23,"line":73}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2156","location":{"end":{"column":36,"line":76},"start":{"column":32,"line":76}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2157","location":{"end":{"column":6,"line":78},"start":{"column":54,"line":76}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2158","location":{"end":{"column":43,"line":77},"start":{"column":42,"line":77}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"2159","location":{"end":{"column":41,"line":77},"start":{"column":35,"line":77}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2160","location":{"end":{"column":35,"line":79},"start":{"column":31,"line":79}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2161","location":{"end":{"column":6,"line":81},"start":{"column":53,"line":79}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2162","location":{"end":{"column":45,"line":80},"start":{"column":44,"line":80}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"2163","location":{"end":{"column":43,"line":80},"start":{"column":37,"line":80}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2164","location":{"end":{"column":25,"line":82},"start":{"column":23,"line":82}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"2165","location":{"end":{"column":52,"line":83},"start":{"column":9,"line":83}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2166","location":{"end":{"column":52,"line":83},"start":{"column":9,"line":83}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2167","location":{"end":{"column":42,"line":83},"start":{"column":39,"line":83}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2168","location":{"end":{"column":52,"line":83},"start":{"column":43,"line":83}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2169","location":{"end":{"column":6,"line":85},"start":{"column":54,"line":83}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2170","location":{"end":{"column":61,"line":85},"start":{"column":16,"line":85}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"2171","location":{"end":{"column":61,"line":85},"start":{"column":16,"line":85}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2172","location":{"end":{"column":34,"line":85},"start":{"column":32,"line":85}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"2173","location":{"end":{"column":59,"line":85},"start":{"column":58,"line":85}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"2174","location":{"end":{"column":59,"line":85},"start":{"column":58,"line":85}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"2175","location":{"end":{"column":6,"line":87},"start":{"column":63,"line":85}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2176","location":{"end":{"column":57,"line":86},"start":{"column":25,"line":86}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2177","location":{"end":{"column":4,"line":98},"start":{"column":90,"line":90}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2178","location":{"end":{"column":80,"line":93},"start":{"column":9,"line":93}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"2179","location":{"end":{"column":80,"line":93},"start":{"column":9,"line":93}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"2180","location":{"end":{"column":35,"line":93},"start":{"column":33,"line":93}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"2181","location":{"end":{"column":74,"line":93},"start":{"column":71,"line":93}},"mutatorName":"EqualityOperator","replacement":"===","status":"Survived"},{"id":"2182","location":{"end":{"column":80,"line":93},"start":{"column":75,"line":93}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"2183","location":{"end":{"column":6,"line":95},"start":{"column":82,"line":93}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"2184","location":{"end":{"column":69,"line":94},"start":{"column":14,"line":94}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2185","location":{"end":{"column":110,"line":97},"start":{"column":12,"line":97}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"2186","location":{"end":{"column":72,"line":97},"start":{"column":54,"line":97}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2187","location":{"end":{"column":108,"line":97},"start":{"column":88,"line":97}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2188","location":{"end":{"column":119,"line":97},"start":{"column":116,"line":97}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2189","location":{"end":{"column":4,"line":128},"start":{"column":94,"line":100}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2190","location":{"end":{"column":73,"line":101},"start":{"column":37,"line":101}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2191","location":{"end":{"column":73,"line":101},"start":{"column":37,"line":101}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2192","location":{"end":{"column":70,"line":101},"start":{"column":68,"line":101}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"2193","location":{"end":{"column":42,"line":103},"start":{"column":9,"line":103}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2194","location":{"end":{"column":42,"line":103},"start":{"column":9,"line":103}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2195","location":{"end":{"column":42,"line":103},"start":{"column":9,"line":103}},"mutatorName":"BooleanLiteral","replacement":"clearTextReporterConfig.logTests","status":"Killed"},{"id":"2196","location":{"end":{"column":6,"line":105},"start":{"column":44,"line":103}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2197","location":{"end":{"column":54,"line":107},"start":{"column":9,"line":107}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"2198","location":{"end":{"column":54,"line":107},"start":{"column":9,"line":107}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2199","location":{"end":{"column":27,"line":107},"start":{"column":25,"line":107}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"2200","location":{"end":{"column":52,"line":107},"start":{"column":51,"line":107}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"2201","location":{"end":{"column":52,"line":107},"start":{"column":51,"line":107}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"2202","location":{"end":{"column":6,"line":127},"start":{"column":56,"line":107}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2203","location":{"end":{"column":68,"line":109},"start":{"column":11,"line":109}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2204","location":{"end":{"column":68,"line":109},"start":{"column":11,"line":109}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2205","location":{"end":{"column":59,"line":109},"start":{"column":56,"line":109}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2206","location":{"end":{"column":68,"line":109},"start":{"column":60,"line":109}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2207","location":{"end":{"column":8,"line":111},"start":{"column":70,"line":109}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2208","location":{"end":{"column":25,"line":113},"start":{"column":11,"line":113}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2209","location":{"end":{"column":25,"line":113},"start":{"column":11,"line":113}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2210","location":{"end":{"column":23,"line":113},"start":{"column":22,"line":113}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"2211","location":{"end":{"column":23,"line":113},"start":{"column":22,"line":113}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"2212","location":{"end":{"column":8,"line":126},"start":{"column":27,"line":113}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2213","location":{"end":{"column":40,"line":114},"start":{"column":27,"line":114}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2214","location":{"end":{"column":39,"line":115},"start":{"column":25,"line":115}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2215","location":{"end":{"column":28,"line":115},"start":{"column":27,"line":115}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Survived"},{"id":"2216","location":{"end":{"column":28,"line":115},"start":{"column":27,"line":115}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"2217","location":{"end":{"column":44,"line":115},"start":{"column":41,"line":115}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Timeout"},{"id":"2218","location":{"end":{"column":10,"line":121},"start":{"column":46,"line":115}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2219","location":{"end":{"column":45,"line":116},"start":{"column":15,"line":116}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2220","location":{"end":{"column":45,"line":116},"start":{"column":15,"line":116}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"2221","location":{"end":{"column":18,"line":116},"start":{"column":17,"line":116}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"2222","location":{"end":{"column":18,"line":116},"start":{"column":17,"line":116}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"2223","location":{"end":{"column":43,"line":116},"start":{"column":42,"line":116}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Survived"},{"id":"2224","location":{"end":{"column":12,"line":118},"start":{"column":47,"line":116}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"2225","location":{"end":{"column":37,"line":120},"start":{"column":36,"line":120}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"2226","location":{"end":{"column":35,"line":120},"start":{"column":29,"line":120}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2227","location":{"end":{"column":48,"line":122},"start":{"column":13,"line":122}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"2228","location":{"end":{"column":48,"line":122},"start":{"column":13,"line":122}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2229","location":{"end":{"column":25,"line":122},"start":{"column":24,"line":122}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Survived"},{"id":"2230","location":{"end":{"column":25,"line":122},"start":{"column":24,"line":122}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"2231","location":{"end":{"column":10,"line":124},"start":{"column":50,"line":122}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2232","location":{"end":{"column":87,"line":123},"start":{"column":29,"line":123}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2233","location":{"end":{"column":62,"line":123},"start":{"column":61,"line":123}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"2234","location":{"end":{"column":29,"line":125},"start":{"column":27,"line":125}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"2235","location":{"end":{"column":4,"line":133},"start":{"column":89,"line":130}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import * as os from 'os';\n\nimport { Position, StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens } from '@stryker-mutator/api/plugin';\nimport { MutantResult, MutantStatus, mutationTestReportSchema, Reporter } from '@stryker-mutator/api/report';\nimport { calculateMetrics } from 'mutation-testing-metrics';\nimport { tokens } from 'typed-inject';\n\nimport chalk = require('chalk');\n\nimport ClearTextScoreTable from './ClearTextScoreTable';\n\nexport default class ClearTextReporter implements Reporter {\n  public static inject = tokens(commonTokens.logger, commonTokens.options);\n  constructor(private readonly log: Logger, private readonly options: StrykerOptions) {\n    this.configConsoleColor();\n  }\n\n  private readonly out: NodeJS.WritableStream = process.stdout;\n\n  private writeLine(output?: string) {\n    this.out.write(`${output || ''}${os.EOL}`);\n  }\n\n  private configConsoleColor() {\n    if (!this.options.allowConsoleColors) {\n      chalk.level = 0; // All colors disabled\n    }\n  }\n\n  public onAllMutantsTested(mutantResults: MutantResult[]): void {\n    this.writeLine();\n    let totalTests = 0;\n\n    // use these fn's in order to preserve the 'this` pointer\n    const logDebugFn = (input: string) => this.log.debug(input);\n    const writeLineFn = (input: string) => this.writeLine(input);\n\n    mutantResults.forEach((result, index) => {\n      if (result.testsRan) {\n        totalTests += result.testsRan.length;\n      }\n      switch (result.status) {\n        case MutantStatus.Killed:\n          this.log.debug(chalk.bold.green('Mutant killed!'));\n          this.logMutantResult(result, index, logDebugFn);\n          break;\n        case MutantStatus.TimedOut:\n          this.log.debug(chalk.bold.yellow('Mutant timed out!'));\n          this.logMutantResult(result, index, logDebugFn);\n          break;\n        case MutantStatus.RuntimeError:\n          this.log.debug(chalk.bold.yellow('Mutant caused a runtime error!'));\n          this.logMutantResult(result, index, logDebugFn);\n          break;\n        case MutantStatus.TranspileError:\n          this.log.debug(chalk.bold.yellow('Mutant caused a transpile error!'));\n          this.logMutantResult(result, index, logDebugFn);\n          break;\n        case MutantStatus.Survived:\n          this.logMutantResult(result, index, writeLineFn);\n          break;\n        case MutantStatus.NoCoverage:\n          this.logMutantResult(result, index, writeLineFn);\n          break;\n      }\n    });\n    this.writeLine(`Ran ${(totalTests / mutantResults.length).toFixed(2)} tests per mutant on average.`);\n  }\n\n  private logMutantResult(result: MutantResult, index: number, logImplementation: (input: string) => void): void {\n    logImplementation(`${index}. [${MutantStatus[result.status]}] ${result.mutatorName}`);\n    logImplementation(this.colorSourceFileAndLocation(result.sourceFilePath, result.location.start));\n\n    result.originalLines.split('\\n').forEach(line => {\n      logImplementation(chalk.red('-   ' + line));\n    });\n    result.mutatedLines.split('\\n').forEach(line => {\n      logImplementation(chalk.green('+   ' + line));\n    });\n    logImplementation('');\n    if (this.options.coverageAnalysis === 'perTest') {\n      this.logExecutedTests(result, logImplementation);\n    } else if (result.testsRan && result.testsRan.length > 0) {\n      logImplementation('Ran all tests for this mutant.');\n    }\n  }\n\n  private colorSourceFileAndLocation(sourceFilePath: string, position: Position): string {\n    const clearTextReporterConfig = this.options.clearTextReporter;\n\n    if (clearTextReporterConfig && clearTextReporterConfig.allowColor !== false) {\n      return `${sourceFilePath}:${position.line}:${position.column}`;\n    }\n\n    return [chalk.cyan(sourceFilePath), chalk.yellow(`${position.line}`), chalk.yellow(`${position.column}`)].join(':');\n  }\n\n  private logExecutedTests(result: MutantResult, logImplementation: (input: string) => void) {\n    const clearTextReporterConfig = this.options.clearTextReporter || {};\n\n    if (!clearTextReporterConfig.logTests) {\n      return;\n    }\n\n    if (result.testsRan && result.testsRan.length > 0) {\n      let testsToLog = 3;\n      if (typeof clearTextReporterConfig.maxTestsToLog === 'number') {\n        testsToLog = clearTextReporterConfig.maxTestsToLog;\n      }\n\n      if (testsToLog > 0) {\n        logImplementation('Tests ran: ');\n        for (let i = 0; i < testsToLog; i++) {\n          if (i > result.testsRan.length - 1) {\n            break;\n          }\n\n          logImplementation('    ' + result.testsRan[i]);\n        }\n        if (testsToLog < result.testsRan.length) {\n          logImplementation(`  and ${result.testsRan.length - testsToLog} more tests!`);\n        }\n        logImplementation('');\n      }\n    }\n  }\n\n  public onMutationTestReportReady(report: mutationTestReportSchema.MutationTestResult) {\n    const metricsResult = calculateMetrics(report.files);\n    this.writeLine(new ClearTextScoreTable(metricsResult, this.options.thresholds).draw());\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/reporters/ClearTextScoreTable.ts":{"language":"typescript","mutants":[{"id":"2236","location":{"end":{"column":36,"line":9},"start":{"column":25,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2237","location":{"end":{"column":100,"line":13},"start":{"column":16,"line":13}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2238","location":{"end":{"column":89,"line":13},"start":{"column":50,"line":13}},"mutatorName":"ArrayDeclaration","replacement":"new Array()","status":"Killed"},{"id":"2239","location":{"end":{"column":71,"line":13},"start":{"column":60,"line":13}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2240","location":{"end":{"column":71,"line":13},"start":{"column":60,"line":13}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2241","location":{"end":{"column":68,"line":13},"start":{"column":67,"line":13}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"2242","location":{"end":{"column":68,"line":13},"start":{"column":67,"line":13}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"2243","location":{"end":{"column":71,"line":13},"start":{"column":69,"line":13}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Killed"},{"id":"2244","location":{"end":{"column":82,"line":13},"start":{"column":81,"line":13}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"2245","location":{"end":{"column":45,"line":14},"start":{"column":16,"line":14}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2246","location":{"end":{"column":41,"line":14},"start":{"column":38,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2247","location":{"end":{"column":43,"line":15},"start":{"column":14,"line":15}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2248","location":{"end":{"column":39,"line":15},"start":{"column":36,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2249","location":{"end":{"column":4,"line":26},"start":{"column":110,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2250","location":{"end":{"column":4,"line":33},"start":{"column":99,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2251","location":{"end":{"column":104,"line":29},"start":{"column":46,"line":29}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2252","location":{"end":{"column":101,"line":29},"start":{"column":100,"line":29}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"2253","location":{"end":{"column":4,"line":41},"start":{"column":40,"line":39}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2254","location":{"end":{"column":64,"line":40},"start":{"column":12,"line":40}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2255","location":{"end":{"column":49,"line":40},"start":{"column":48,"line":40}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"2256","location":{"end":{"column":34,"line":40},"start":{"column":33,"line":40}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"2257","location":{"end":{"column":4,"line":45},"start":{"column":29,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2258","location":{"end":{"column":22,"line":44},"start":{"column":19,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2259","location":{"end":{"column":4,"line":49},"start":{"column":69,"line":47}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2260","location":{"end":{"column":4,"line":53},"start":{"column":23,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2261","location":{"end":{"column":4,"line":57},"start":{"column":42,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2262","location":{"end":{"column":36,"line":56},"start":{"column":12,"line":56}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2263","location":{"end":{"column":4,"line":63},"start":{"column":90,"line":61}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2264","location":{"end":{"column":20,"line":62},"start":{"column":11,"line":62}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2265","location":{"end":{"column":65,"line":62},"start":{"column":22,"line":62}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2266","location":{"end":{"column":4,"line":72},"start":{"column":49,"line":64}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2267","location":{"end":{"column":68,"line":65},"start":{"column":9,"line":65}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"2268","location":{"end":{"column":68,"line":65},"start":{"column":9,"line":65}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"2269","location":{"end":{"column":47,"line":65},"start":{"column":45,"line":65}},"mutatorName":"EqualityOperator","replacement":"<","status":"Survived"},{"id":"2270","location":{"end":{"column":47,"line":65},"start":{"column":45,"line":65}},"mutatorName":"EqualityOperator","replacement":">","status":"Survived"},{"id":"2271","location":{"end":{"column":6,"line":67},"start":{"column":70,"line":65}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2272","location":{"end":{"column":74,"line":67},"start":{"column":16,"line":67}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"2273","location":{"end":{"column":74,"line":67},"start":{"column":16,"line":67}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"2274","location":{"end":{"column":54,"line":67},"start":{"column":52,"line":67}},"mutatorName":"EqualityOperator","replacement":"<","status":"Survived"},{"id":"2275","location":{"end":{"column":54,"line":67},"start":{"column":52,"line":67}},"mutatorName":"EqualityOperator","replacement":">","status":"Survived"},{"id":"2276","location":{"end":{"column":6,"line":69},"start":{"column":76,"line":67}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2277","location":{"end":{"column":6,"line":71},"start":{"column":12,"line":69}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2278","location":{"end":{"column":4,"line":78},"start":{"column":36,"line":76}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2279","location":{"end":{"column":17,"line":77},"start":{"column":11,"line":77}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2280","location":{"end":{"column":117,"line":77},"start":{"column":19,"line":77}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2281","location":{"end":{"column":66,"line":77},"start":{"column":65,"line":77}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"2282","location":{"end":{"column":87,"line":77},"start":{"column":68,"line":77}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2283","location":{"end":{"column":87,"line":77},"start":{"column":68,"line":77}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2284","location":{"end":{"column":85,"line":77},"start":{"column":82,"line":77}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2285","location":{"end":{"column":4,"line":81},"start":{"column":40,"line":79}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2286","location":{"end":{"column":63,"line":80},"start":{"column":12,"line":80}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2287","location":{"end":{"column":58,"line":80},"start":{"column":57,"line":80}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"2288","location":{"end":{"column":43,"line":80},"start":{"column":42,"line":80}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"2289","location":{"end":{"column":4,"line":100},"start":{"column":99,"line":90}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2290","location":{"end":{"column":6,"line":99},"start":{"column":20,"line":91}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"2291","location":{"end":{"column":28,"line":94},"start":{"column":18,"line":94}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2292","location":{"end":{"column":66,"line":94},"start":{"column":30,"line":94}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2293","location":{"end":{"column":29,"line":95},"start":{"column":18,"line":95}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2294","location":{"end":{"column":68,"line":95},"start":{"column":31,"line":95}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2295","location":{"end":{"column":30,"line":96},"start":{"column":18,"line":96}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2296","location":{"end":{"column":70,"line":96},"start":{"column":32,"line":96}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2297","location":{"end":{"column":28,"line":97},"start":{"column":18,"line":97}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2298","location":{"end":{"column":70,"line":97},"start":{"column":30,"line":97}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2299","location":{"end":{"column":27,"line":98},"start":{"column":18,"line":98}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2300","location":{"end":{"column":102,"line":98},"start":{"column":29,"line":98}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2301","location":{"end":{"column":64,"line":98},"start":{"column":63,"line":98}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"2302","location":{"end":{"column":4,"line":104},"start":{"column":24,"line":102}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2303","location":{"end":{"column":52,"line":103},"start":{"column":25,"line":103}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2304","location":{"end":{"column":4,"line":108},"start":{"column":24,"line":106}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2305","location":{"end":{"column":44,"line":107},"start":{"column":25,"line":107}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2306","location":{"end":{"column":4,"line":112},"start":{"column":52,"line":110}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2307","location":{"end":{"column":48,"line":111},"start":{"column":47,"line":111}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"2308","location":{"end":{"column":45,"line":111},"start":{"column":42,"line":111}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2309","location":{"end":{"column":52,"line":111},"start":{"column":49,"line":111}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2310","location":{"end":{"column":4,"line":118},"start":{"column":81,"line":114}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2311","location":{"end":{"column":72,"line":115},"start":{"column":12,"line":115}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"CompileError"},{"id":"2312","location":{"end":{"column":70,"line":115},"start":{"column":26,"line":115}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2313","location":{"end":{"column":87,"line":116},"start":{"column":37,"line":116}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2314","location":{"end":{"column":84,"line":116},"start":{"column":83,"line":116}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"2315","location":{"end":{"column":4,"line":125},"start":{"column":17,"line":123}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2316","location":{"end":{"column":120,"line":124},"start":{"column":12,"line":124}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"}],"source":"import * as os from 'os';\n\nimport { MutationScoreThresholds } from '@stryker-mutator/api/core';\nimport { MetricsResult } from 'mutation-testing-metrics';\n\nimport chalk = require('chalk');\nimport flatMap = require('lodash.flatmap');\n\nconst FILES_ROOT_NAME = 'All files';\n\ntype TableCellValueFactory = (row: MetricsResult, ancestorCount: number) => string;\n\nconst repeat = (char: string, nTimes: number) => new Array(nTimes > -1 ? nTimes + 1 : 0).join(char);\nconst spaces = (n: number) => repeat(' ', n);\nconst dots = (n: number) => repeat('.', n);\n\n/**\n * Represents a column in the clear text table\n */\nclass Column {\n  protected width: number;\n\n  constructor(public header: string, public valueFactory: TableCellValueFactory, public rows: MetricsResult) {\n    const maxContentSize = this.determineValueSize();\n    this.width = this.pad(dots(maxContentSize)).length;\n  }\n\n  protected determineValueSize(row: MetricsResult = this.rows, ancestorCount: number = 0): number {\n    const valueWidths = row.childResults.map(child => this.determineValueSize(child, ancestorCount + 1));\n    valueWidths.push(this.header.length);\n    valueWidths.push(this.valueFactory(row, ancestorCount).length);\n    return Math.max(...valueWidths);\n  }\n\n  /**\n   * Adds padding (spaces) to the front and end of a value\n   * @param input The string input\n   */\n  protected pad(input: string): string {\n    return `${spaces(this.width - input.length - 2)} ${input} `;\n  }\n\n  public drawLine(): string {\n    return repeat('-', this.width);\n  }\n\n  public drawTableCell(score: MetricsResult, ancestorCount: number) {\n    return this.color(score)(this.pad(this.valueFactory(score, ancestorCount)));\n  }\n\n  public drawHeader() {\n    return this.pad(this.header);\n  }\n\n  protected color(_score: MetricsResult) {\n    return (input: string) => input;\n  }\n}\n\nclass MutationScoreColumn extends Column {\n  constructor(rows: MetricsResult, private readonly thresholds: MutationScoreThresholds) {\n    super('% score', row => row.metrics.mutationScore.toFixed(2), rows);\n  }\n  protected color(metricsResult: MetricsResult) {\n    if (metricsResult.metrics.mutationScore >= this.thresholds.high) {\n      return chalk.green;\n    } else if (metricsResult.metrics.mutationScore >= this.thresholds.low) {\n      return chalk.yellow;\n    } else {\n      return chalk.red;\n    }\n  }\n}\n\nclass FileColumn extends Column {\n  constructor(rows: MetricsResult) {\n    super('File', (row, ancestorCount) => spaces(ancestorCount) + (ancestorCount === 0 ? FILES_ROOT_NAME : row.name), rows);\n  }\n  protected pad(input: string): string {\n    return `${input} ${spaces(this.width - input.length - 1)}`;\n  }\n}\n\n/**\n * Represents a clear text table for mutation score\n */\nexport default class ClearTextScoreTable {\n  private readonly columns: Column[];\n\n  constructor(private readonly metricsResult: MetricsResult, thresholds: MutationScoreThresholds) {\n    this.columns = [\n      new FileColumn(metricsResult),\n      new MutationScoreColumn(metricsResult, thresholds),\n      new Column('# killed', row => row.metrics.killed.toString(), metricsResult),\n      new Column('# timeout', row => row.metrics.timeout.toString(), metricsResult),\n      new Column('# survived', row => row.metrics.survived.toString(), metricsResult),\n      new Column('# no cov', row => row.metrics.noCoverage.toString(), metricsResult),\n      new Column('# error', row => (row.metrics.runtimeErrors + row.metrics.compileErrors).toString(), metricsResult)\n    ];\n  }\n\n  private drawBorder() {\n    return this.drawRow(column => column.drawLine());\n  }\n\n  private drawHeader() {\n    return this.drawRow(c => c.drawHeader());\n  }\n\n  private drawRow(toDraw: (col: Column) => string) {\n    return this.columns.map(toDraw).join('|') + '|';\n  }\n\n  private drawValues(current = this.metricsResult, ancestorCount = 0): string[] {\n    return [this.drawRow(c => c.drawTableCell(current, ancestorCount))].concat(\n      flatMap(current.childResults, child => this.drawValues(child, ancestorCount + 1))\n    );\n  }\n\n  /**\n   * Returns a string with the score results drawn in a table.\n   */\n  public draw() {\n    return [this.drawBorder(), this.drawHeader(), this.drawBorder(), this.drawValues().join(os.EOL), this.drawBorder()].join(os.EOL);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/reporters/DotsReporter.ts":{"language":"typescript","mutants":[{"id":"2317","location":{"end":{"column":4,"line":28},"start":{"column":47,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2318","location":{"end":{"column":15,"line":13},"start":{"column":7,"line":11}},"mutatorName":"ConditionalExpression","replacement":"case MutantStatus.Killed:","status":"Killed"},{"id":"2319","location":{"end":{"column":20,"line":12},"start":{"column":17,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2320","location":{"end":{"column":15,"line":16},"start":{"column":7,"line":14}},"mutatorName":"ConditionalExpression","replacement":"case MutantStatus.TimedOut:","status":"Killed"},{"id":"2321","location":{"end":{"column":33,"line":15},"start":{"column":30,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2322","location":{"end":{"column":15,"line":19},"start":{"column":7,"line":17}},"mutatorName":"ConditionalExpression","replacement":"case MutantStatus.Survived:","status":"Killed"},{"id":"2323","location":{"end":{"column":35,"line":18},"start":{"column":32,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2324","location":{"end":{"column":15,"line":22},"start":{"column":7,"line":20}},"mutatorName":"ConditionalExpression","replacement":"case MutantStatus.RuntimeError:","status":"Survived"},{"id":"2325","location":{"end":{"column":33,"line":21},"start":{"column":30,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"2326","location":{"end":{"column":15,"line":25},"start":{"column":7,"line":23}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"CompileError"},{"id":"2327","location":{"end":{"column":19,"line":24},"start":{"column":17,"line":24}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"NoCoverage"},{"id":"2328","location":{"end":{"column":4,"line":32},"start":{"column":37,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import * as os from 'os';\n\nimport { MutantResult, MutantStatus, Reporter } from '@stryker-mutator/api/report';\n\nimport chalk = require('chalk');\n\nexport default class DotsReporter implements Reporter {\n  public onMutantTested(result: MutantResult) {\n    let toLog: string;\n    switch (result.status) {\n      case MutantStatus.Killed:\n        toLog = '.';\n        break;\n      case MutantStatus.TimedOut:\n        toLog = chalk.yellow('T');\n        break;\n      case MutantStatus.Survived:\n        toLog = chalk.bold.red('S');\n        break;\n      case MutantStatus.RuntimeError:\n        toLog = chalk.yellow('E');\n        break;\n      default:\n        toLog = '';\n        break;\n    }\n    process.stdout.write(toLog);\n  }\n\n  public onAllMutantsTested(): void {\n    process.stdout.write(os.EOL);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/reporters/EventRecorderReporter.ts":{"language":"typescript","mutants":[{"id":"2329","location":{"end":{"column":54,"line":13},"start":{"column":29,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2330","location":{"end":{"column":54,"line":18},"start":{"column":52,"line":18}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"2331","location":{"end":{"column":4,"line":25},"start":{"column":87,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2332","location":{"end":{"column":4,"line":40},"start":{"column":28,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2333","location":{"end":{"column":26,"line":28},"start":{"column":9,"line":28}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"2334","location":{"end":{"column":26,"line":28},"start":{"column":9,"line":28}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2335","location":{"end":{"column":26,"line":28},"start":{"column":9,"line":28}},"mutatorName":"BooleanLiteral","replacement":"this._baseFolder","status":"Killed"},{"id":"2336","location":{"end":{"column":6,"line":38},"start":{"column":28,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2337","location":{"end":{"column":75,"line":29},"start":{"column":11,"line":29}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2338","location":{"end":{"column":75,"line":29},"start":{"column":11,"line":29}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"2339","location":{"end":{"column":40,"line":29},"start":{"column":38,"line":29}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"2340","location":{"end":{"column":8,"line":32},"start":{"column":77,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"2341","location":{"end":{"column":76,"line":31},"start":{"column":24,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"2342","location":{"end":{"column":8,"line":37},"start":{"column":14,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2343","location":{"end":{"column":152,"line":34},"start":{"column":11,"line":34}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2344","location":{"end":{"column":4,"line":46},"start":{"column":62,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2345","location":{"end":{"column":98,"line":43},"start":{"column":49,"line":43}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2346","location":{"end":{"column":76,"line":43},"start":{"column":64,"line":43}},"mutatorName":"UpdateOperator","replacement":"this.index--","status":"Survived"},{"id":"2347","location":{"end":{"column":69,"line":44},"start":{"column":20,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2348","location":{"end":{"column":87,"line":45},"start":{"column":67,"line":45}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"2349","location":{"end":{"column":85,"line":45},"start":{"column":79,"line":45}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2350","location":{"end":{"column":4,"line":56},"start":{"column":33,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2351","location":{"end":{"column":30,"line":50},"start":{"column":25,"line":50}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2352","location":{"end":{"column":28,"line":50},"start":{"column":27,"line":50}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"2353","location":{"end":{"column":28,"line":50},"start":{"column":27,"line":50}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"2354","location":{"end":{"column":39,"line":50},"start":{"column":38,"line":50}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Timeout"},{"id":"2355","location":{"end":{"column":6,"line":54},"start":{"column":44,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2356","location":{"end":{"column":20,"line":51},"start":{"column":11,"line":51}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"2357","location":{"end":{"column":20,"line":51},"start":{"column":11,"line":51}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2358","location":{"end":{"column":14,"line":51},"start":{"column":13,"line":51}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"2359","location":{"end":{"column":14,"line":51},"start":{"column":13,"line":51}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"2360","location":{"end":{"column":8,"line":53},"start":{"column":22,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2361","location":{"end":{"column":20,"line":52},"start":{"column":19,"line":52}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"2362","location":{"end":{"column":18,"line":52},"start":{"column":15,"line":52}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2363","location":{"end":{"column":4,"line":60},"start":{"column":54,"line":58}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2364","location":{"end":{"column":93,"line":59},"start":{"column":54,"line":59}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"2365","location":{"end":{"column":4,"line":64},"start":{"column":51,"line":62}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2366","location":{"end":{"column":33,"line":63},"start":{"column":15,"line":63}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2367","location":{"end":{"column":4,"line":68},"start":{"column":58,"line":66}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2368","location":{"end":{"column":37,"line":67},"start":{"column":15,"line":67}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2369","location":{"end":{"column":4,"line":72},"start":{"column":80,"line":70}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2370","location":{"end":{"column":45,"line":71},"start":{"column":15,"line":71}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2371","location":{"end":{"column":4,"line":76},"start":{"column":53,"line":74}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2372","location":{"end":{"column":31,"line":75},"start":{"column":15,"line":75}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2373","location":{"end":{"column":4,"line":80},"start":{"column":95,"line":78}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2374","location":{"end":{"column":42,"line":79},"start":{"column":15,"line":79}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2375","location":{"end":{"column":4,"line":84},"start":{"column":54,"line":82}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2376","location":{"end":{"column":34,"line":83},"start":{"column":15,"line":83}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2377","location":{"end":{"column":4,"line":88},"start":{"column":60,"line":86}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2378","location":{"end":{"column":35,"line":87},"start":{"column":15,"line":87}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2379","location":{"end":{"column":4,"line":93},"start":{"column":39,"line":90}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import * as path from 'path';\n\nimport { StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { MatchedMutant, MutantResult, mutationTestReportSchema, Reporter, ScoreResult, SourceFile } from '@stryker-mutator/api/report';\nimport { fsAsPromised } from '@stryker-mutator/util';\n\nimport { cleanFolder } from '../utils/fileUtils';\n\nimport StrictReporter from './StrictReporter';\n\nconst DEFAULT_BASE_FOLDER = 'reports/mutation/events';\n\nexport default class EventRecorderReporter implements StrictReporter {\n  public static readonly inject = tokens(commonTokens.logger, commonTokens.options);\n\n  private readonly allWork: Array<Promise<void>> = [];\n  private readonly createBaseFolderTask: Promise<any>;\n  private _baseFolder: string;\n  private index = 0;\n\n  constructor(private readonly log: Logger, private readonly options: StrykerOptions) {\n    this.createBaseFolderTask = cleanFolder(this.baseFolder);\n  }\n\n  private get baseFolder() {\n    if (!this._baseFolder) {\n      if (this.options.eventReporter && this.options.eventReporter.baseDir) {\n        this._baseFolder = this.options.eventReporter.baseDir;\n        this.log.debug(`Using configured output folder ${this._baseFolder}`);\n      } else {\n        this.log.debug(\n          `No base folder configuration found (using configuration: eventReporter: { baseDir: 'output/folder' }), using default ${DEFAULT_BASE_FOLDER}`\n        );\n        this._baseFolder = DEFAULT_BASE_FOLDER;\n      }\n    }\n    return this._baseFolder;\n  }\n\n  private writeToFile(methodName: keyof Reporter, data: any) {\n    const filename = path.join(this.baseFolder, `${this.format(this.index++)}-${methodName}.json`);\n    this.log.debug(`Writing event ${methodName} to file ${filename}`);\n    return fsAsPromised.writeFile(filename, JSON.stringify(data), { encoding: 'utf8' });\n  }\n\n  private format(input: number) {\n    let str = input.toString();\n    for (let i = 10000; i > 1; i = i / 10) {\n      if (i > input) {\n        str = '0' + str;\n      }\n    }\n    return str;\n  }\n\n  private work(eventName: keyof Reporter, data: any) {\n    this.allWork.push(this.createBaseFolderTask.then(() => this.writeToFile(eventName, data)));\n  }\n\n  public onSourceFileRead(file: SourceFile): void {\n    this.work('onSourceFileRead', file);\n  }\n\n  public onAllSourceFilesRead(files: SourceFile[]): void {\n    this.work('onAllSourceFilesRead', files);\n  }\n\n  public onAllMutantsMatchedWithTests(results: readonly MatchedMutant[]): void {\n    this.work('onAllMutantsMatchedWithTests', results);\n  }\n\n  public onMutantTested(result: MutantResult): void {\n    this.work('onMutantTested', result);\n  }\n\n  public onMutationTestReportReady(report: mutationTestReportSchema.MutationTestResult): void {\n    this.work('onMutationTestReportReady', report);\n  }\n\n  public onScoreCalculated(score: ScoreResult): void {\n    this.work('onScoreCalculated', score);\n  }\n\n  public onAllMutantsTested(results: MutantResult[]): void {\n    this.work('onAllMutantsTested', results);\n  }\n\n  public async wrapUp(): Promise<any> {\n    await this.createBaseFolderTask;\n    return Promise.all(this.allWork);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/reporters/MutationTestReportCalculator.ts":{"language":"typescript","mutants":[{"id":"2380","location":{"end":{"column":4,"line":24},"start":{"column":51,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2381","location":{"end":{"column":4,"line":32},"start":{"column":109,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2382","location":{"end":{"column":6,"line":31},"start":{"column":12,"line":27}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2383","location":{"end":{"column":27,"line":29},"start":{"column":22,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2384","location":{"end":{"column":4,"line":57},"start":{"column":106,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2385","location":{"end":{"column":6,"line":55},"start":{"column":37,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2386","location":{"end":{"column":21,"line":38},"start":{"column":11,"line":38}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2387","location":{"end":{"column":21,"line":38},"start":{"column":11,"line":38}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2388","location":{"end":{"column":8,"line":40},"start":{"column":23,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2389","location":{"end":{"column":8,"line":54},"start":{"column":14,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2390","location":{"end":{"column":104,"line":41},"start":{"column":55,"line":41}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"2391","location":{"end":{"column":104,"line":41},"start":{"column":63,"line":41}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2392","location":{"end":{"column":104,"line":41},"start":{"column":63,"line":41}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2393","location":{"end":{"column":76,"line":41},"start":{"column":73,"line":41}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2394","location":{"end":{"column":23,"line":42},"start":{"column":13,"line":42}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2395","location":{"end":{"column":23,"line":42},"start":{"column":13,"line":42}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2396","location":{"end":{"column":10,"line":48},"start":{"column":25,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2397","location":{"end":{"column":12,"line":47},"start":{"column":59,"line":43}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2398","location":{"end":{"column":57,"line":45},"start":{"column":22,"line":45}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"2399","location":{"end":{"column":10,"line":53},"start":{"column":16,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2400","location":{"end":{"column":87,"line":51},"start":{"column":34,"line":50}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2401","location":{"end":{"column":4,"line":71},"start":{"column":50,"line":59}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2402","location":{"end":{"column":17,"line":62},"start":{"column":12,"line":62}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2403","location":{"end":{"column":29,"line":64},"start":{"column":7,"line":63}},"mutatorName":"ConditionalExpression","replacement":"case '.tsx':","status":"Killed"},{"id":"2404","location":{"end":{"column":18,"line":63},"start":{"column":12,"line":63}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2405","location":{"end":{"column":28,"line":64},"start":{"column":16,"line":64}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2406","location":{"end":{"column":19,"line":65},"start":{"column":12,"line":65}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2407","location":{"end":{"column":23,"line":67},"start":{"column":7,"line":66}},"mutatorName":"ConditionalExpression","replacement":"case '.vue':","status":"Killed"},{"id":"2408","location":{"end":{"column":18,"line":66},"start":{"column":12,"line":66}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2409","location":{"end":{"column":22,"line":67},"start":{"column":16,"line":67}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2410","location":{"end":{"column":29,"line":69},"start":{"column":7,"line":68}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"CompileError"},{"id":"2411","location":{"end":{"column":28,"line":69},"start":{"column":16,"line":69}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2412","location":{"end":{"column":4,"line":81},"start":{"column":93,"line":73}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2413","location":{"end":{"column":6,"line":80},"start":{"column":12,"line":74}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2414","location":{"end":{"column":4,"line":88},"start":{"column":77,"line":83}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2415","location":{"end":{"column":6,"line":87},"start":{"column":12,"line":84}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2416","location":{"end":{"column":4,"line":95},"start":{"column":72,"line":90}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2417","location":{"end":{"column":6,"line":94},"start":{"column":12,"line":91}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2418","location":{"end":{"column":27,"line":92},"start":{"column":26,"line":92}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"2419","location":{"end":{"column":23,"line":93},"start":{"column":22,"line":93}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Killed"},{"id":"2420","location":{"end":{"column":4,"line":115},"start":{"column":81,"line":97}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2421","location":{"end":{"column":61,"line":100},"start":{"column":7,"line":99}},"mutatorName":"ConditionalExpression","replacement":"case MutantStatus.Killed:","status":"Killed"},{"id":"2422","location":{"end":{"column":65,"line":102},"start":{"column":7,"line":101}},"mutatorName":"ConditionalExpression","replacement":"case MutantStatus.NoCoverage:","status":"Killed"},{"id":"2423","location":{"end":{"column":67,"line":104},"start":{"column":7,"line":103}},"mutatorName":"ConditionalExpression","replacement":"case MutantStatus.RuntimeError:","status":"Killed"},{"id":"2424","location":{"end":{"column":63,"line":106},"start":{"column":7,"line":105}},"mutatorName":"ConditionalExpression","replacement":"case MutantStatus.Survived:","status":"Killed"},{"id":"2425","location":{"end":{"column":62,"line":108},"start":{"column":7,"line":107}},"mutatorName":"ConditionalExpression","replacement":"case MutantStatus.TimedOut:","status":"Killed"},{"id":"2426","location":{"end":{"column":67,"line":110},"start":{"column":7,"line":109}},"mutatorName":"ConditionalExpression","replacement":"case MutantStatus.TranspileError:","status":"CompileError"},{"id":"2427","location":{"end":{"column":67,"line":113},"start":{"column":7,"line":111}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"CompileError"},{"id":"2428","location":{"end":{"column":4,"line":119},"start":{"column":53,"line":117}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"2429","location":{"end":{"column":61,"line":118},"start":{"column":19,"line":118}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"}],"source":"import * as path from 'path';\n\nimport { Location, Position, StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { MutantResult, MutantStatus, mutationTestReportSchema, Reporter } from '@stryker-mutator/api/report';\nimport { normalizeWhitespaces } from '@stryker-mutator/util';\n\nimport { coreTokens } from '../di';\nimport InputFileCollection from '../input/InputFileCollection';\n\nexport class MutationTestReportCalculator {\n  public static inject = tokens(coreTokens.reporter, commonTokens.options, coreTokens.inputFiles, commonTokens.logger);\n\n  constructor(\n    private readonly reporter: Required<Reporter>,\n    private readonly options: StrykerOptions,\n    private readonly inputFiles: InputFileCollection,\n    private readonly log: Logger\n  ) {}\n\n  public report(results: readonly MutantResult[]) {\n    this.reporter.onMutationTestReportReady(this.mutationTestReport(results));\n  }\n\n  private mutationTestReport(results: readonly MutantResult[]): mutationTestReportSchema.MutationTestResult {\n    return {\n      files: this.toFileResults(results),\n      schemaVersion: '1.0',\n      thresholds: this.options.thresholds\n    };\n  }\n\n  private toFileResults(results: readonly MutantResult[]): mutationTestReportSchema.FileResultDictionary {\n    const resultDictionary: mutationTestReportSchema.FileResultDictionary = Object.create(null);\n    results.forEach(mutantResult => {\n      const fileResult = resultDictionary[mutantResult.sourceFilePath];\n      if (fileResult) {\n        fileResult.mutants.push(this.toMutantResult(mutantResult));\n      } else {\n        const sourceFile = this.inputFiles.files.find(file => file.name === mutantResult.sourceFilePath);\n        if (sourceFile) {\n          resultDictionary[mutantResult.sourceFilePath] = {\n            language: this.determineLanguage(sourceFile.name),\n            mutants: [this.toMutantResult(mutantResult)],\n            source: sourceFile.textContent\n          };\n        } else {\n          this.log.warn(\n            normalizeWhitespaces(`File \"${mutantResult.sourceFilePath}\" not found\n          in input files, but did receive mutant result for it. This shouldn't happen`)\n          );\n        }\n      }\n    });\n    return resultDictionary;\n  }\n\n  public determineLanguage(name: string): string {\n    const ext = path.extname(name).toLowerCase();\n    switch (ext) {\n      case '.ts':\n      case '.tsx':\n        return 'typescript';\n      case '.html':\n      case '.vue':\n        return 'html';\n      default:\n        return 'javascript';\n    }\n  }\n\n  private toMutantResult(mutantResult: MutantResult): mutationTestReportSchema.MutantResult {\n    return {\n      id: mutantResult.id,\n      location: this.toLocation(mutantResult.location),\n      mutatorName: mutantResult.mutatorName,\n      replacement: mutantResult.replacement,\n      status: this.toStatus(mutantResult.status)\n    };\n  }\n\n  private toLocation(location: Location): mutationTestReportSchema.Location {\n    return {\n      end: this.toPosition(location.end),\n      start: this.toPosition(location.start)\n    };\n  }\n\n  private toPosition(pos: Position): mutationTestReportSchema.Position {\n    return {\n      column: pos.column + 1, // convert from 0-based to 1-based\n      line: pos.line + 1\n    };\n  }\n\n  private toStatus(status: MutantStatus): mutationTestReportSchema.MutantStatus {\n    switch (status) {\n      case MutantStatus.Killed:\n        return mutationTestReportSchema.MutantStatus.Killed;\n      case MutantStatus.NoCoverage:\n        return mutationTestReportSchema.MutantStatus.NoCoverage;\n      case MutantStatus.RuntimeError:\n        return mutationTestReportSchema.MutantStatus.RuntimeError;\n      case MutantStatus.Survived:\n        return mutationTestReportSchema.MutantStatus.Survived;\n      case MutantStatus.TimedOut:\n        return mutationTestReportSchema.MutantStatus.Timeout;\n      case MutantStatus.TranspileError:\n        return mutationTestReportSchema.MutantStatus.CompileError;\n      default:\n        this.logUnsupportedMutantStatus(status);\n        return mutationTestReportSchema.MutantStatus.RuntimeError;\n    }\n  }\n\n  private logUnsupportedMutantStatus(status: never) {\n    this.log.warn('Unable to convert \"%s\" to a MutantStatus', status);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/reporters/ProgressAppendOnlyReporter.ts":{"language":"typescript","mutants":[{"id":"2430","location":{"end":{"column":4,"line":15},"start":{"column":87,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2431","location":{"end":{"column":30,"line":12},"start":{"column":9,"line":12}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"2432","location":{"end":{"column":30,"line":12},"start":{"column":9,"line":12}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2433","location":{"end":{"column":6,"line":14},"start":{"column":32,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2434","location":{"end":{"column":63,"line":13},"start":{"column":44,"line":13}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"2435","location":{"end":{"column":4,"line":19},"start":{"column":37,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"2436","location":{"end":{"column":4,"line":27},"start":{"column":20,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2437","location":{"end":{"column":140,"line":24},"start":{"column":139,"line":24}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"2438","location":{"end":{"column":118,"line":23},"start":{"column":117,"line":23}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"2439","location":{"end":{"column":116,"line":23},"start":{"column":7,"line":23}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2440","location":{"end":{"column":138,"line":24},"start":{"column":9,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2441","location":{"end":{"column":4,"line":31},"start":{"column":28,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2442","location":{"end":{"column":80,"line":30},"start":{"column":12,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2443","location":{"end":{"column":72,"line":30},"start":{"column":71,"line":30}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Killed"},{"id":"2444","location":{"end":{"column":49,"line":30},"start":{"column":48,"line":30}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Killed"}],"source":"import * as os from 'os';\n\nimport { MatchedMutant } from '@stryker-mutator/api/report';\n\nimport ProgressKeeper from './ProgressKeeper';\n\nexport default class ProgressAppendOnlyReporter extends ProgressKeeper {\n  private intervalReference: NodeJS.Timer;\n\n  public onAllMutantsMatchedWithTests(matchedMutants: readonly MatchedMutant[]): void {\n    super.onAllMutantsMatchedWithTests(matchedMutants);\n    if (matchedMutants.length) {\n      this.intervalReference = setInterval(() => this.render(), 10000);\n    }\n  }\n\n  public onAllMutantsTested(): void {\n    clearInterval(this.intervalReference);\n  }\n\n  private render() {\n    process.stdout.write(\n      `Mutation testing ${this.getPercentDone()} (elapsed: ${this.getElapsedTime()}, remaining: ${this.getEtc()}) ` +\n        `${this.progress.tested}/${this.progress.total} tested (${this.progress.survived} survived, ${this.progress.timedOut} timed out)` +\n        os.EOL\n    );\n  }\n\n  private getPercentDone() {\n    return `${Math.floor((this.progress.tested / this.progress.total) * 100)}%`;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/reporters/ProgressKeeper.ts":{"language":"typescript","mutants":[{"id":"2445","location":{"end":{"column":4,"line":13},"start":{"column":24,"line":8}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2446","location":{"end":{"column":4,"line":21},"start":{"column":87,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2447","location":{"end":{"column":110,"line":19},"start":{"column":59,"line":19}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"2448","location":{"end":{"column":110,"line":19},"start":{"column":64,"line":19}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2449","location":{"end":{"column":110,"line":19},"start":{"column":64,"line":19}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2450","location":{"end":{"column":81,"line":19},"start":{"column":79,"line":19}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"2451","location":{"end":{"column":78,"line":19},"start":{"column":64,"line":19}},"mutatorName":"BooleanLiteral","replacement":"m.runAllTests","status":"Killed"},{"id":"2452","location":{"end":{"column":110,"line":19},"start":{"column":82,"line":19}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2453","location":{"end":{"column":110,"line":19},"start":{"column":82,"line":19}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2454","location":{"end":{"column":108,"line":19},"start":{"column":105,"line":19}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2455","location":{"end":{"column":125,"line":19},"start":{"column":116,"line":19}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2456","location":{"end":{"column":50,"line":20},"start":{"column":49,"line":20}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"2457","location":{"end":{"column":4,"line":33},"start":{"column":53,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2458","location":{"end":{"column":68,"line":24},"start":{"column":9,"line":24}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2459","location":{"end":{"column":68,"line":24},"start":{"column":9,"line":24}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2460","location":{"end":{"column":68,"line":24},"start":{"column":9,"line":24}},"mutatorName":"BooleanLiteral","replacement":"this.mutantIdsWithoutCoverage.some(id => result.id === id)","status":"Killed"},{"id":"2461","location":{"end":{"column":67,"line":24},"start":{"column":45,"line":24}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"2462","location":{"end":{"column":67,"line":24},"start":{"column":51,"line":24}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2463","location":{"end":{"column":67,"line":24},"start":{"column":51,"line":24}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2464","location":{"end":{"column":64,"line":24},"start":{"column":61,"line":24}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2465","location":{"end":{"column":6,"line":26},"start":{"column":70,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2466","location":{"end":{"column":29,"line":25},"start":{"column":7,"line":25}},"mutatorName":"UpdateOperator","replacement":"this.progress.tested--","status":"Killed"},{"id":"2467","location":{"end":{"column":48,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2468","location":{"end":{"column":48,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2469","location":{"end":{"column":26,"line":27},"start":{"column":23,"line":27}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2470","location":{"end":{"column":6,"line":29},"start":{"column":50,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2471","location":{"end":{"column":31,"line":28},"start":{"column":7,"line":28}},"mutatorName":"UpdateOperator","replacement":"this.progress.survived--","status":"Killed"},{"id":"2472","location":{"end":{"column":48,"line":30},"start":{"column":9,"line":30}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2473","location":{"end":{"column":48,"line":30},"start":{"column":9,"line":30}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2474","location":{"end":{"column":26,"line":30},"start":{"column":23,"line":30}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2475","location":{"end":{"column":6,"line":32},"start":{"column":50,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2476","location":{"end":{"column":31,"line":31},"start":{"column":7,"line":31}},"mutatorName":"UpdateOperator","replacement":"this.progress.timedOut--","status":"Killed"},{"id":"2477","location":{"end":{"column":4,"line":37},"start":{"column":30,"line":35}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2478","location":{"end":{"column":4,"line":47},"start":{"column":22,"line":39}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2479","location":{"end":{"column":95,"line":40},"start":{"column":94,"line":40}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Killed"},{"id":"2480","location":{"end":{"column":71,"line":40},"start":{"column":70,"line":40}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Survived"},{"id":"2481","location":{"end":{"column":118,"line":40},"start":{"column":117,"line":40}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"2482","location":{"end":{"column":59,"line":42},"start":{"column":9,"line":42}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2483","location":{"end":{"column":59,"line":42},"start":{"column":9,"line":42}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2484","location":{"end":{"column":38,"line":42},"start":{"column":36,"line":42}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"2485","location":{"end":{"column":57,"line":42},"start":{"column":56,"line":42}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"2486","location":{"end":{"column":57,"line":42},"start":{"column":56,"line":42}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"2487","location":{"end":{"column":6,"line":44},"start":{"column":61,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2488","location":{"end":{"column":6,"line":46},"start":{"column":12,"line":44}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2489","location":{"end":{"column":19,"line":45},"start":{"column":14,"line":45}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2490","location":{"end":{"column":4,"line":59},"start":{"column":45,"line":49}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2491","location":{"end":{"column":45,"line":50},"start":{"column":44,"line":50}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Killed"},{"id":"2492","location":{"end":{"column":56,"line":52},"start":{"column":55,"line":52}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Killed"},{"id":"2493","location":{"end":{"column":48,"line":52},"start":{"column":47,"line":52}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Killed"},{"id":"2494","location":{"end":{"column":21,"line":54},"start":{"column":12,"line":54}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2495","location":{"end":{"column":21,"line":54},"start":{"column":12,"line":54}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2496","location":{"end":{"column":19,"line":54},"start":{"column":18,"line":54}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"2497","location":{"end":{"column":19,"line":54},"start":{"column":18,"line":54}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"2498","location":{"end":{"column":33,"line":55},"start":{"column":9,"line":55}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2499","location":{"end":{"column":20,"line":56},"start":{"column":9,"line":56}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2500","location":{"end":{"column":20,"line":56},"start":{"column":9,"line":56}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2501","location":{"end":{"column":18,"line":56},"start":{"column":17,"line":56}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"2502","location":{"end":{"column":18,"line":56},"start":{"column":17,"line":56}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"2503","location":{"end":{"column":23,"line":57},"start":{"column":9,"line":57}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2504","location":{"end":{"column":14,"line":58},"start":{"column":9,"line":58}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import { MatchedMutant, MutantResult, Reporter } from '@stryker-mutator/api/report';\nimport { MutantStatus } from '@stryker-mutator/api/report';\n\nimport Timer from '../utils/Timer';\n\nabstract class ProgressKeeper implements Reporter {\n  private timer: Timer;\n  protected progress = {\n    survived: 0,\n    timedOut: 0,\n    tested: 0,\n    total: 0\n  };\n\n  private mutantIdsWithoutCoverage: string[];\n\n  public onAllMutantsMatchedWithTests(matchedMutants: readonly MatchedMutant[]): void {\n    this.timer = new Timer();\n    this.mutantIdsWithoutCoverage = matchedMutants.filter(m => !m.runAllTests && m.scopedTestIds.length === 0).map(m => m.id);\n    this.progress.total = matchedMutants.length - this.mutantIdsWithoutCoverage.length;\n  }\n\n  public onMutantTested(result: MutantResult): void {\n    if (!this.mutantIdsWithoutCoverage.some(id => result.id === id)) {\n      this.progress.tested++;\n    }\n    if (result.status === MutantStatus.Survived) {\n      this.progress.survived++;\n    }\n    if (result.status === MutantStatus.TimedOut) {\n      this.progress.timedOut++;\n    }\n  }\n\n  protected getElapsedTime() {\n    return this.formatTime(this.timer.elapsedSeconds());\n  }\n\n  protected getEtc() {\n    const totalSecondsLeft = Math.floor((this.timer.elapsedSeconds() / this.progress.tested) * (this.progress.total - this.progress.tested));\n\n    if (isFinite(totalSecondsLeft) && totalSecondsLeft > 0) {\n      return this.formatTime(totalSecondsLeft);\n    } else {\n      return 'n/a';\n    }\n  }\n\n  private formatTime(timeInSeconds: number) {\n    const hours = Math.floor(timeInSeconds / 3600);\n\n    const minutes = Math.floor((timeInSeconds % 3600) / 60);\n\n    return hours > 0 // conditional time formatting\n      ? `~${hours}h ${minutes}m`\n      : minutes > 0\n      ? `~${minutes}m`\n      : '<1m';\n  }\n}\nexport default ProgressKeeper;\n"},"/home/runner/work/stryker/stryker/packages/core/src/reporters/ProgressReporter.ts":{"language":"typescript","mutants":[{"id":"2505","location":{"end":{"column":4,"line":21},"start":{"column":87,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2506","location":{"end":{"column":138,"line":12},"start":{"column":7,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2507","location":{"end":{"column":6,"line":20},"start":{"column":60,"line":14}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2508","location":{"end":{"column":20,"line":15},"start":{"column":17,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2509","location":{"end":{"column":22,"line":16},"start":{"column":19,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2510","location":{"end":{"column":4,"line":34},"start":{"column":53,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2511","location":{"end":{"column":99,"line":27},"start":{"column":32,"line":27}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"2512","location":{"end":{"column":43,"line":29},"start":{"column":9,"line":29}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2513","location":{"end":{"column":43,"line":29},"start":{"column":9,"line":29}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2514","location":{"end":{"column":22,"line":29},"start":{"column":21,"line":29}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"2515","location":{"end":{"column":22,"line":29},"start":{"column":21,"line":29}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"2516","location":{"end":{"column":6,"line":31},"start":{"column":45,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2517","location":{"end":{"column":6,"line":33},"start":{"column":12,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"2518","location":{"end":{"column":4,"line":38},"start":{"column":39,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2519","location":{"end":{"column":4,"line":42},"start":{"column":43,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import { MatchedMutant, MutantResult } from '@stryker-mutator/api/report';\n\nimport ProgressBar from './ProgressBar';\nimport ProgressKeeper from './ProgressKeeper';\n\nexport default class ProgressBarReporter extends ProgressKeeper {\n  private progressBar: ProgressBar;\n\n  public onAllMutantsMatchedWithTests(matchedMutants: readonly MatchedMutant[]): void {\n    super.onAllMutantsMatchedWithTests(matchedMutants);\n    const progressBarContent =\n      'Mutation testing  [:bar] :percent (elapsed: :et, remaining: :etc) :tested/:total tested (:survived survived, :timedOut timed out)';\n\n    this.progressBar = new ProgressBar(progressBarContent, {\n      complete: '=',\n      incomplete: ' ',\n      stream: process.stdout,\n      total: this.progress.total,\n      width: 50\n    });\n  }\n\n  public onMutantTested(result: MutantResult): void {\n    const ticksBefore = this.progress.tested;\n    super.onMutantTested(result);\n\n    const progressBarContent = { ...this.progress, et: this.getElapsedTime(), etc: this.getEtc() };\n\n    if (ticksBefore < this.progress.tested) {\n      this.tick(progressBarContent);\n    } else {\n      this.render(progressBarContent);\n    }\n  }\n\n  private tick(tickObj: object): void {\n    this.progressBar.tick(tickObj);\n  }\n\n  private render(renderObj: object): void {\n    this.progressBar.render(renderObj);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/reporters/ci/CircleProvider.ts":{"language":"typescript","mutants":[{"id":"2520","location":{"end":{"column":4,"line":11},"start":{"column":37,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2521","location":{"end":{"column":71,"line":10},"start":{"column":12,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2522","location":{"end":{"column":4,"line":14},"start":{"column":49,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2523","location":{"end":{"column":137,"line":13},"start":{"column":12,"line":13}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2524","location":{"end":{"column":137,"line":13},"start":{"column":12,"line":13}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2525","location":{"end":{"column":100,"line":13},"start":{"column":98,"line":13}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"2526","location":{"end":{"column":97,"line":13},"start":{"column":12,"line":13}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2527","location":{"end":{"column":97,"line":13},"start":{"column":12,"line":13}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2528","location":{"end":{"column":57,"line":13},"start":{"column":55,"line":13}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"2529","location":{"end":{"column":53,"line":13},"start":{"column":35,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2530","location":{"end":{"column":96,"line":13},"start":{"column":81,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2531","location":{"end":{"column":136,"line":13},"start":{"column":124,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2532","location":{"end":{"column":4,"line":20},"start":{"column":33,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2533","location":{"end":{"column":77,"line":17},"start":{"column":52,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2534","location":{"end":{"column":77,"line":18},"start":{"column":52,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2535","location":{"end":{"column":37,"line":19},"start":{"column":12,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2536","location":{"end":{"column":4,"line":33},"start":{"column":31,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2537","location":{"end":{"column":74,"line":27},"start":{"column":51,"line":27}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2538","location":{"end":{"column":35,"line":28},"start":{"column":9,"line":28}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2539","location":{"end":{"column":35,"line":28},"start":{"column":9,"line":28}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2540","location":{"end":{"column":34,"line":28},"start":{"column":28,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2541","location":{"end":{"column":6,"line":30},"start":{"column":37,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2542","location":{"end":{"column":41,"line":29},"start":{"column":38,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2543","location":{"end":{"column":6,"line":32},"start":{"column":12,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2544","location":{"end":{"column":32,"line":31},"start":{"column":28,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2545","location":{"end":{"column":46,"line":31},"start":{"column":43,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import { getEnvironmentVariable, getEnvironmentVariableOrThrow } from '../../utils/objectUtils';\n\nimport { CIProvider } from './Provider';\n\n/**\n * https://circleci.com/docs/2.0/env-vars/#built-in-environment-variables\n */\nclass CircleProvider implements CIProvider {\n  public determineProject(): string {\n    return `${this.determineProvider()}/${this.determineRepository()}`;\n  }\n  public determineVersion(): string | undefined {\n    return getEnvironmentVariable('CIRCLE_PR_NUMBER') || getEnvironmentVariable('CIRCLE_BRANCH') || getEnvironmentVariable('CIRCLE_TAG');\n  }\n\n  private determineRepository() {\n    const username = getEnvironmentVariableOrThrow('CIRCLE_PROJECT_USERNAME');\n    const repoName = getEnvironmentVariableOrThrow('CIRCLE_PROJECT_REPONAME');\n    return `${username}/${repoName}`;\n  }\n\n  private determineProvider() {\n    // Repo url can be in 2 forms:\n    // - 'git@github.com:company/repo.git'\n    // - 'https://github.com/company/repo'\n    // See https://discuss.circleci.com/t/circle-repository-url-changed-format-in-v2/15273\n    const repoUrl = getEnvironmentVariableOrThrow('CIRCLE_REPOSITORY_URL');\n    if (repoUrl.startsWith('git@')) {\n      return repoUrl.substr(4).split(':')[0];\n    } else {\n      return repoUrl.split('//')[1].split('/')[0];\n    }\n  }\n}\n\nexport default CircleProvider;\n"},"/home/runner/work/stryker/stryker/packages/core/src/reporters/ci/GithubActionsProvider.ts":{"language":"typescript","mutants":[{"id":"2546","location":{"end":{"column":4,"line":11},"start":{"column":37,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2547","location":{"end":{"column":78,"line":10},"start":{"column":12,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2548","location":{"end":{"column":75,"line":10},"start":{"column":56,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2549","location":{"end":{"column":4,"line":21},"start":{"column":37,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2550","location":{"end":{"column":62,"line":13},"start":{"column":50,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2551","location":{"end":{"column":47,"line":15},"start":{"column":44,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2552","location":{"end":{"column":24,"line":16},"start":{"column":9,"line":16}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2553","location":{"end":{"column":24,"line":16},"start":{"column":9,"line":16}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2554","location":{"end":{"column":17,"line":16},"start":{"column":14,"line":16}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2555","location":{"end":{"column":24,"line":16},"start":{"column":18,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2556","location":{"end":{"column":6,"line":18},"start":{"column":26,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2557","location":{"end":{"column":29,"line":17},"start":{"column":14,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2558","location":{"end":{"column":6,"line":20},"start":{"column":12,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2559","location":{"end":{"column":27,"line":19},"start":{"column":24,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import { getEnvironmentVariableOrThrow } from '../../utils/objectUtils';\n\nimport { CIProvider } from './Provider';\n\n/**\n * https://help.github.com/en/actions/automating-your-workflow-with-github-actions/using-environment-variables#default-environment-variables\n */\nexport default class GithubActionsCIProvider implements CIProvider {\n  public determineProject(): string {\n    return `github.com/${getEnvironmentVariableOrThrow('GITHUB_REPOSITORY')}`;\n  }\n  public determineVersion(): string {\n    const rawRef = getEnvironmentVariableOrThrow('GITHUB_REF');\n    // rawRef will be in the form \"refs/pull/:prNumber/merge\" or \"refs/heads/feat/branch-1\"\n    const [, type, ...name] = rawRef.split('/');\n    if (type === 'pull') {\n      return `PR-${name[0]}`;\n    } else {\n      return name.join('/');\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/reporters/ci/Provider.ts":{"language":"typescript","mutants":[{"id":"2560","location":{"end":{"column":2,"line":38},"start":{"column":39,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2561","location":{"end":{"column":60,"line":28},"start":{"column":7,"line":28}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2562","location":{"end":{"column":60,"line":28},"start":{"column":7,"line":28}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2563","location":{"end":{"column":59,"line":28},"start":{"column":30,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2564","location":{"end":{"column":4,"line":30},"start":{"column":62,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2565","location":{"end":{"column":48,"line":30},"start":{"column":14,"line":30}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2566","location":{"end":{"column":48,"line":30},"start":{"column":14,"line":30}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2567","location":{"end":{"column":47,"line":30},"start":{"column":37,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2568","location":{"end":{"column":4,"line":32},"start":{"column":50,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2569","location":{"end":{"column":53,"line":32},"start":{"column":14,"line":32}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2570","location":{"end":{"column":53,"line":32},"start":{"column":14,"line":32}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2571","location":{"end":{"column":52,"line":32},"start":{"column":37,"line":32}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2572","location":{"end":{"column":4,"line":34},"start":{"column":55,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import { getEnvironmentVariable } from '../../utils/objectUtils';\n\nimport CircleProvider from './CircleProvider';\nimport TravisProvider from './TravisProvider';\nimport GithubActionsCIProvider from './GithubActionsProvider';\n\n/**\n * Represents an object that can provide information about a CI/CD provider.\n */\nexport interface CIProvider {\n  /**\n   * Determine the repository slug, including the git provider. I.E: github.com/stryker-mutator/stryker or bitbucket.org/org/name.\n   */\n  determineProject(): string | undefined;\n  /**\n   * Determine the current version. I.e. branch name, git sha, or tag name\n   */\n  determineVersion(): string | undefined;\n}\n\n/**\n * Return an appropriate instance of CiProvider.\n * @returns An instance of CiProvider, or `null` if it appears Stryker is not running in a CI/CD environment.\n */\nexport function determineCIProvider() {\n  // By far the coolest env. variable from all those listed at\n  // https://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables\n  if (getEnvironmentVariable('HAS_JOSH_K_SEAL_OF_APPROVAL')) {\n    return new TravisProvider();\n  } else if (getEnvironmentVariable('CIRCLECI')) {\n    return new CircleProvider();\n  } else if (getEnvironmentVariable('GITHUB_ACTION')) {\n    return new GithubActionsCIProvider();\n  }\n  // TODO: Add vsts and gitlab CI\n\n  return null;\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/reporters/ci/TravisProvider.ts":{"language":"typescript","mutants":[{"id":"2573","location":{"end":{"column":4,"line":16},"start":{"column":49,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2574","location":{"end":{"column":59,"line":10},"start":{"column":41,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2575","location":{"end":{"column":13,"line":11},"start":{"column":9,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2576","location":{"end":{"column":13,"line":11},"start":{"column":9,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2577","location":{"end":{"column":6,"line":13},"start":{"column":15,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2578","location":{"end":{"column":34,"line":12},"start":{"column":14,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2579","location":{"end":{"column":6,"line":15},"start":{"column":12,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2580","location":{"end":{"column":4,"line":19},"start":{"column":49,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2581","location":{"end":{"column":107,"line":18},"start":{"column":12,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2582","location":{"end":{"column":107,"line":18},"start":{"column":12,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2583","location":{"end":{"column":67,"line":18},"start":{"column":65,"line":18}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"2584","location":{"end":{"column":63,"line":18},"start":{"column":35,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2585","location":{"end":{"column":106,"line":18},"start":{"column":91,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import { getEnvironmentVariable } from '../../utils/objectUtils';\n\nimport { CIProvider } from './Provider';\n\n/**\n * See https://docs.travis-ci.com/user/environment-variables/#default-environment-variables\n */\nclass TravisProvider implements CIProvider {\n  public determineProject(): string | undefined {\n    const slug = getEnvironmentVariable('TRAVIS_REPO_SLUG');\n    if (slug) {\n      return `github.com/${slug}`;\n    } else {\n      return undefined;\n    }\n  }\n  public determineVersion(): string | undefined {\n    return getEnvironmentVariable('TRAVIS_PULL_REQUEST_BRANCH') || getEnvironmentVariable('TRAVIS_BRANCH');\n  }\n}\n\nexport default TravisProvider;\n"},"/home/runner/work/stryker/stryker/packages/core/src/reporters/dashboard-reporter/DashboardReporter.ts":{"language":"typescript","mutants":[{"id":"2586","location":{"end":{"column":4,"line":41},"start":{"column":95,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2587","location":{"end":{"column":6,"line":40},"start":{"column":37,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2588","location":{"end":{"column":33,"line":33},"start":{"column":11,"line":33}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2589","location":{"end":{"column":33,"line":33},"start":{"column":11,"line":33}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2590","location":{"end":{"column":25,"line":33},"start":{"column":23,"line":33}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"2591","location":{"end":{"column":8,"line":35},"start":{"column":35,"line":33}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2592","location":{"end":{"column":8,"line":39},"start":{"column":14,"line":35}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2593","location":{"end":{"column":171,"line":37},"start":{"column":11,"line":37}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2594","location":{"end":{"column":4,"line":45},"start":{"column":25,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"2595","location":{"end":{"column":4,"line":55},"start":{"column":81,"line":47}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2596","location":{"end":{"column":62,"line":48},"start":{"column":9,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2597","location":{"end":{"column":62,"line":48},"start":{"column":9,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2598","location":{"end":{"column":46,"line":48},"start":{"column":43,"line":48}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2599","location":{"end":{"column":6,"line":50},"start":{"column":64,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2600","location":{"end":{"column":6,"line":54},"start":{"column":12,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2601","location":{"end":{"column":8,"line":53},"start":{"column":14,"line":51}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2602","location":{"end":{"column":4,"line":69},"start":{"column":110,"line":57}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2603","location":{"end":{"column":6,"line":66},"start":{"column":9,"line":58}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2604","location":{"end":{"column":8,"line":64},"start":{"column":68,"line":59}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2605","location":{"end":{"column":46,"line":65},"start":{"column":21,"line":65}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2606","location":{"end":{"column":6,"line":68},"start":{"column":19,"line":66}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"2607","location":{"end":{"column":48,"line":67},"start":{"column":22,"line":67}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"2608","location":{"end":{"column":4,"line":77},"start":{"column":39,"line":71}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2609","location":{"end":{"column":6,"line":76},"start":{"column":12,"line":72}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2610","location":{"end":{"column":109,"line":74},"start":{"column":20,"line":74}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2611","location":{"end":{"column":109,"line":74},"start":{"column":20,"line":74}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2612","location":{"end":{"column":53,"line":74},"start":{"column":51,"line":74}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"2613","location":{"end":{"column":108,"line":74},"start":{"column":55,"line":74}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2614","location":{"end":{"column":108,"line":74},"start":{"column":55,"line":74}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2615","location":{"end":{"column":73,"line":74},"start":{"column":71,"line":74}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"2616","location":{"end":{"column":105,"line":75},"start":{"column":16,"line":75}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2617","location":{"end":{"column":105,"line":75},"start":{"column":16,"line":75}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2618","location":{"end":{"column":49,"line":75},"start":{"column":47,"line":75}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"2619","location":{"end":{"column":104,"line":75},"start":{"column":51,"line":75}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2620","location":{"end":{"column":104,"line":75},"start":{"column":51,"line":75}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2621","location":{"end":{"column":69,"line":75},"start":{"column":67,"line":75}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"}],"source":"import { StrykerOptions, ReportType } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { mutationTestReportSchema, Reporter } from '@stryker-mutator/api/report';\nimport { calculateMetrics } from 'mutation-testing-metrics';\n\nimport { CIProvider } from '../ci/Provider';\n\nimport DashboardReporterClient from './DashboardReporterClient';\nimport { dashboardReporterTokens } from './tokens';\nimport { Report } from './Report';\n\nexport default class DashboardReporter implements Reporter {\n  public static readonly inject = tokens(\n    commonTokens.logger,\n    dashboardReporterTokens.dashboardReporterClient,\n    commonTokens.options,\n    dashboardReporterTokens.ciProvider\n  );\n\n  constructor(\n    private readonly log: Logger,\n    private readonly dashboardReporterClient: DashboardReporterClient,\n    private readonly options: StrykerOptions,\n    private readonly ciProvider: CIProvider | null\n  ) {}\n\n  private onGoingWork: Promise<void> | undefined;\n\n  public onMutationTestReportReady(result: mutationTestReportSchema.MutationTestResult): void {\n    this.onGoingWork = (async () => {\n      const { projectName, version, moduleName } = this.getContextFromEnvironment();\n      if (projectName && version) {\n        await this.update(this.toReport(result), projectName, version, moduleName);\n      } else {\n        this.log.info(\n          'The report was not send to the dashboard. The dashboard.project and/or dashboard.version values were missing and not detected to be running on a build server.'\n        );\n      }\n    })();\n  }\n\n  public async wrapUp() {\n    await this.onGoingWork;\n  }\n\n  private toReport(result: mutationTestReportSchema.MutationTestResult): Report {\n    if (this.options.dashboard.reportType === ReportType.Full) {\n      return result;\n    } else {\n      return {\n        mutationScore: calculateMetrics(result.files).metrics.mutationScore\n      };\n    }\n  }\n\n  private async update(report: Report, projectName: string, version: string, moduleName: string | undefined) {\n    try {\n      const href = await this.dashboardReporterClient.updateReport({\n        report,\n        moduleName,\n        projectName,\n        version: version\n      });\n      this.log.info('Report available at: %s', href);\n    } catch (err) {\n      this.log.error('Could not upload report.', err);\n    }\n  }\n\n  private getContextFromEnvironment() {\n    return {\n      moduleName: this.options.dashboard.module,\n      projectName: this.options.dashboard.project || (this.ciProvider && this.ciProvider.determineProject()),\n      version: this.options.dashboard.version || (this.ciProvider && this.ciProvider.determineVersion())\n    };\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/reporters/dashboard-reporter/DashboardReporterClient.ts":{"language":"typescript","mutants":[{"id":"2622","location":{"end":{"column":62,"line":17},"start":{"column":35,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2623","location":{"end":{"column":4,"line":57},"start":{"column":23,"line":33}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2624","location":{"end":{"column":49,"line":36},"start":{"column":19,"line":36}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2625","location":{"end":{"column":15,"line":38},"start":{"column":9,"line":38}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"2626","location":{"end":{"column":15,"line":38},"start":{"column":9,"line":38}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2627","location":{"end":{"column":6,"line":40},"start":{"column":17,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2628","location":{"end":{"column":70,"line":39},"start":{"column":22,"line":39}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2629","location":{"end":{"column":35,"line":41},"start":{"column":20,"line":41}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2630","location":{"end":{"column":6,"line":45},"start":{"column":67,"line":42}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"2631","location":{"end":{"column":19,"line":43},"start":{"column":8,"line":43}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2632","location":{"end":{"column":22,"line":44},"start":{"column":8,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2633","location":{"end":{"column":43,"line":44},"start":{"column":25,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2634","location":{"end":{"column":45,"line":47},"start":{"column":9,"line":47}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2635","location":{"end":{"column":45,"line":47},"start":{"column":9,"line":47}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2636","location":{"end":{"column":42,"line":47},"start":{"column":40,"line":47}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"2637","location":{"end":{"column":6,"line":50},"start":{"column":47,"line":47}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2638","location":{"end":{"column":49,"line":50},"start":{"column":16,"line":50}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2639","location":{"end":{"column":49,"line":50},"start":{"column":16,"line":50}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2640","location":{"end":{"column":45,"line":50},"start":{"column":42,"line":50}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2641","location":{"end":{"column":6,"line":54},"start":{"column":51,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2642","location":{"end":{"column":143,"line":52},"start":{"column":9,"line":52}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2643","location":{"end":{"column":6,"line":56},"start":{"column":12,"line":54}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2644","location":{"end":{"column":137,"line":55},"start":{"column":30,"line":55}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2645","location":{"end":{"column":4,"line":66},"start":{"column":88,"line":59}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2646","location":{"end":{"column":96,"line":60},"start":{"column":18,"line":60}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2647","location":{"end":{"column":19,"line":61},"start":{"column":9,"line":61}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2648","location":{"end":{"column":19,"line":61},"start":{"column":9,"line":61}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2649","location":{"end":{"column":6,"line":63},"start":{"column":21,"line":61}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2650","location":{"end":{"column":64,"line":62},"start":{"column":14,"line":62}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2651","location":{"end":{"column":6,"line":65},"start":{"column":12,"line":63}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { StrykerError } from '@stryker-mutator/util';\nimport { HttpClient } from 'typed-rest-client/HttpClient';\nimport { StrykerOptions } from '@stryker-mutator/api/core';\n\nimport { isOK } from '../../utils/netUtils';\nimport { getEnvironmentVariable } from '../../utils/objectUtils';\n\nimport { dashboardReporterTokens } from './tokens';\nimport { Report } from './Report';\n\ninterface ReportResponseBody {\n  href: string;\n}\n\nconst STRYKER_DASHBOARD_API_KEY = 'STRYKER_DASHBOARD_API_KEY';\n\nexport default class DashboardReporterClient {\n  public static inject = tokens(commonTokens.logger, dashboardReporterTokens.httpClient, commonTokens.options);\n  constructor(private readonly log: Logger, private readonly httpClient: HttpClient, private readonly options: StrykerOptions) {}\n\n  public async updateReport({\n    report,\n    projectName,\n    version,\n    moduleName\n  }: {\n    report: Report;\n    projectName: string;\n    version: string;\n    moduleName: string | undefined;\n  }): Promise<string> {\n    const url = this.getPutUrl(projectName, version, moduleName);\n    const serializedBody = JSON.stringify(report);\n    this.log.info('PUT report to %s (~%s bytes)', url, serializedBody.length);\n    const apiKey = getEnvironmentVariable(STRYKER_DASHBOARD_API_KEY);\n    if (apiKey) {\n      this.log.debug('Using configured API key from environment \"%s\"', STRYKER_DASHBOARD_API_KEY);\n    }\n    this.log.trace('PUT report %s', serializedBody);\n    const result = await this.httpClient.put(url, serializedBody, {\n      ['X-Api-Key']: apiKey,\n      ['Content-Type']: 'application/json'\n    });\n    const responseBody = await result.readBody();\n    if (isOK(result.message.statusCode || 0)) {\n      const response: ReportResponseBody = JSON.parse(responseBody);\n      return response.href;\n    } else if (result.message.statusCode === 401) {\n      throw new StrykerError(\n        `Error HTTP PUT ${url}. Unauthorized. Did you provide the correct api key in the \"${STRYKER_DASHBOARD_API_KEY}\" environment variable?`\n      );\n    } else {\n      throw new StrykerError(`Error HTTP PUT ${url}. Response status code: ${result.message.statusCode}. Response body: ${responseBody}`);\n    }\n  }\n\n  private getPutUrl(repoSlug: string, version: string, moduleName: string | undefined) {\n    const base = `${this.options.dashboard.baseUrl}/${repoSlug}/${encodeURIComponent(version)}`;\n    if (moduleName) {\n      return `${base}?module=${encodeURIComponent(moduleName)}`;\n    } else {\n      return base;\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/reporters/dashboard-reporter/index.ts":{"language":"typescript","mutants":[{"id":"2652","location":{"end":{"column":2,"line":16},"start":{"column":97,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2653","location":{"end":{"column":98,"line":12},"start":{"column":70,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"}],"source":"import { commonTokens, Injector, OptionsContext, tokens } from '@stryker-mutator/api/plugin';\nimport { HttpClient } from 'typed-rest-client/HttpClient';\n\nimport { determineCIProvider } from '../ci/Provider';\n\nimport DashboardReporter from './DashboardReporter';\nimport DashboardReporterClient from './DashboardReporterClient';\nimport { dashboardReporterTokens } from './tokens';\n\nexport function dashboardReporterFactory(injector: Injector<OptionsContext>): DashboardReporter {\n  return injector\n    .provideValue(dashboardReporterTokens.httpClient, new HttpClient('stryker-dashboard-reporter'))\n    .provideClass(dashboardReporterTokens.dashboardReporterClient, DashboardReporterClient)\n    .provideFactory(dashboardReporterTokens.ciProvider, determineCIProvider)\n    .injectClass(DashboardReporter);\n}\ndashboardReporterFactory.inject = tokens(commonTokens.injector);\n"},"/home/runner/work/stryker/stryker/packages/core/src/reporters/dashboard-reporter/tokens.ts":{"language":"typescript","mutants":[{"id":"2654","location":{"end":{"column":2,"line":5},"start":{"column":54,"line":1}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2655","location":{"end":{"column":27,"line":2},"start":{"column":15,"line":2}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2656","location":{"end":{"column":53,"line":3},"start":{"column":28,"line":3}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2657","location":{"end":{"column":27,"line":4},"start":{"column":15,"line":4}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"export const dashboardReporterTokens = Object.freeze({\n  ciProvider: 'ciProvider',\n  dashboardReporterClient: 'dashboardReporterClient',\n  httpClient: 'httpClient'\n} as const);\n"},"/home/runner/work/stryker/stryker/packages/core/src/reporters/index.ts":{"language":"typescript","mutants":[{"id":"2658","location":{"end":{"column":2,"line":17},"start":{"column":31,"line":10}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage"},{"id":"2659","location":{"end":{"column":55,"line":11},"start":{"column":43,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"2660","location":{"end":{"column":53,"line":12},"start":{"column":43,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"2661","location":{"end":{"column":65,"line":13},"start":{"column":43,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"2662","location":{"end":{"column":49,"line":14},"start":{"column":43,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"2663","location":{"end":{"column":59,"line":15},"start":{"column":43,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"2664","location":{"end":{"column":56,"line":16},"start":{"column":45,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"}],"source":"import { declareClassPlugin, declareFactoryPlugin, PluginKind } from '@stryker-mutator/api/plugin';\n\nimport ClearTextReporter from './ClearTextReporter';\nimport { dashboardReporterFactory } from './dashboard-reporter';\nimport DotsReporter from './DotsReporter';\nimport EventRecorderReporter from './EventRecorderReporter';\nimport ProgressAppendOnlyReporter from './ProgressAppendOnlyReporter';\nimport ProgressReporter from './ProgressReporter';\n\nexport const strykerPlugins = [\n  declareClassPlugin(PluginKind.Reporter, 'clear-text', ClearTextReporter),\n  declareClassPlugin(PluginKind.Reporter, 'progress', ProgressReporter),\n  declareClassPlugin(PluginKind.Reporter, 'progress-append-only', ProgressAppendOnlyReporter),\n  declareClassPlugin(PluginKind.Reporter, 'dots', DotsReporter),\n  declareClassPlugin(PluginKind.Reporter, 'event-recorder', EventRecorderReporter),\n  declareFactoryPlugin(PluginKind.Reporter, 'dashboard', dashboardReporterFactory)\n];\n"},"/home/runner/work/stryker/stryker/packages/core/src/test-runner/ChildProcessTestRunnerDecorator.ts":{"language":"typescript","mutants":[{"id":"2665","location":{"end":{"column":4,"line":28},"start":{"column":148,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2666","location":{"end":{"column":63,"line":21},"start":{"column":23,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2667","location":{"end":{"column":27,"line":24},"start":{"column":7,"line":24}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2668","location":{"end":{"column":4,"line":32},"start":{"column":32,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2669","location":{"end":{"column":4,"line":36},"start":{"column":55,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2670","location":{"end":{"column":4,"line":54},"start":{"column":41,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2671","location":{"end":{"column":8,"line":46},"start":{"column":50,"line":41}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"2672","location":{"end":{"column":57,"line":43},"start":{"column":13,"line":43}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2673","location":{"end":{"column":57,"line":43},"start":{"column":13,"line":43}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"2674","location":{"end":{"column":57,"line":43},"start":{"column":13,"line":43}},"mutatorName":"BooleanLiteral","replacement":"(error instanceof ChildProcessCrashedError)","status":"Killed"},{"id":"2675","location":{"end":{"column":56,"line":43},"start":{"column":15,"line":43}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2676","location":{"end":{"column":56,"line":43},"start":{"column":15,"line":43}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"2677","location":{"end":{"column":10,"line":45},"start":{"column":59,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import { StrykerOptions } from '@stryker-mutator/api/core';\nimport { RunOptions, RunResult, TestRunner } from '@stryker-mutator/api/test_runner';\n\nimport ChildProcessCrashedError from '../child-proxy/ChildProcessCrashedError';\nimport ChildProcessProxy from '../child-proxy/ChildProcessProxy';\nimport LoggingClientContext from '../logging/LoggingClientContext';\nimport { timeout } from '../utils/objectUtils';\n\nimport { ChildProcessTestRunnerWorker } from './ChildProcessTestRunnerWorker';\n\nconst MAX_WAIT_FOR_DISPOSE = 2000;\n\n/**\n * Runs the given test runner in a child process and forwards reports about test results\n */\nexport default class ChildProcessTestRunnerDecorator implements TestRunner {\n  private readonly worker: ChildProcessProxy<ChildProcessTestRunnerWorker>;\n\n  constructor(options: StrykerOptions, sandboxFileNames: readonly string[], sandboxWorkingDirectory: string, loggingContext: LoggingClientContext) {\n    this.worker = ChildProcessProxy.create(\n      require.resolve(`./${ChildProcessTestRunnerWorker.name}`),\n      loggingContext,\n      options,\n      { sandboxFileNames },\n      sandboxWorkingDirectory,\n      ChildProcessTestRunnerWorker\n    );\n  }\n\n  public init(): Promise<void> {\n    return this.worker.proxy.init();\n  }\n\n  public run(options: RunOptions): Promise<RunResult> {\n    return this.worker.proxy.run(options);\n  }\n\n  public async dispose(): Promise<void> {\n    await timeout(\n      // First let the inner test runner dispose\n      this.worker.proxy.dispose().catch(error => {\n        // It's OK if the child process is already down.\n        if (!(error instanceof ChildProcessCrashedError)) {\n          throw error;\n        }\n      }),\n\n      // ... but don't wait forever on that\n      MAX_WAIT_FOR_DISPOSE\n    );\n\n    // After that, dispose the child process itself\n    await this.worker.dispose();\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/test-runner/ChildProcessTestRunnerWorker.ts":{"language":"typescript","mutants":[{"id":"2678","location":{"end":{"column":4,"line":17},"start":{"column":120,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"2679","location":{"end":{"column":4,"line":23},"start":{"column":38,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"2680","location":{"end":{"column":39,"line":20},"start":{"column":9,"line":20}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2681","location":{"end":{"column":39,"line":20},"start":{"column":9,"line":20}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2682","location":{"end":{"column":6,"line":22},"start":{"column":41,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"2683","location":{"end":{"column":4,"line":29},"start":{"column":26,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"2684","location":{"end":{"column":42,"line":26},"start":{"column":9,"line":26}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2685","location":{"end":{"column":42,"line":26},"start":{"column":9,"line":26}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2686","location":{"end":{"column":6,"line":28},"start":{"column":44,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"2687","location":{"end":{"column":4,"line":44},"start":{"column":41,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2688","location":{"end":{"column":25,"line":34},"start":{"column":9,"line":34}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"2689","location":{"end":{"column":25,"line":34},"start":{"column":9,"line":34}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"2690","location":{"end":{"column":25,"line":34},"start":{"column":9,"line":34}},"mutatorName":"BooleanLiteral","replacement":"result.coverage","status":"NoCoverage"},{"id":"2691","location":{"end":{"column":6,"line":36},"start":{"column":27,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"2692","location":{"end":{"column":29,"line":37},"start":{"column":9,"line":37}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2693","location":{"end":{"column":29,"line":37},"start":{"column":9,"line":37}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2694","location":{"end":{"column":6,"line":42},"start":{"column":31,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"}],"source":"import { StrykerOptions } from '@stryker-mutator/api/core';\nimport { commonTokens, Injector, OptionsContext, PluginKind, tokens } from '@stryker-mutator/api/plugin';\nimport { RunOptions, TestRunner } from '@stryker-mutator/api/test_runner';\nimport { errorToString } from '@stryker-mutator/util';\n\nimport { PluginCreator } from '../di';\n\nexport class ChildProcessTestRunnerWorker implements TestRunner {\n  private readonly underlyingTestRunner: TestRunner;\n\n  public static inject = tokens(commonTokens.sandboxFileNames, commonTokens.options, commonTokens.injector);\n  constructor(sandboxFileNames: readonly string[], { testRunner }: StrykerOptions, injector: Injector<OptionsContext>) {\n    this.underlyingTestRunner = injector\n      .provideValue(commonTokens.sandboxFileNames, sandboxFileNames)\n      .injectFunction(PluginCreator.createFactory(PluginKind.TestRunner))\n      .create(testRunner);\n  }\n\n  public async init(): Promise<void> {\n    if (this.underlyingTestRunner.init) {\n      await this.underlyingTestRunner.init();\n    }\n  }\n\n  public async dispose() {\n    if (this.underlyingTestRunner.dispose) {\n      await this.underlyingTestRunner.dispose();\n    }\n  }\n\n  public async run(options: RunOptions) {\n    const result = await this.underlyingTestRunner.run(options);\n    // If the test runner didn't report on coverage, let's try to do it ourselves.\n    if (!result.coverage) {\n      result.coverage = (global as any).__coverage__;\n    }\n    if (result.errorMessages) {\n      // errorMessages should be a string[]\n      // Just in case the test runner implementer forgot to convert `Error`s to string, we will do it here\n      // https://github.com/stryker-mutator/stryker/issues/141\n      result.errorMessages = result.errorMessages.map(errorToString);\n    }\n    return result;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/test-runner/CommandTestRunner.ts":{"language":"typescript","mutants":[{"id":"2695","location":{"end":{"column":82,"line":25},"start":{"column":70,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2696","location":{"end":{"column":86,"line":25},"start":{"column":84,"line":25}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"2697","location":{"end":{"column":4,"line":33},"start":{"column":43,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2698","location":{"end":{"column":50,"line":32},"start":{"column":12,"line":32}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2699","location":{"end":{"column":50,"line":32},"start":{"column":12,"line":32}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2700","location":{"end":{"column":31,"line":32},"start":{"column":28,"line":32}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2701","location":{"end":{"column":4,"line":46},"start":{"column":77,"line":39}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2702","location":{"end":{"column":8,"line":43},"start":{"column":7,"line":41}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"2703","location":{"end":{"column":28,"line":42},"start":{"column":18,"line":42}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2704","location":{"end":{"column":4,"line":122},"start":{"column":36,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2705","location":{"end":{"column":6,"line":121},"start":{"column":38,"line":49}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2706","location":{"end":{"column":48,"line":51},"start":{"column":46,"line":51}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"2707","location":{"end":{"column":80,"line":52},"start":{"column":56,"line":52}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"2708","location":{"end":{"column":30,"line":53},"start":{"column":23,"line":53}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2709","location":{"end":{"column":8,"line":57},"start":{"column":41,"line":53}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2710","location":{"end":{"column":56,"line":55},"start":{"column":17,"line":55}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"2711","location":{"end":{"column":29,"line":58},"start":{"column":23,"line":58}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2712","location":{"end":{"column":8,"line":61},"start":{"column":39,"line":58}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2713","location":{"end":{"column":36,"line":62},"start":{"column":30,"line":62}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2714","location":{"end":{"column":8,"line":64},"start":{"column":47,"line":62}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2715","location":{"end":{"column":36,"line":65},"start":{"column":30,"line":65}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2716","location":{"end":{"column":8,"line":67},"start":{"column":47,"line":65}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2717","location":{"end":{"column":8,"line":72},"start":{"column":41,"line":69}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2718","location":{"end":{"column":63,"line":70},"start":{"column":23,"line":70}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2719","location":{"end":{"column":61,"line":70},"start":{"column":59,"line":70}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"2720","location":{"end":{"column":8,"line":78},"start":{"column":55,"line":74}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2721","location":{"end":{"column":8,"line":84},"start":{"column":37,"line":80}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2722","location":{"end":{"column":8,"line":92},"start":{"column":53,"line":86}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2723","location":{"end":{"column":10,"line":91},"start":{"column":16,"line":87}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2724","location":{"end":{"column":48,"line":88},"start":{"column":26,"line":88}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"2725","location":{"end":{"column":20,"line":90},"start":{"column":18,"line":90}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"2726","location":{"end":{"column":8,"line":120},"start":{"column":81,"line":94}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2727","location":{"end":{"column":27,"line":96},"start":{"column":13,"line":96}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2728","location":{"end":{"column":27,"line":96},"start":{"column":13,"line":96}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2729","location":{"end":{"column":25,"line":96},"start":{"column":22,"line":96}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2730","location":{"end":{"column":10,"line":107},"start":{"column":29,"line":96}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2731","location":{"end":{"column":12,"line":106},"start":{"column":18,"line":97}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2732","location":{"end":{"column":14,"line":105},"start":{"column":20,"line":99}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"2733","location":{"end":{"column":16,"line":104},"start":{"column":15,"line":100}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2734","location":{"end":{"column":34,"line":101},"start":{"column":23,"line":101}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2735","location":{"end":{"column":10,"line":119},"start":{"column":16,"line":107}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2736","location":{"end":{"column":12,"line":118},"start":{"column":18,"line":108}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2737","location":{"end":{"column":14,"line":117},"start":{"column":20,"line":110}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"2738","location":{"end":{"column":16,"line":116},"start":{"column":15,"line":111}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2739","location":{"end":{"column":82,"line":112},"start":{"column":34,"line":112}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"2740","location":{"end":{"column":67,"line":112},"start":{"column":46,"line":112}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"2741","location":{"end":{"column":34,"line":113},"start":{"column":23,"line":113}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2742","location":{"end":{"column":4,"line":127},"start":{"column":41,"line":123}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2743","location":{"end":{"column":28,"line":124},"start":{"column":9,"line":124}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2744","location":{"end":{"column":28,"line":124},"start":{"column":9,"line":124}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2745","location":{"end":{"column":6,"line":126},"start":{"column":30,"line":124}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import { exec } from 'child_process';\nimport * as os from 'os';\n\nimport { StrykerOptions } from '@stryker-mutator/api/core';\nimport { RunResult, RunStatus, TestRunner, TestStatus } from '@stryker-mutator/api/test_runner';\nimport { errorToString } from '@stryker-mutator/util';\n\nimport { kill } from '../utils/objectUtils';\nimport Timer from '../utils/Timer';\n\nexport interface CommandRunnerSettings {\n  command: string;\n}\n\n/**\n * A test runner that uses a (bash or cmd) command to execute the tests.\n * Does not know hom many tests are executed or any code coverage results,\n * instead, it mimics a simple test result based on the exit code.\n * The command can be configured, but defaults to `npm test`.\n */\nexport default class CommandTestRunner implements TestRunner {\n  /**\n   * \"command\"\n   */\n  public static readonly runnerName = CommandTestRunner.name.replace('TestRunner', '').toLowerCase();\n\n  /**\n   * Determines whether a given name is \"command\" (ignore case)\n   * @param name Maybe \"command\", maybe not\n   */\n  public static is(name: string): boolean {\n    return this.runnerName === name.toLowerCase();\n  }\n\n  private readonly settings: CommandRunnerSettings;\n\n  private timeoutHandler: undefined | (() => Promise<void>);\n\n  constructor(private readonly workingDir: string, options: StrykerOptions) {\n    this.settings = Object.assign(\n      {\n        command: 'npm test'\n      },\n      options.commandRunner\n    );\n  }\n\n  public run(): Promise<RunResult> {\n    return new Promise((res, rej) => {\n      const timer = new Timer();\n      const output: Array<string | Buffer> = [];\n      const childProcess = exec(this.settings.command, { cwd: this.workingDir });\n      childProcess.on('error', error => {\n        kill(childProcess.pid)\n          .then(() => handleResolve(errorResult(error)))\n          .catch(rej);\n      });\n      childProcess.on('exit', code => {\n        const result = completeResult(code, timer);\n        handleResolve(result);\n      });\n      childProcess.stdout.on('data', chunk => {\n        output.push(chunk);\n      });\n      childProcess.stderr.on('data', chunk => {\n        output.push(chunk);\n      });\n\n      this.timeoutHandler = async () => {\n        handleResolve({ status: RunStatus.Timeout, tests: [] });\n        await kill(childProcess.pid);\n      };\n\n      const handleResolve = (runResult: RunResult) => {\n        removeAllListeners();\n        this.timeoutHandler = undefined;\n        res(runResult);\n      };\n\n      function removeAllListeners() {\n        childProcess.stderr.removeAllListeners();\n        childProcess.stdout.removeAllListeners();\n        childProcess.removeAllListeners();\n      }\n\n      function errorResult(error: Error): RunResult {\n        return {\n          errorMessages: [errorToString(error)],\n          status: RunStatus.Error,\n          tests: []\n        };\n      }\n\n      function completeResult(exitCode: number | null, timer: Timer): RunResult {\n        const duration = timer.elapsedMs();\n        if (exitCode === 0) {\n          return {\n            status: RunStatus.Complete,\n            tests: [\n              {\n                name: 'All tests',\n                status: TestStatus.Success,\n                timeSpentMs: duration\n              }\n            ]\n          };\n        } else {\n          return {\n            status: RunStatus.Complete,\n            tests: [\n              {\n                failureMessages: [output.map(buf => buf.toString()).join(os.EOL)],\n                name: 'All tests',\n                status: TestStatus.Failed,\n                timeSpentMs: duration\n              }\n            ]\n          };\n        }\n      }\n    });\n  }\n  public async dispose(): Promise<void> {\n    if (this.timeoutHandler) {\n      await this.timeoutHandler();\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/test-runner/ResilientTestRunnerFactory.ts":{"language":"typescript","mutants":[{"id":"2746","location":{"end":{"column":2,"line":26},"start":{"column":16,"line":11}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"2747","location":{"end":{"column":4,"line":25},"start":{"column":27,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2748","location":{"end":{"column":49,"line":18},"start":{"column":9,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"2749","location":{"end":{"column":49,"line":18},"start":{"column":9,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"2750","location":{"end":{"column":6,"line":20},"start":{"column":51,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2751","location":{"end":{"column":122,"line":19},"start":{"column":33,"line":19}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2752","location":{"end":{"column":121,"line":19},"start":{"column":60,"line":19}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2753","location":{"end":{"column":6,"line":24},"start":{"column":12,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2754","location":{"end":{"column":146,"line":22},"start":{"column":9,"line":22}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2755","location":{"end":{"column":145,"line":22},"start":{"column":36,"line":22}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"}],"source":"import { StrykerOptions } from '@stryker-mutator/api/core';\nimport { TestRunner } from '@stryker-mutator/api/test_runner';\n\nimport LoggingClientContext from '../logging/LoggingClientContext';\nimport CommandTestRunner from '../test-runner/CommandTestRunner';\n\nimport ChildProcessTestRunnerDecorator from './ChildProcessTestRunnerDecorator';\nimport RetryDecorator from './RetryDecorator';\nimport TimeoutDecorator from './TimeoutDecorator';\n\nexport default {\n  create(\n    options: StrykerOptions,\n    sandboxFileNames: readonly string[],\n    sandboxWorkingDirectory: string,\n    loggingContext: LoggingClientContext\n  ): Required<TestRunner> {\n    if (CommandTestRunner.is(options.testRunner)) {\n      return new RetryDecorator(() => new TimeoutDecorator(() => new CommandTestRunner(sandboxWorkingDirectory, options)));\n    } else {\n      return new RetryDecorator(\n        () => new TimeoutDecorator(() => new ChildProcessTestRunnerDecorator(options, sandboxFileNames, sandboxWorkingDirectory, loggingContext))\n      );\n    }\n  }\n};\n"},"/home/runner/work/stryker/stryker/packages/core/src/test-runner/RetryDecorator.ts":{"language":"typescript","mutants":[{"id":"2756","location":{"end":{"column":123,"line":9},"start":{"column":23,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2757","location":{"end":{"column":4,"line":35},"start":{"column":98,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2758","location":{"end":{"column":25,"line":18},"start":{"column":9,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2759","location":{"end":{"column":25,"line":18},"start":{"column":9,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2760","location":{"end":{"column":23,"line":18},"start":{"column":22,"line":18}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"2761","location":{"end":{"column":23,"line":18},"start":{"column":22,"line":18}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"2762","location":{"end":{"column":6,"line":31},"start":{"column":27,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2763","location":{"end":{"column":8,"line":21},"start":{"column":11,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2764","location":{"end":{"column":8,"line":30},"start":{"column":23,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2765","location":{"end":{"column":46,"line":22},"start":{"column":13,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"2766","location":{"end":{"column":46,"line":22},"start":{"column":13,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2767","location":{"end":{"column":10,"line":27},"start":{"column":48,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2768","location":{"end":{"column":234,"line":24},"start":{"column":13,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2769","location":{"end":{"column":48,"line":29},"start":{"column":47,"line":29}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"2770","location":{"end":{"column":6,"line":34},"start":{"column":12,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2771","location":{"end":{"column":116,"line":33},"start":{"column":14,"line":33}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2772","location":{"end":{"column":103,"line":33},"start":{"column":56,"line":33}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"2773","location":{"end":{"column":102,"line":33},"start":{"column":57,"line":33}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2774","location":{"end":{"column":114,"line":33},"start":{"column":112,"line":33}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"2775","location":{"end":{"column":4,"line":41},"start":{"column":42,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import { RunOptions, RunResult, RunStatus } from '@stryker-mutator/api/test_runner';\nimport { errorToString } from '@stryker-mutator/util';\nimport { getLogger } from 'log4js';\n\nimport OutOfMemoryError from '../child-proxy/OutOfMemoryError';\n\nimport TestRunnerDecorator from './TestRunnerDecorator';\n\nconst ERROR_MESSAGE = 'Test runner crashed. Tried twice to restart it without any luck. Last time the error message was: ';\n\n/**\n * Wraps a test runner and implements the retry functionality.\n */\nexport default class RetryDecorator extends TestRunnerDecorator {\n  private readonly log = getLogger(RetryDecorator.name);\n\n  public async run(options: RunOptions, attemptsLeft = 2, lastError?: Error): Promise<RunResult> {\n    if (attemptsLeft > 0) {\n      try {\n        return await this.innerRunner.run(options);\n      } catch (error) {\n        if (error instanceof OutOfMemoryError) {\n          this.log.info(\n            \"Test runner process [%s] ran out of memory. You probably have a memory leak in your tests. Don't worry, Stryker will restart the process, but you might want to investigate this later, because this decreases performance.\",\n            error.pid\n          );\n        }\n        await this.recover();\n        return this.run(options, attemptsLeft - 1, error);\n      }\n    } else {\n      await this.recover();\n      return { status: RunStatus.Error, errorMessages: [`${ERROR_MESSAGE}${errorToString(lastError)}`], tests: [] };\n    }\n  }\n\n  private async recover(): Promise<void> {\n    await this.dispose();\n    this.createInnerRunner();\n    return this.init();\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/test-runner/TestRunnerDecorator.ts":{"language":"typescript","mutants":[{"id":"2776","location":{"end":{"column":4,"line":8},"start":{"column":70,"line":6}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2777","location":{"end":{"column":4,"line":16},"start":{"column":32,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2778","location":{"end":{"column":30,"line":11},"start":{"column":9,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2779","location":{"end":{"column":30,"line":11},"start":{"column":9,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2780","location":{"end":{"column":6,"line":13},"start":{"column":32,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2781","location":{"end":{"column":58,"line":12},"start":{"column":14,"line":12}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2782","location":{"end":{"column":58,"line":12},"start":{"column":14,"line":12}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2783","location":{"end":{"column":40,"line":12},"start":{"column":38,"line":12}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"2784","location":{"end":{"column":6,"line":15},"start":{"column":12,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2785","location":{"end":{"column":4,"line":20},"start":{"column":33,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2786","location":{"end":{"column":4,"line":24},"start":{"column":55,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2787","location":{"end":{"column":4,"line":32},"start":{"column":34,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2788","location":{"end":{"column":33,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2789","location":{"end":{"column":33,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2790","location":{"end":{"column":6,"line":29},"start":{"column":35,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2791","location":{"end":{"column":61,"line":28},"start":{"column":14,"line":28}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2792","location":{"end":{"column":61,"line":28},"start":{"column":14,"line":28}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2793","location":{"end":{"column":43,"line":28},"start":{"column":41,"line":28}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"2794","location":{"end":{"column":6,"line":31},"start":{"column":12,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import { RunOptions, RunResult, TestRunner } from '@stryker-mutator/api/test_runner';\n\nexport default class TestRunnerDecorator implements Required<TestRunner> {\n  protected innerRunner: TestRunner;\n\n  constructor(private readonly testRunnerProducer: () => TestRunner) {\n    this.createInnerRunner();\n  }\n\n  public init(): Promise<void> {\n    if (this.innerRunner.init) {\n      return this.innerRunner.init() || Promise.resolve();\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  protected createInnerRunner() {\n    this.innerRunner = this.testRunnerProducer();\n  }\n\n  public run(options: RunOptions): Promise<RunResult> {\n    return this.innerRunner.run(options);\n  }\n\n  public dispose(): Promise<any> {\n    if (this.innerRunner.dispose) {\n      return this.innerRunner.dispose() || Promise.resolve();\n    } else {\n      return Promise.resolve();\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/test-runner/TimeoutDecorator.ts":{"language":"typescript","mutants":[{"id":"2795","location":{"end":{"column":4,"line":22},"start":{"column":61,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2796","location":{"end":{"column":67,"line":15},"start":{"column":20,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2797","location":{"end":{"column":34,"line":17},"start":{"column":9,"line":17}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2798","location":{"end":{"column":34,"line":17},"start":{"column":9,"line":17}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2799","location":{"end":{"column":19,"line":17},"start":{"column":16,"line":17}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"2800","location":{"end":{"column":6,"line":19},"start":{"column":36,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2801","location":{"end":{"column":6,"line":21},"start":{"column":12,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2802","location":{"end":{"column":4,"line":30},"start":{"column":47,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2803","location":{"end":{"column":83,"line":25},"start":{"column":20,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2804","location":{"end":{"column":43,"line":27},"start":{"column":13,"line":27}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"2805","location":{"end":{"column":30,"line":28},"start":{"column":13,"line":28}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"2806","location":{"end":{"column":61,"line":29},"start":{"column":13,"line":29}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2807","location":{"end":{"column":60,"line":29},"start":{"column":20,"line":29}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2808","location":{"end":{"column":58,"line":29},"start":{"column":56,"line":29}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"}],"source":"import { RunOptions, RunResult, RunStatus } from '@stryker-mutator/api/test_runner';\nimport { getLogger } from 'log4js';\n\nimport { timeout, TimeoutExpired } from '../utils/objectUtils';\n\nimport TestRunnerDecorator from './TestRunnerDecorator';\n\n/**\n * Wraps a test runner and implements the timeout functionality.\n */\nexport default class TimeoutDecorator extends TestRunnerDecorator {\n  private readonly log = getLogger(TimeoutDecorator.name);\n\n  public async run(options: RunOptions): Promise<RunResult> {\n    this.log.debug('Starting timeout timer (%s ms) for a test run', options.timeout);\n    const result = await timeout(super.run(options), options.timeout);\n    if (result === TimeoutExpired) {\n      return this.handleTimeout();\n    } else {\n      return result;\n    }\n  }\n\n  private handleTimeout(): Promise<RunResult> {\n    this.log.debug('Timeout expired, restarting the process and reporting timeout');\n    return this.dispose()\n      .then(() => this.createInnerRunner())\n      .then(() => this.init())\n      .then(() => ({ status: RunStatus.Timeout, tests: [] }));\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/transpiler/ChildProcessTranspiler.ts":{"language":"typescript","mutants":[{"id":"2809","location":{"end":{"column":4,"line":26},"start":{"column":106,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"2810","location":{"end":{"column":63,"line":19},"start":{"column":23,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"2811","location":{"end":{"column":62,"line":22},"start":{"column":7,"line":22}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2812","location":{"end":{"column":4,"line":30},"start":{"column":70,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2813","location":{"end":{"column":4,"line":34},"start":{"column":20,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"}],"source":"import { File, StrykerOptions } from '@stryker-mutator/api/core';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { Transpiler } from '@stryker-mutator/api/transpile';\nimport { Disposable } from 'typed-inject';\n\nimport ChildProcessProxy from '../child-proxy/ChildProcessProxy';\nimport { coreTokens } from '../di';\nimport LoggingClientContext from '../logging/LoggingClientContext';\n\nimport { ChildProcessTranspilerWorker } from './ChildProcessTranspilerWorker';\n\nexport class ChildProcessTranspiler implements Transpiler, Disposable {\n  private readonly childProcess: ChildProcessProxy<ChildProcessTranspilerWorker>;\n\n  public static inject = tokens(commonTokens.options, coreTokens.loggingContext, commonTokens.produceSourceMaps);\n\n  constructor(options: StrykerOptions, loggingContext: LoggingClientContext, produceSourceMaps: boolean) {\n    this.childProcess = ChildProcessProxy.create(\n      require.resolve(`./${ChildProcessTranspilerWorker.name}`),\n      loggingContext,\n      options,\n      { [commonTokens.produceSourceMaps]: produceSourceMaps },\n      process.cwd(),\n      ChildProcessTranspilerWorker\n    );\n  }\n\n  public transpile(files: readonly File[]): Promise<readonly File[]> {\n    return this.childProcess.proxy.transpile(files);\n  }\n\n  public dispose() {\n    this.childProcess.dispose();\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/transpiler/ChildProcessTranspilerWorker.ts":{"language":"typescript","mutants":[{"id":"2814","location":{"end":{"column":49,"line":14},"start":{"column":26,"line":14}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"2815","location":{"end":{"column":4,"line":19},"start":{"column":60,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"2816","location":{"end":{"column":4,"line":23},"start":{"column":70,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import { File } from '@stryker-mutator/api/core';\nimport { commonTokens, PluginKind, TranspilerPluginContext } from '@stryker-mutator/api/plugin';\nimport { Transpiler } from '@stryker-mutator/api/transpile';\nimport { Injector } from 'typed-inject';\n\nimport { coreTokens } from '../di';\nimport { PluginCreator } from '../di/PluginCreator';\n\nimport { TranspilerFacade } from './TranspilerFacade';\n\nexport class ChildProcessTranspilerWorker implements Transpiler {\n  private readonly innerTranspiler: Transpiler;\n\n  public static inject = [commonTokens.injector];\n  constructor(injector: Injector<TranspilerPluginContext>) {\n    this.innerTranspiler = injector\n      .provideFactory(coreTokens.pluginCreatorTranspiler, PluginCreator.createFactory(PluginKind.Transpiler))\n      .injectClass(TranspilerFacade);\n  }\n\n  public transpile(files: readonly File[]): Promise<readonly File[]> {\n    return this.innerTranspiler.transpile(files);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/transpiler/CoverageInstrumenterTranspiler.ts":{"language":"typescript","mutants":[{"id":"2817","location":{"end":{"column":4,"line":24},"start":{"column":113,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2818","location":{"end":{"column":111,"line":23},"start":{"column":44,"line":23}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"2819","location":{"end":{"column":109,"line":23},"start":{"column":105,"line":23}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"2820","location":{"end":{"column":4,"line":28},"start":{"column":76,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2821","location":{"end":{"column":63,"line":27},"start":{"column":22,"line":27}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2822","location":{"end":{"column":4,"line":46},"start":{"column":34,"line":39}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2823","location":{"end":{"column":52,"line":42},"start":{"column":7,"line":41}},"mutatorName":"ConditionalExpression","replacement":"case 'perTest':","status":"Survived"},{"id":"2824","location":{"end":{"column":21,"line":41},"start":{"column":12,"line":41}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2825","location":{"end":{"column":31,"line":44},"start":{"column":7,"line":43}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"CompileError"},{"id":"2826","location":{"end":{"column":30,"line":44},"start":{"column":16,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2827","location":{"end":{"column":4,"line":68},"start":{"column":55,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2828","location":{"end":{"column":6,"line":53},"start":{"column":39,"line":49}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2829","location":{"end":{"column":23,"line":51},"start":{"column":7,"line":51}},"mutatorName":"UpdateOperator","replacement":"// Lines from istanbul are one-based, lines in Stryker are 0-based\nrange.end.line++","status":"Killed"},{"id":"2830","location":{"end":{"column":25,"line":52},"start":{"column":7,"line":52}},"mutatorName":"UpdateOperator","replacement":"range.start.line++","status":"Killed"},{"id":"2831","location":{"end":{"column":101,"line":55},"start":{"column":52,"line":55}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"2832","location":{"end":{"column":6,"line":60},"start":{"column":56,"line":56}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"2833","location":{"end":{"column":41,"line":59},"start":{"column":7,"line":59}},"mutatorName":"UpdateOperator","replacement":"fileCoverage.branchMap[key].line++","status":"NoCoverage"},{"id":"2834","location":{"end":{"column":6,"line":65},"start":{"column":52,"line":61}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2835","location":{"end":{"column":37,"line":64},"start":{"column":7,"line":64}},"mutatorName":"UpdateOperator","replacement":"fileCoverage.fnMap[key].line++","status":"Survived"},{"id":"2836","location":{"end":{"column":4,"line":76},"start":{"column":46,"line":70}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2837","location":{"end":{"column":116,"line":71},"start":{"column":9,"line":71}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2838","location":{"end":{"column":116,"line":71},"start":{"column":9,"line":71}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2839","location":{"end":{"column":52,"line":71},"start":{"column":50,"line":71}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"2840","location":{"end":{"column":43,"line":71},"start":{"column":40,"line":71}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"2841","location":{"end":{"column":49,"line":71},"start":{"column":44,"line":71}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2842","location":{"end":{"column":115,"line":71},"start":{"column":81,"line":71}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"2843","location":{"end":{"column":115,"line":71},"start":{"column":93,"line":71}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2844","location":{"end":{"column":115,"line":71},"start":{"column":93,"line":71}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2845","location":{"end":{"column":105,"line":71},"start":{"column":102,"line":71}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2846","location":{"end":{"column":6,"line":73},"start":{"column":118,"line":71}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2847","location":{"end":{"column":6,"line":75},"start":{"column":12,"line":73}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2848","location":{"end":{"column":4,"line":87},"start":{"column":50,"line":78}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2849","location":{"end":{"column":6,"line":84},"start":{"column":9,"line":79}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2850","location":{"end":{"column":6,"line":86},"start":{"column":21,"line":84}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2851","location":{"end":{"column":91,"line":85},"start":{"column":30,"line":85}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2852","location":{"end":{"column":4,"line":96},"start":{"column":71,"line":89}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2853","location":{"end":{"column":6,"line":93},"start":{"column":34,"line":90}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2854","location":{"end":{"column":87,"line":94},"start":{"column":38,"line":94}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"}],"source":"import { File, StrykerOptions } from '@stryker-mutator/api/core';\nimport { Transpiler } from '@stryker-mutator/api/transpile';\nimport { StrykerError } from '@stryker-mutator/util';\nimport { FileCoverageData, Range } from 'istanbul-lib-coverage';\nimport { createInstrumenter, Instrumenter } from 'istanbul-lib-instrument';\n\nimport { COVERAGE_CURRENT_TEST_VARIABLE_NAME } from './coverageHooks';\n\nexport interface CoverageMaps {\n  statementMap: { [key: string]: Range };\n  fnMap: { [key: string]: Range };\n}\n\nexport interface CoverageMapsByFile {\n  [file: string]: CoverageMaps;\n}\n\nexport default class CoverageInstrumenterTranspiler implements Transpiler {\n  private readonly instrumenter: Instrumenter;\n  public fileCoverageMaps: CoverageMapsByFile = Object.create(null);\n\n  constructor(private readonly settings: StrykerOptions, private readonly filesToInstrument: readonly string[]) {\n    this.instrumenter = createInstrumenter({ coverageVariable: this.coverageVariable, preserveComments: true });\n  }\n\n  public async transpile(files: readonly File[]): Promise<readonly File[]> {\n    return files.map(file => this.instrumentFileIfNeeded(file));\n  }\n\n  /**\n   * Coverage variable *must* have the name '__coverage__'. Only that variable\n   * is reported back to the TestRunner process when using one of the karma\n   * test framework adapters (karma-jasmine, karma-mocha, ...).\n   *\n   * However, when coverageAnalysis is 'perTest' we don't choose that variable name right away,\n   * because we need that variable to hold all coverage results per test. Instead, we use __strykerCoverageCurrentTest__\n   * and after each test copy over the value of that current test to the global coverage object __coverage__\n   */\n  private get coverageVariable() {\n    switch (this.settings.coverageAnalysis) {\n      case 'perTest':\n        return COVERAGE_CURRENT_TEST_VARIABLE_NAME;\n      default:\n        return '__coverage__';\n    }\n  }\n\n  private patchRanges(fileCoverage: FileCoverageData) {\n    function patchRange(range: Range) {\n      // Lines from istanbul are one-based, lines in Stryker are 0-based\n      range.end.line--;\n      range.start.line--;\n    }\n\n    Object.keys(fileCoverage.statementMap).forEach(key => patchRange(fileCoverage.statementMap[key]));\n    Object.keys(fileCoverage.branchMap).forEach(key => {\n      patchRange(fileCoverage.branchMap[key].loc);\n      fileCoverage.branchMap[key].locations.forEach(patchRange);\n      fileCoverage.branchMap[key].line--;\n    });\n    Object.keys(fileCoverage.fnMap).forEach(key => {\n      patchRange(fileCoverage.fnMap[key].loc);\n      patchRange(fileCoverage.fnMap[key].decl);\n      fileCoverage.fnMap[key].line--;\n    });\n\n    return fileCoverage;\n  }\n\n  private instrumentFileIfNeeded(file: File) {\n    if (this.settings.coverageAnalysis !== 'off' && this.filesToInstrument.some(fileName => fileName === file.name)) {\n      return this.instrumentFile(file);\n    } else {\n      return file;\n    }\n  }\n\n  private instrumentFile(sourceFile: File): File {\n    try {\n      const content = this.instrumenter.instrumentSync(sourceFile.textContent, sourceFile.name);\n      const fileCoverage = this.patchRanges(this.instrumenter.lastFileCoverage());\n      this.fileCoverageMaps[sourceFile.name] = this.retrieveCoverageMaps(fileCoverage);\n      return new File(sourceFile.name, Buffer.from(content));\n    } catch (error) {\n      throw new StrykerError(`Could not instrument \"${sourceFile.name}\" for code coverage`, error);\n    }\n  }\n\n  private retrieveCoverageMaps(input: FileCoverageData): CoverageMaps {\n    const output: CoverageMaps = {\n      fnMap: {},\n      statementMap: input.statementMap\n    };\n    Object.keys(input.fnMap).forEach(key => (output.fnMap[key] = input.fnMap[key].loc));\n    return output;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/transpiler/MutantTranspileScheduler.ts":{"language":"typescript","mutants":[{"id":"2855","location":{"end":{"column":4,"line":36},"start":{"column":104,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2856","location":{"end":{"column":64,"line":33},"start":{"column":48,"line":33}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2857","location":{"end":{"column":57,"line":34},"start":{"column":15,"line":34}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2858","location":{"end":{"column":4,"line":43},"start":{"column":40,"line":41}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2859","location":{"end":{"column":4,"line":50},"start":{"column":20,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"2860","location":{"end":{"column":4,"line":67},"start":{"column":92,"line":52}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2861","location":{"end":{"column":6,"line":57},"start":{"column":73,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2862","location":{"end":{"column":88,"line":56},"start":{"column":47,"line":56}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"2863","location":{"end":{"column":6,"line":66},"start":{"column":71,"line":59}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2864","location":{"end":{"column":25,"line":60},"start":{"column":11,"line":60}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"2865","location":{"end":{"column":25,"line":60},"start":{"column":11,"line":60}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2866","location":{"end":{"column":8,"line":63},"start":{"column":27,"line":60}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2867","location":{"end":{"column":76,"line":61},"start":{"column":51,"line":61}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"2868","location":{"end":{"column":76,"line":61},"start":{"column":56,"line":61}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2869","location":{"end":{"column":76,"line":61},"start":{"column":56,"line":61}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"2870","location":{"end":{"column":66,"line":61},"start":{"column":63,"line":61}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2871","location":{"end":{"column":80,"line":62},"start":{"column":16,"line":62}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2872","location":{"end":{"column":80,"line":62},"start":{"column":16,"line":62}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2873","location":{"end":{"column":33,"line":62},"start":{"column":31,"line":62}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"2874","location":{"end":{"column":30,"line":62},"start":{"column":16,"line":62}},"mutatorName":"BooleanLiteral","replacement":"unMutatedFile","status":"CompileError"},{"id":"2875","location":{"end":{"column":80,"line":62},"start":{"column":34,"line":62}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2876","location":{"end":{"column":80,"line":62},"start":{"column":34,"line":62}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2877","location":{"end":{"column":63,"line":62},"start":{"column":60,"line":62}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"2878","location":{"end":{"column":8,"line":65},"start":{"column":14,"line":63}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2879","location":{"end":{"column":20,"line":64},"start":{"column":16,"line":64}},"mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage"},{"id":"2880","location":{"end":{"column":4,"line":83},"start":{"column":84,"line":69}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2881","location":{"end":{"column":40,"line":70},"start":{"column":38,"line":70}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"2882","location":{"end":{"column":84,"line":71},"start":{"column":9,"line":71}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2883","location":{"end":{"column":84,"line":71},"start":{"column":9,"line":71}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"2884","location":{"end":{"column":35,"line":71},"start":{"column":33,"line":71}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"2885","location":{"end":{"column":68,"line":71},"start":{"column":65,"line":71}},"mutatorName":"EqualityOperator","replacement":"===","status":"Survived"},{"id":"2886","location":{"end":{"column":6,"line":73},"start":{"column":86,"line":71}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"2887","location":{"end":{"column":6,"line":80},"start":{"column":9,"line":77}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2888","location":{"end":{"column":95,"line":79},"start":{"column":50,"line":79}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2889","location":{"end":{"column":6,"line":82},"start":{"column":21,"line":80}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2890","location":{"end":{"column":98,"line":81},"start":{"column":50,"line":81}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2891","location":{"end":{"column":67,"line":81},"start":{"column":65,"line":81}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"}],"source":"import { File } from '@stryker-mutator/api/core';\nimport { Disposable } from '@stryker-mutator/api/plugin';\nimport { tokens } from '@stryker-mutator/api/plugin';\nimport { Transpiler } from '@stryker-mutator/api/transpile';\nimport { errorToString } from '@stryker-mutator/util';\nimport { Observable, range } from 'rxjs';\nimport { BehaviorSubject } from 'rxjs';\nimport { from } from 'rxjs';\nimport { flatMap, zip } from 'rxjs/operators';\n\nimport { coreTokens } from '../di';\nimport SourceFile from '../SourceFile';\nimport TestableMutant from '../TestableMutant';\nimport TranspiledMutant from '../TranspiledMutant';\n\nimport TranspileResult from './TranspileResult';\n\nconst INITIAL_CONCURRENCY = 100;\n\nexport class MutantTranspileScheduler implements Disposable {\n  private currentMutatedFile: SourceFile;\n  private readonly concurrencyTicket$ = new BehaviorSubject<number>(INITIAL_CONCURRENCY);\n\n  public static inject = tokens(coreTokens.transpiler, coreTokens.transpiledFiles);\n\n  /**\n   * Creates a mutant transpiler\n   */\n  constructor(private readonly transpiler: Transpiler, private readonly unMutatedFiles: readonly File[]) {}\n\n  public scheduleTranspileMutants(allMutants: readonly TestableMutant[]): Observable<TranspiledMutant> {\n    return from(allMutants).pipe(\n      zip(this.concurrencyTicket$.pipe(flatMap(n => range(0, n)))),\n      flatMap(([mutant]) => this.transpileMutant(mutant), 1 /* IMPORTANT! Never transpile multiple mutants at once! */)\n    );\n  }\n\n  /**\n   * Schedule next mutant to be transpiled\n   */\n  public readonly scheduleNext = () => {\n    this.concurrencyTicket$.next(1);\n  };\n\n  /**\n   * Dispose\n   */\n  public dispose() {\n    this.concurrencyTicket$.complete();\n  }\n\n  private createTranspiledMutant(mutant: TestableMutant, transpileResult: TranspileResult) {\n    return new TranspiledMutant(mutant, transpileResult, someFilesChanged(this.unMutatedFiles));\n\n    function someFilesChanged(unMutatedFiles: readonly File[]): boolean {\n      return transpileResult.outputFiles.some(file => fileChanged(file, unMutatedFiles));\n    }\n\n    function fileChanged(file: File, unMutatedFiles: readonly File[]) {\n      if (unMutatedFiles) {\n        const unMutatedFile = unMutatedFiles.find(f => f.name === file.name);\n        return !unMutatedFile || unMutatedFile.textContent !== file.textContent;\n      } else {\n        return true;\n      }\n    }\n  }\n\n  private async transpileMutant(mutant: TestableMutant): Promise<TranspiledMutant> {\n    const filesToTranspile: File[] = [];\n    if (this.currentMutatedFile && this.currentMutatedFile.name !== mutant.fileName) {\n      filesToTranspile.push(this.currentMutatedFile.file);\n    }\n    this.currentMutatedFile = mutant.sourceFile;\n    const mutatedFile = new File(mutant.fileName, Buffer.from(mutant.mutatedCode));\n    filesToTranspile.push(mutatedFile);\n    try {\n      const transpiledFiles = await this.transpiler.transpile(filesToTranspile);\n      return this.createTranspiledMutant(mutant, { outputFiles: transpiledFiles, error: null });\n    } catch (error) {\n      return this.createTranspiledMutant(mutant, { outputFiles: [], error: errorToString(error) });\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/transpiler/SourceMapper.ts":{"language":"typescript","mutants":[{"id":"2892","location":{"end":{"column":4,"line":30},"start":{"column":52,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2893","location":{"end":{"column":188,"line":24},"start":{"column":7,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2894","location":{"end":{"column":4,"line":53},"start":{"column":97,"line":47}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2895","location":{"end":{"column":73,"line":48},"start":{"column":9,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2896","location":{"end":{"column":73,"line":48},"start":{"column":9,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2897","location":{"end":{"column":38,"line":48},"start":{"column":36,"line":48}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"2898","location":{"end":{"column":67,"line":48},"start":{"column":64,"line":48}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"2899","location":{"end":{"column":73,"line":48},"start":{"column":68,"line":48}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"2900","location":{"end":{"column":6,"line":50},"start":{"column":75,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2901","location":{"end":{"column":6,"line":52},"start":{"column":12,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2902","location":{"end":{"column":4,"line":62},"start":{"column":66,"line":60}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2903","location":{"end":{"column":4,"line":70},"start":{"column":58,"line":67}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2904","location":{"end":{"column":4,"line":87},"start":{"column":97,"line":75}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2905","location":{"end":{"column":6,"line":86},"start":{"column":12,"line":80}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2906","location":{"end":{"column":8,"line":85},"start":{"column":17,"line":82}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2907","location":{"end":{"column":4,"line":91},"start":{"column":66,"line":89}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2908","location":{"end":{"column":95,"line":90},"start":{"column":92,"line":90}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2909","location":{"end":{"column":4,"line":106},"start":{"column":59,"line":96}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2910","location":{"end":{"column":25,"line":97},"start":{"column":9,"line":97}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2911","location":{"end":{"column":25,"line":97},"start":{"column":9,"line":97}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2912","location":{"end":{"column":25,"line":97},"start":{"column":9,"line":97}},"mutatorName":"BooleanLiteral","replacement":"this.sourceMaps","status":"Killed"},{"id":"2913","location":{"end":{"column":6,"line":99},"start":{"column":27,"line":97}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2914","location":{"end":{"column":18,"line":101},"start":{"column":9,"line":101}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2915","location":{"end":{"column":18,"line":101},"start":{"column":9,"line":101}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2916","location":{"end":{"column":6,"line":103},"start":{"column":20,"line":101}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2917","location":{"end":{"column":6,"line":105},"start":{"column":12,"line":103}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2918","location":{"end":{"column":78,"line":104},"start":{"column":32,"line":104}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2919","location":{"end":{"column":4,"line":125},"start":{"column":49,"line":111}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2920","location":{"end":{"column":6,"line":123},"start":{"column":52,"line":113}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2921","location":{"end":{"column":24,"line":115},"start":{"column":11,"line":115}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2922","location":{"end":{"column":24,"line":115},"start":{"column":11,"line":115}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2923","location":{"end":{"column":8,"line":122},"start":{"column":26,"line":115}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2924","location":{"end":{"column":10,"line":121},"start":{"column":48,"line":118}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2925","location":{"end":{"column":4,"line":133},"start":{"column":62,"line":127}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2926","location":{"end":{"column":6,"line":130},"start":{"column":9,"line":128}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2927","location":{"end":{"column":6,"line":132},"start":{"column":21,"line":130}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2928","location":{"end":{"column":101,"line":131},"start":{"column":32,"line":131}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2929","location":{"end":{"column":4,"line":142},"start":{"column":66,"line":135}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2930","location":{"end":{"column":25,"line":137},"start":{"column":9,"line":137}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2931","location":{"end":{"column":25,"line":137},"start":{"column":9,"line":137}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2932","location":{"end":{"column":6,"line":139},"start":{"column":27,"line":137}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2933","location":{"end":{"column":6,"line":141},"start":{"column":12,"line":139}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2934","location":{"end":{"column":4,"line":154},"start":{"column":85,"line":149}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2935","location":{"end":{"column":4,"line":158},"start":{"column":45,"line":156}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2936","location":{"end":{"column":43,"line":157},"start":{"column":36,"line":157}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2937","location":{"end":{"column":4,"line":176},"start":{"column":80,"line":163}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2938","location":{"end":{"column":64,"line":164},"start":{"column":33,"line":164}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2939","location":{"end":{"column":53,"line":165},"start":{"column":9,"line":165}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2940","location":{"end":{"column":53,"line":165},"start":{"column":9,"line":165}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2941","location":{"end":{"column":6,"line":168},"start":{"column":55,"line":165}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2942","location":{"end":{"column":6,"line":175},"start":{"column":12,"line":168}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2943","location":{"end":{"column":106,"line":173},"start":{"column":9,"line":170}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2944","location":{"end":{"column":39,"line":172},"start":{"column":36,"line":172}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2945","location":{"end":{"column":87,"line":173},"start":{"column":86,"line":173}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"2946","location":{"end":{"column":4,"line":191},"start":{"column":76,"line":181}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2947","location":{"end":{"column":106,"line":183},"start":{"column":53,"line":183}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"2948","location":{"end":{"column":106,"line":183},"start":{"column":61,"line":183}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2949","location":{"end":{"column":106,"line":183},"start":{"column":61,"line":183}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2950","location":{"end":{"column":88,"line":183},"start":{"column":85,"line":183}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"2951","location":{"end":{"column":22,"line":184},"start":{"column":9,"line":184}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2952","location":{"end":{"column":22,"line":184},"start":{"column":9,"line":184}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2953","location":{"end":{"column":6,"line":186},"start":{"column":24,"line":184}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2954","location":{"end":{"column":6,"line":190},"start":{"column":12,"line":186}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2955","location":{"end":{"column":129,"line":188},"start":{"column":9,"line":188}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2956","location":{"end":{"column":4,"line":211},"start":{"column":64,"line":196}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2957","location":{"end":{"column":82,"line":201},"start":{"column":12,"line":201}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"2958","location":{"end":{"column":6,"line":203},"start":{"column":84,"line":201}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2959","location":{"end":{"column":18,"line":204},"start":{"column":9,"line":204}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2960","location":{"end":{"column":18,"line":204},"start":{"column":9,"line":204}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2961","location":{"end":{"column":6,"line":207},"start":{"column":20,"line":204}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2962","location":{"end":{"column":68,"line":205},"start":{"column":22,"line":205}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2963","location":{"end":{"column":6,"line":210},"start":{"column":12,"line":207}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2964","location":{"end":{"column":71,"line":208},"start":{"column":22,"line":208}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2965","location":{"end":{"column":4,"line":220},"start":{"column":66,"line":218}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2966","location":{"end":{"column":4,"line":227},"start":{"column":97,"line":225}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2967","location":{"end":{"column":4,"line":249},"start":{"column":108,"line":233}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2968","location":{"end":{"column":24,"line":234},"start":{"column":9,"line":234}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"2969","location":{"end":{"column":24,"line":234},"start":{"column":9,"line":234}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2970","location":{"end":{"column":24,"line":234},"start":{"column":9,"line":234}},"mutatorName":"BooleanLiteral","replacement":"this.sourceMap","status":"CompileError"},{"id":"2971","location":{"end":{"column":6,"line":236},"start":{"column":26,"line":234}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2972","location":{"end":{"column":6,"line":243},"start":{"column":74,"line":238}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2973","location":{"end":{"column":36,"line":241},"start":{"column":35,"line":241}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Survived"},{"id":"2974","location":{"end":{"column":6,"line":248},"start":{"column":28,"line":245}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"2975","location":{"end":{"column":45,"line":246},"start":{"column":15,"line":246}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2976","location":{"end":{"column":45,"line":246},"start":{"column":15,"line":246}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2977","location":{"end":{"column":43,"line":246},"start":{"column":41,"line":246}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"2978","location":{"end":{"column":45,"line":247},"start":{"column":44,"line":247}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"2979","location":{"end":{"column":42,"line":247},"start":{"column":14,"line":247}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2980","location":{"end":{"column":42,"line":247},"start":{"column":14,"line":247}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2981","location":{"end":{"column":40,"line":247},"start":{"column":38,"line":247}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"}],"source":"import * as path from 'path';\n\nimport { File, Location, Position, StrykerOptions } from '@stryker-mutator/api/core';\nimport { StrykerError } from '@stryker-mutator/util';\nimport { getLogger } from 'log4js';\nimport { RawSourceMap, SourceMapConsumer } from 'source-map';\n\nimport { base64Decode } from '../utils/objectUtils';\n\nconst SOURCE_MAP_URL_REGEX = /\\/\\/\\s*#\\s*sourceMappingURL=(.*)/g;\n\n// This file contains source mapping logic.\n// It reads transpiled output files (*.js) and scans it for comments like these: sourceMappingURL=*.js.map\n// If it finds it, it will use mozilla's source-map to implement the `transpiledLocationFor` method.\n\nexport interface MappedLocation {\n  fileName: string;\n  location: Location;\n}\n\nexport class SourceMapError extends StrykerError {\n  constructor(message: string, innerError?: Error) {\n    super(\n      `${message}. Cannot analyse code coverage. Setting \\`coverageAnalysis: \"off\"\\` in your stryker.conf.js will prevent this error, but forces Stryker to run each test for each mutant.`,\n      innerError\n    );\n    Error.captureStackTrace(this, SourceMapError);\n    // TS recommendation: https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, SourceMapError.prototype);\n  }\n}\n\n/**\n * Represents an object that can calculated a transpiled location for a given original location\n * It is implemented with the [composite pattern](https://en.wikipedia.org/wiki/Composite_pattern)\n * Use the `create` method to retrieve a specific `SourceMapper` implementation\n */\nexport default abstract class SourceMapper {\n  /**\n   * Calculated a transpiled location for a given original location\n   * @param originalLocation The original location to be converted to a transpiled location\n   */\n  public abstract async transpiledLocationFor(originalLocation: MappedLocation): Promise<MappedLocation>;\n\n  public abstract transpiledFileNameFor(originalFileName: string): string;\n\n  public static create(transpiledFiles: readonly File[], options: StrykerOptions): SourceMapper {\n    if (options.transpilers.length && options.coverageAnalysis !== 'off') {\n      return new TranspiledSourceMapper(transpiledFiles);\n    } else {\n      return new PassThroughSourceMapper();\n    }\n  }\n}\n\nexport class TranspiledSourceMapper extends SourceMapper {\n  private sourceMaps: SourceMapBySource;\n  private readonly log = getLogger(SourceMapper.name);\n\n  constructor(private readonly transpiledFiles: readonly File[]) {\n    super();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public transpiledFileNameFor(originalFileName: string) {\n    const sourceMap = this.getSourceMap(originalFileName);\n    return sourceMap.transpiledFile.name;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public async transpiledLocationFor(originalLocation: MappedLocation): Promise<MappedLocation> {\n    const sourceMap = this.getSourceMap(originalLocation.fileName);\n    const relativeSource = this.getRelativeSource(sourceMap, originalLocation);\n    const start = await sourceMap.generatedPositionFor(originalLocation.location.start, relativeSource);\n    const end = await sourceMap.generatedPositionFor(originalLocation.location.end, relativeSource);\n    return {\n      fileName: sourceMap.transpiledFile.name,\n      location: {\n        end,\n        start\n      }\n    };\n  }\n\n  private getRelativeSource(from: SourceMap, to: MappedLocation) {\n    return path.relative(path.dirname(from.sourceMapFileName), to.fileName).replace(/\\\\/g, '/');\n  }\n\n  /**\n   * Gets the source map for given file\n   */\n  private getSourceMap(sourceFileName: string): SourceMap {\n    if (!this.sourceMaps) {\n      this.sourceMaps = this.createSourceMaps();\n    }\n    const sourceMap: SourceMap | undefined = this.sourceMaps[path.resolve(sourceFileName)];\n    if (sourceMap) {\n      return sourceMap;\n    } else {\n      throw new SourceMapError(`Source map not found for \"${sourceFileName}\"`);\n    }\n  }\n\n  /**\n   * Creates all source maps for lazy loading purposes\n   */\n  private createSourceMaps(): SourceMapBySource {\n    const sourceMaps: SourceMapBySource = Object.create(null);\n    this.transpiledFiles.forEach(transpiledFile => {\n      const sourceMapFile = this.getSourceMapForFile(transpiledFile);\n      if (sourceMapFile) {\n        const rawSourceMap = this.getRawSourceMap(sourceMapFile);\n        const sourceMap = new SourceMap(transpiledFile, sourceMapFile.name, rawSourceMap);\n        rawSourceMap.sources.forEach(source => {\n          const sourceFileName = path.resolve(path.dirname(sourceMapFile.name), source);\n          sourceMaps[sourceFileName] = sourceMap;\n        });\n      }\n    });\n    return sourceMaps;\n  }\n\n  private getRawSourceMap(sourceMapFile: File): RawSourceMap {\n    try {\n      return JSON.parse(sourceMapFile.textContent);\n    } catch (error) {\n      throw new SourceMapError(`Source map file \"${sourceMapFile.name}\" could not be parsed as json`, error);\n    }\n  }\n\n  private getSourceMapForFile(transpiledFile: File): File | null {\n    const sourceMappingUrl = this.getSourceMapUrl(transpiledFile);\n    if (sourceMappingUrl) {\n      return this.getSourceMapFileFromUrl(sourceMappingUrl, transpiledFile);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Gets the source map file from a url.\n   * @param sourceMapUrl The source map url. Can be a data url (data:application/json;base64,ABC...), or an actual file url\n   * @param transpiledFile The transpiled file for which the data url is\n   */\n  private getSourceMapFileFromUrl(sourceMapUrl: string, transpiledFile: File): File {\n    const sourceMapFile = this.isInlineUrl(sourceMapUrl)\n      ? this.getInlineSourceMap(sourceMapUrl, transpiledFile)\n      : this.getExternalSourceMap(sourceMapUrl, transpiledFile);\n    return sourceMapFile;\n  }\n\n  private isInlineUrl(sourceMapUrl: string) {\n    return sourceMapUrl.startsWith('data:');\n  }\n\n  /**\n   * Gets the source map from a data url\n   */\n  private getInlineSourceMap(sourceMapUrl: string, transpiledFile: File): File {\n    const supportedDataPrefix = 'data:application/json;base64,';\n    if (sourceMapUrl.startsWith(supportedDataPrefix)) {\n      const content = base64Decode(sourceMapUrl.substr(supportedDataPrefix.length));\n      return new File(transpiledFile.name, content);\n    } else {\n      throw new SourceMapError(\n        `Source map file for \"${transpiledFile.name}\" cannot be read. Data url \"${sourceMapUrl.substr(\n          0,\n          sourceMapUrl.lastIndexOf(',')\n        )}\" found, where \"${supportedDataPrefix.substr(0, supportedDataPrefix.length - 1)}\" was expected`\n      );\n    }\n  }\n\n  /**\n   * Gets the source map from a file\n   */\n  private getExternalSourceMap(sourceMapUrl: string, transpiledFile: File) {\n    const sourceMapFileName = path.resolve(path.dirname(transpiledFile.name), sourceMapUrl);\n    const sourceMapFile = this.transpiledFiles.find(file => path.resolve(file.name) === sourceMapFileName);\n    if (sourceMapFile) {\n      return sourceMapFile;\n    } else {\n      throw new SourceMapError(\n        `Source map file \"${sourceMapUrl}\" (referenced by \"${transpiledFile.name}\") cannot be found in list of transpiled files`\n      );\n    }\n  }\n\n  /**\n   * Gets the source map url from a transpiled file (the last comment with sourceMappingURL= ...)\n   */\n  private getSourceMapUrl(transpiledFile: File): string | null {\n    SOURCE_MAP_URL_REGEX.lastIndex = 0;\n    let currentMatch: RegExpExecArray | null;\n    let lastMatch: RegExpExecArray | null = null;\n    // Retrieve the final sourceMappingURL comment in the file\n    while ((currentMatch = SOURCE_MAP_URL_REGEX.exec(transpiledFile.textContent))) {\n      lastMatch = currentMatch;\n    }\n    if (lastMatch) {\n      this.log.debug('Source map url found in transpiled file \"%s\"', transpiledFile.name);\n      return lastMatch[1];\n    } else {\n      this.log.debug('No source map url found in transpiled file \"%s\"', transpiledFile.name);\n      return null;\n    }\n  }\n}\n\nexport class PassThroughSourceMapper extends SourceMapper {\n  /**\n   * @inheritdoc\n   */\n  public transpiledFileNameFor(originalFileName: string): string {\n    return originalFileName;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public async transpiledLocationFor(originalLocation: MappedLocation): Promise<MappedLocation> {\n    return Promise.resolve(originalLocation);\n  }\n}\n\nclass SourceMap {\n  private sourceMap: SourceMapConsumer | undefined;\n  constructor(public transpiledFile: File, public sourceMapFileName: string, private readonly rawSourceMap: RawSourceMap) {}\n  public async generatedPositionFor(originalPosition: Position, relativeSource: string): Promise<Position> {\n    if (!this.sourceMap) {\n      this.sourceMap = await new SourceMapConsumer(this.rawSourceMap);\n    }\n\n    const transpiledPosition = await this.sourceMap.generatedPositionFor({\n      bias: SourceMapConsumer.LEAST_UPPER_BOUND,\n      column: originalPosition.column,\n      line: originalPosition.line + 1, // SourceMapConsumer works 1-based\n      source: relativeSource\n    });\n\n    return Promise.resolve({\n      column: transpiledPosition.column || 0,\n      line: (transpiledPosition.line || 1) - 1 // Stryker works 0-based\n    });\n  }\n}\n\ninterface SourceMapBySource {\n  [sourceFileName: string]: SourceMap;\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/transpiler/TranspilerFacade.ts":{"language":"typescript","mutants":[{"id":"2982","location":{"end":{"column":4,"line":20},"start":{"column":93,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2983","location":{"end":{"column":144,"line":19},"start":{"column":53,"line":19}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"2984","location":{"end":{"column":4,"line":24},"start":{"column":70,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2985","location":{"end":{"column":4,"line":39},"start":{"column":31,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2986","location":{"end":{"column":16,"line":31},"start":{"column":9,"line":31}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"2987","location":{"end":{"column":16,"line":31},"start":{"column":9,"line":31}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"2988","location":{"end":{"column":6,"line":36},"start":{"column":18,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2989","location":{"end":{"column":8,"line":34},"start":{"column":79,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2990","location":{"end":{"column":83,"line":33},"start":{"column":32,"line":33}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2991","location":{"end":{"column":6,"line":38},"start":{"column":12,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import { File, StrykerOptions } from '@stryker-mutator/api/core';\nimport { commonTokens, PluginKind, tokens } from '@stryker-mutator/api/plugin';\nimport { Transpiler } from '@stryker-mutator/api/transpile';\nimport { StrykerError } from '@stryker-mutator/util';\n\nimport { coreTokens } from '../di';\nimport { PluginCreator } from '../di/PluginCreator';\n\nclass NamedTranspiler {\n  constructor(public name: string, public transpiler: Transpiler) {}\n}\n\nexport class TranspilerFacade implements Transpiler {\n  private readonly innerTranspilers: NamedTranspiler[];\n\n  public static inject = tokens(commonTokens.options, coreTokens.pluginCreatorTranspiler);\n\n  constructor(options: StrykerOptions, pluginCreator: PluginCreator<PluginKind.Transpiler>) {\n    this.innerTranspilers = options.transpilers.map(transpilerName => new NamedTranspiler(transpilerName, pluginCreator.create(transpilerName)));\n  }\n\n  public transpile(files: readonly File[]): Promise<readonly File[]> {\n    return this.performTranspileChain(files);\n  }\n\n  private async performTranspileChain(\n    input: readonly File[],\n    remainingChain: NamedTranspiler[] = this.innerTranspilers.slice()\n  ): Promise<readonly File[]> {\n    const current = remainingChain.shift();\n    if (current) {\n      const output = await current.transpiler.transpile(input).catch(error => {\n        throw new StrykerError(`An error occurred in transpiler \"${current.name}\"`, error);\n      });\n      return this.performTranspileChain(output, remainingChain);\n    } else {\n      return input;\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/transpiler/coverageHooks.ts":{"language":"typescript","mutants":[{"id":"2992","location":{"end":{"column":84,"line":5},"start":{"column":52,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2993","location":{"end":{"column":3,"line":22},"start":{"column":31,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2994","location":{"end":{"column":3,"line":27},"start":{"column":39,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2995","location":{"end":{"column":3,"line":55},"start":{"column":38,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2996","location":{"end":{"column":2,"line":65},"start":{"column":76,"line":57}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2997","location":{"end":{"column":6,"line":64},"start":{"column":24,"line":58}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import { TestFramework } from '@stryker-mutator/api/test_framework';\n\nimport { wrapInClosure } from '../utils/objectUtils';\n\nexport const COVERAGE_CURRENT_TEST_VARIABLE_NAME = '__strykerCoverageCurrentTest__';\n\nconst cloneFunctionFragment = `\nfunction clone(source) {\n    var result = source;\n    if (Array.isArray(source)) {\n        result = [];\n        source.forEach(function (child, index) {\n            result[index] = clone(child);\n        });\n    } else if (typeof source == \"object\") {\n        result = {};\n        for (var i in source) {\n            result[i] = clone(source[i]);\n        }\n    }\n    return result;\n}`;\n\nconst BEFORE_EACH_FRAGMENT_PER_TEST = `\nif (!globalCoverage.baseline && window.${COVERAGE_CURRENT_TEST_VARIABLE_NAME}) {\nglobalCoverage.baseline = clone(window.${COVERAGE_CURRENT_TEST_VARIABLE_NAME});\n}`;\n\nconst AFTER_EACH_FRAGMENT_PER_TEST = `\nglobalCoverage.deviations[id] = coverageResult = {};\nid++;\nvar coveragePerFile = window.${COVERAGE_CURRENT_TEST_VARIABLE_NAME};\nif(coveragePerFile) {\nObject.keys(coveragePerFile).forEach(function (file) {\n    var coverage = coveragePerFile[file];\n    var baseline = globalCoverage.baseline[file];\n    var fileResult = { s: {}, f: {} };\n    var touchedFile = false;\n    for(var i in coverage.s){\n      if(!baseline || coverage.s[i] !== baseline.s[i]){\n        fileResult.s[i] = coverage.s[i];\n        touchedFile = true;\n      }\n    }\n    for(var i in coverage.f){\n      if(!baseline || coverage.f[i] !== baseline.f[i]){\n        fileResult.f[i] = coverage.f[i];\n        touchedFile = true;\n      }\n    }\n    if(touchedFile){\n      coverageResult[file] = fileResult;\n    }\n});\n}`;\n\nexport function coveragePerTestHooks(testFramework: TestFramework): string {\n  return wrapInClosure(`\n        var id = 0, globalCoverage, coverageResult;\n        window.__coverage__ = globalCoverage = { deviations: {} };\n        ${testFramework.beforeEach(BEFORE_EACH_FRAGMENT_PER_TEST)}\n        ${testFramework.afterEach(AFTER_EACH_FRAGMENT_PER_TEST)}\n        ${cloneFunctionFragment};\n    `);\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/transpiler/index.ts":{"language":"typescript","mutants":[{"id":"2998","location":{"end":{"column":2,"line":29},"start":{"column":28,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2999","location":{"end":{"column":33,"line":17},"start":{"column":7,"line":17}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3000","location":{"end":{"column":33,"line":17},"start":{"column":7,"line":17}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3001","location":{"end":{"column":4,"line":19},"start":{"column":35,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3002","location":{"end":{"column":4,"line":28},"start":{"column":10,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3003","location":{"end":{"column":6,"line":27},"start":{"column":12,"line":20}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"3004","location":{"end":{"column":8,"line":23},"start":{"column":41,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import { File, StrykerOptions } from '@stryker-mutator/api/core';\nimport { commonTokens, Disposable, Injector, tokens, TranspilerPluginContext } from '@stryker-mutator/api/plugin';\nimport { Transpiler } from '@stryker-mutator/api/transpile';\n\nimport { coreTokens } from '../di';\nimport LoggingClientContext from '../logging/LoggingClientContext';\n\nimport { ChildProcessTranspiler } from './ChildProcessTranspiler';\n\n/**\n * Creates a transpiler. If one is configured, spawns that in a child process\n */\nexport function transpilerFactory(\n  options: StrykerOptions,\n  injector: Injector<TranspilerPluginContext & { [coreTokens.loggingContext]: LoggingClientContext }>\n): Transpiler & Disposable {\n  if (options.transpilers.length) {\n    return injector.injectClass(ChildProcessTranspiler);\n  } else {\n    return {\n      transpile(files: readonly File[]) {\n        return Promise.resolve(files);\n      },\n      dispose() {\n        // noop\n      }\n    };\n  }\n}\ntranspilerFactory.inject = tokens(commonTokens.options, commonTokens.injector);\n"},"/home/runner/work/stryker/stryker/packages/core/src/utils/LocationHelper.ts":{"language":"typescript","mutants":[{"id":"3005","location":{"end":{"column":6,"line":8},"start":{"column":19,"line":5}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"3006","location":{"end":{"column":94,"line":6},"start":{"column":26,"line":6}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"3007","location":{"end":{"column":51,"line":7},"start":{"column":28,"line":7}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"3008","location":{"end":{"column":49,"line":7},"start":{"column":47,"line":7}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Survived"},{"id":"3009","location":{"end":{"column":4,"line":25},"start":{"column":55,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3010","location":{"end":{"column":110,"line":21},"start":{"column":7,"line":20}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3011","location":{"end":{"column":110,"line":21},"start":{"column":7,"line":20}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3012","location":{"end":{"column":55,"line":20},"start":{"column":53,"line":20}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"3013","location":{"end":{"column":52,"line":20},"start":{"column":7,"line":20}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3014","location":{"end":{"column":52,"line":20},"start":{"column":7,"line":20}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3015","location":{"end":{"column":28,"line":20},"start":{"column":27,"line":20}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"3016","location":{"end":{"column":28,"line":20},"start":{"column":27,"line":20}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"3017","location":{"end":{"column":109,"line":21},"start":{"column":8,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3018","location":{"end":{"column":109,"line":21},"start":{"column":8,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3019","location":{"end":{"column":58,"line":21},"start":{"column":56,"line":21}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"3020","location":{"end":{"column":55,"line":21},"start":{"column":8,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3021","location":{"end":{"column":55,"line":21},"start":{"column":8,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3022","location":{"end":{"column":31,"line":21},"start":{"column":28,"line":21}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"3023","location":{"end":{"column":109,"line":21},"start":{"column":59,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3024","location":{"end":{"column":109,"line":21},"start":{"column":59,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3025","location":{"end":{"column":83,"line":21},"start":{"column":81,"line":21}},"mutatorName":"EqualityOperator","replacement":"<","status":"Killed"},{"id":"3026","location":{"end":{"column":83,"line":21},"start":{"column":81,"line":21}},"mutatorName":"EqualityOperator","replacement":">","status":"Survived"},{"id":"3027","location":{"end":{"column":147,"line":23},"start":{"column":7,"line":23}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3028","location":{"end":{"column":147,"line":23},"start":{"column":7,"line":23}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"3029","location":{"end":{"column":51,"line":23},"start":{"column":49,"line":23}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"3030","location":{"end":{"column":48,"line":23},"start":{"column":7,"line":23}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3031","location":{"end":{"column":48,"line":23},"start":{"column":7,"line":23}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"3032","location":{"end":{"column":26,"line":23},"start":{"column":25,"line":23}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Survived"},{"id":"3033","location":{"end":{"column":26,"line":23},"start":{"column":25,"line":23}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"3034","location":{"end":{"column":146,"line":23},"start":{"column":53,"line":23}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"3035","location":{"end":{"column":146,"line":23},"start":{"column":53,"line":23}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"3036","location":{"end":{"column":99,"line":23},"start":{"column":97,"line":23}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"3037","location":{"end":{"column":96,"line":23},"start":{"column":53,"line":23}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"3038","location":{"end":{"column":96,"line":23},"start":{"column":53,"line":23}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"3039","location":{"end":{"column":74,"line":23},"start":{"column":71,"line":23}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Survived"},{"id":"3040","location":{"end":{"column":146,"line":23},"start":{"column":100,"line":23}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"3041","location":{"end":{"column":146,"line":23},"start":{"column":100,"line":23}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"3042","location":{"end":{"column":122,"line":23},"start":{"column":120,"line":23}},"mutatorName":"EqualityOperator","replacement":"<","status":"Survived"},{"id":"3043","location":{"end":{"column":122,"line":23},"start":{"column":120,"line":23}},"mutatorName":"EqualityOperator","replacement":">","status":"Survived"},{"id":"3044","location":{"end":{"column":39,"line":24},"start":{"column":12,"line":24}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3045","location":{"end":{"column":39,"line":24},"start":{"column":12,"line":24}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3046","location":{"end":{"column":27,"line":24},"start":{"column":25,"line":24}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"3047","location":{"end":{"column":4,"line":42},"start":{"column":48,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3048","location":{"end":{"column":44,"line":33},"start":{"column":39,"line":33}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"3049","location":{"end":{"column":69,"line":34},"start":{"column":68,"line":34}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Survived"},{"id":"3050","location":{"end":{"column":47,"line":34},"start":{"column":46,"line":34}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Survived"},{"id":"3051","location":{"end":{"column":94,"line":34},"start":{"column":93,"line":34}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"3052","location":{"end":{"column":47,"line":35},"start":{"column":29,"line":35}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3053","location":{"end":{"column":47,"line":35},"start":{"column":29,"line":35}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"3054","location":{"end":{"column":45,"line":35},"start":{"column":44,"line":35}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"3055","location":{"end":{"column":45,"line":35},"start":{"column":44,"line":35}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"3056","location":{"end":{"column":134,"line":37},"start":{"column":7,"line":37}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3057","location":{"end":{"column":134,"line":37},"start":{"column":7,"line":37}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"3058","location":{"end":{"column":30,"line":37},"start":{"column":28,"line":37}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"3059","location":{"end":{"column":27,"line":37},"start":{"column":7,"line":37}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3060","location":{"end":{"column":27,"line":37},"start":{"column":7,"line":37}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"3061","location":{"end":{"column":25,"line":37},"start":{"column":22,"line":37}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"3062","location":{"end":{"column":134,"line":37},"start":{"column":31,"line":37}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3063","location":{"end":{"column":134,"line":37},"start":{"column":31,"line":37}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"3064","location":{"end":{"column":132,"line":37},"start":{"column":131,"line":37}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"3065","location":{"end":{"column":132,"line":37},"start":{"column":131,"line":37}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"3066","location":{"end":{"column":82,"line":37},"start":{"column":81,"line":37}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"Survived"},{"id":"3067","location":{"end":{"column":58,"line":37},"start":{"column":57,"line":37}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Survived"},{"id":"3068","location":{"end":{"column":105,"line":37},"start":{"column":104,"line":37}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Survived"},{"id":"3069","location":{"end":{"column":45,"line":38},"start":{"column":9,"line":38}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"3070","location":{"end":{"column":45,"line":38},"start":{"column":9,"line":38}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3071","location":{"end":{"column":27,"line":38},"start":{"column":25,"line":38}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"3072","location":{"end":{"column":6,"line":40},"start":{"column":47,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3073","location":{"end":{"column":41,"line":39},"start":{"column":37,"line":39}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"}],"source":"import { Location } from '@stryker-mutator/api/core';\n\nexport default class LocationHelper {\n  public static MAX_VALUE = new LocationHelper(\n    Object.freeze({\n      end: Object.freeze({ column: Number.POSITIVE_INFINITY, line: Number.POSITIVE_INFINITY }),\n      start: Object.freeze({ column: 0, line: -1 })\n    })\n  );\n\n  constructor(private readonly loc: Location) {}\n\n  /**\n   * Indicates whether the current location is covered by an other location.\n   * @param maybeWrapper The location that is questioned to be wrapping this location.\n   * @returns true if this location is covered by given location, otherwise false\n   */\n  public isCoveredBy(maybeWrapper: Location): boolean {\n    const isAfterStart =\n      this.loc.start.line > maybeWrapper.start.line ||\n      (this.loc.start.line === maybeWrapper.start.line && this.loc.start.column >= maybeWrapper.start.column);\n    const isBeforeEnd =\n      this.loc.end.line < maybeWrapper.end.line || (this.loc.end.line === maybeWrapper.end.line && this.loc.end.column <= maybeWrapper.end.column);\n    return isAfterStart && isBeforeEnd;\n  }\n\n  /**\n   * Indicates whether the given location is smaller than this location.\n   * @param maybeSmaller The area which is questioned to cover a smaller area than this location.\n   * @returns true if the given location covers a smaller area than this one.\n   */\n  public isSmallerArea(maybeSmaller: Location) {\n    let firstLocationHasSmallerArea = false;\n    const lineDifference = this.loc.end.line - this.loc.start.line - (maybeSmaller.end.line - maybeSmaller.start.line);\n    const coversLessLines = lineDifference > 0;\n    const coversLessColumns =\n      lineDifference === 0 && maybeSmaller.start.column - this.loc.start.column + (this.loc.end.column - maybeSmaller.end.column) > 0;\n    if (coversLessLines || coversLessColumns) {\n      firstLocationHasSmallerArea = true;\n    }\n    return firstLocationHasSmallerArea;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/utils/StringBuilder.ts":{"language":"typescript","mutants":[{"id":"3074","location":{"end":{"column":42,"line":7},"start":{"column":40,"line":7}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"3075","location":{"end":{"column":4,"line":17},"start":{"column":30,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3076","location":{"end":{"column":37,"line":12},"start":{"column":5,"line":12}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3077","location":{"end":{"column":37,"line":12},"start":{"column":5,"line":12}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3078","location":{"end":{"column":72,"line":13},"start":{"column":12,"line":13}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3079","location":{"end":{"column":48,"line":13},"start":{"column":46,"line":13}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"3080","location":{"end":{"column":32,"line":13},"start":{"column":31,"line":13}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"3081","location":{"end":{"column":32,"line":13},"start":{"column":31,"line":13}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"3082","location":{"end":{"column":70,"line":13},"start":{"column":69,"line":13}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"3083","location":{"end":{"column":70,"line":13},"start":{"column":69,"line":13}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"3084","location":{"end":{"column":6,"line":16},"start":{"column":74,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"Timeout"},{"id":"3085","location":{"end":{"column":42,"line":15},"start":{"column":7,"line":15}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3086","location":{"end":{"column":42,"line":15},"start":{"column":7,"line":15}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3087","location":{"end":{"column":4,"line":21},"start":{"column":21,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3088","location":{"end":{"column":32,"line":20},"start":{"column":30,"line":20}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"3089","location":{"end":{"column":4,"line":28},"start":{"column":62,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3090","location":{"end":{"column":29,"line":25},"start":{"column":12,"line":25}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"}],"source":"import { EOL } from 'os';\n\nconst DEFAULT_MAX_SIZE = 2048;\n\nexport default class StringBuilder {\n  private currentLength = 0;\n  private readonly strings: string[] = [];\n  private readonly maxSize = DEFAULT_MAX_SIZE;\n\n  public append(str: string) {\n    this.strings.push(str);\n    this.currentLength += str.length;\n    while (this.currentLength > this.maxSize && this.strings.length > 1) {\n      const popped = this.strings.shift() as string;\n      this.currentLength -= popped.length;\n    }\n  }\n\n  public toString() {\n    return this.strings.join('');\n  }\n\n  public static concat(...builders: StringBuilder[]): string {\n    return builders\n      .map(b => b.toString())\n      .filter(Boolean)\n      .join(EOL);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/utils/Task.ts":{"language":"typescript","mutants":[{"id":"3091","location":{"end":{"column":31,"line":10},"start":{"column":26,"line":10}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"3092","location":{"end":{"column":4,"line":17},"start":{"column":17,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3093","location":{"end":{"column":6,"line":16},"start":{"column":57,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3094","location":{"end":{"column":4,"line":21},"start":{"column":24,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3095","location":{"end":{"column":4,"line":25},"start":{"column":28,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3096","location":{"end":{"column":4,"line":30},"start":{"column":58,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3097","location":{"end":{"column":29,"line":28},"start":{"column":25,"line":28}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"3098","location":{"end":{"column":4,"line":35},"start":{"column":42,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3099","location":{"end":{"column":29,"line":33},"start":{"column":25,"line":33}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"3100","location":{"end":{"column":4,"line":45},"start":{"column":34,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import { timeout, TimeoutExpired } from './objectUtils';\n\n/**\n * Wraps a promise in a Task api for convenience.\n */\nexport class Task<T = void> {\n  protected _promise: Promise<T>;\n  private resolveFn: (value?: T | PromiseLike<T>) => void;\n  private rejectFn: (reason: any) => void;\n  private _isCompleted = false;\n\n  constructor() {\n    this._promise = new Promise<T>((resolve, reject) => {\n      this.resolveFn = resolve;\n      this.rejectFn = reject;\n    });\n  }\n\n  public get promise() {\n    return this._promise;\n  }\n\n  public get isCompleted() {\n    return this._isCompleted;\n  }\n\n  public resolve = (result: T | PromiseLike<T>): void => {\n    this._isCompleted = true;\n    this.resolveFn(result);\n  };\n\n  public reject = (reason: any): void => {\n    this._isCompleted = true;\n    this.rejectFn(reason);\n  };\n}\n\n/**\n * A task that can expire after the given time.\n */\nexport class ExpirableTask<T = void> extends Task<T | typeof TimeoutExpired> {\n  constructor(timeoutMS: number) {\n    super();\n    this._promise = timeout(this._promise, timeoutMS);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/utils/TemporaryDirectory.ts":{"language":"typescript","mutants":[{"id":"3101","location":{"end":{"column":32,"line":14},"start":{"column":27,"line":14}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"3102","location":{"end":{"column":4,"line":19},"start":{"column":70,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3103","location":{"end":{"column":4,"line":25},"start":{"column":23,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3104","location":{"end":{"column":30,"line":22},"start":{"column":26,"line":22}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"3105","location":{"end":{"column":47,"line":23},"start":{"column":20,"line":23}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"3106","location":{"end":{"column":4,"line":39},"start":{"column":56,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3107","location":{"end":{"column":28,"line":33},"start":{"column":9,"line":33}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3108","location":{"end":{"column":28,"line":33},"start":{"column":9,"line":33}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3109","location":{"end":{"column":28,"line":33},"start":{"column":9,"line":33}},"mutatorName":"BooleanLiteral","replacement":"this.isInitialized","status":"Killed"},{"id":"3110","location":{"end":{"column":6,"line":35},"start":{"column":30,"line":33}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3111","location":{"end":{"column":53,"line":34},"start":{"column":23,"line":34}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"3112","location":{"end":{"column":82,"line":36},"start":{"column":55,"line":36}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3113","location":{"end":{"column":4,"line":60},"start":{"column":121,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3114","location":{"end":{"column":6,"line":59},"start":{"column":51,"line":49}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"3115","location":{"end":{"column":111,"line":50},"start":{"column":91,"line":50}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage"},{"id":"3116","location":{"end":{"column":109,"line":50},"start":{"column":103,"line":50}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"3117","location":{"end":{"column":28,"line":52},"start":{"column":21,"line":52}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"3118","location":{"end":{"column":29,"line":53},"start":{"column":22,"line":53}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"3119","location":{"end":{"column":23,"line":54},"start":{"column":11,"line":54}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"3120","location":{"end":{"column":23,"line":54},"start":{"column":11,"line":54}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"3121","location":{"end":{"column":8,"line":56},"start":{"column":25,"line":54}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"3122","location":{"end":{"column":26,"line":58},"start":{"column":21,"line":58}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"3123","location":{"end":{"column":43,"line":58},"start":{"column":28,"line":58}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage"},{"id":"3124","location":{"end":{"column":4,"line":75},"start":{"column":26,"line":65}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3125","location":{"end":{"column":28,"line":66},"start":{"column":9,"line":66}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3126","location":{"end":{"column":28,"line":66},"start":{"column":9,"line":66}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"3127","location":{"end":{"column":28,"line":66},"start":{"column":9,"line":66}},"mutatorName":"BooleanLiteral","replacement":"this.isInitialized","status":"Killed"},{"id":"3128","location":{"end":{"column":6,"line":68},"start":{"column":30,"line":66}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"3129","location":{"end":{"column":53,"line":67},"start":{"column":23,"line":67}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"3130","location":{"end":{"column":56,"line":69},"start":{"column":20,"line":69}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"3131","location":{"end":{"column":6,"line":72},"start":{"column":9,"line":70}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3132","location":{"end":{"column":6,"line":74},"start":{"column":17,"line":72}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"3133","location":{"end":{"column":96,"line":73},"start":{"column":28,"line":73}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"3134","location":{"end":{"column":4,"line":83},"start":{"column":27,"line":81}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3135","location":{"end":{"column":37,"line":82},"start":{"column":36,"line":82}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"NoCoverage"}],"source":"import * as path from 'path';\n\nimport { StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { fsAsPromised } from '@stryker-mutator/util';\nimport * as mkdirp from 'mkdirp';\nimport { Disposable } from 'typed-inject';\n\nimport { deleteDir } from './fileUtils';\n\nexport class TemporaryDirectory implements Disposable {\n  private readonly temporaryDirectory: string;\n  private isInitialized = false;\n\n  public static readonly inject = tokens(commonTokens.logger, commonTokens.options);\n  constructor(private readonly log: Logger, options: StrykerOptions) {\n    this.temporaryDirectory = path.resolve(options.tempDirName);\n  }\n\n  public initialize() {\n    this.isInitialized = true;\n    this.log.debug('Using temp directory \"%s\"', this.temporaryDirectory);\n    mkdirp.sync(this.temporaryDirectory);\n  }\n\n  /**\n   * Creates a new random directory with the specified prefix.\n   * @param prefix The prefix.\n   * @returns The path to the directory.\n   */\n  public createRandomDirectory(prefix: string): string {\n    if (!this.isInitialized) {\n      throw new Error('initialize() was not called!');\n    }\n    const dir = path.resolve(this.temporaryDirectory, `${prefix}${this.random()}`);\n    mkdirp.sync(dir);\n    return dir;\n  }\n\n  /**\n   * Copies a file.\n   * @param fromFilename The path to the existing file.\n   * @param toFilename The path to copy the file to.\n   * @param instrumenter An optional additional instrumenter to stream the file through\n   * @returns A promise to eventually copy the file.\n   */\n  public copyFile(fromFilename: string, toFilename: string, instrumenter: NodeJS.ReadWriteStream | null): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      let readStream: NodeJS.ReadableStream = fsAsPromised.createReadStream(fromFilename, { encoding: 'utf8' });\n      const writeStream = fsAsPromised.createWriteStream(toFilename);\n      readStream.on('error', reject);\n      writeStream.on('error', reject);\n      if (instrumenter) {\n        readStream = readStream.pipe(instrumenter);\n      }\n      readStream.pipe(writeStream);\n      readStream.on('end', () => resolve());\n    });\n  }\n\n  /**\n   * Deletes the Stryker-temp directory\n   */\n  public async dispose() {\n    if (!this.isInitialized) {\n      throw new Error('initialize() was not called!');\n    }\n    this.log.debug('Deleting stryker temp directory %s', this.temporaryDirectory);\n    try {\n      await deleteDir(this.temporaryDirectory);\n    } catch (e) {\n      return this.log.info(`Failed to delete stryker temp directory ${this.temporaryDirectory}`);\n    }\n  }\n\n  /**\n   * Creates a random integer number.\n   * @returns A random integer.\n   */\n  public random(): number {\n    return Math.ceil(Math.random() * 10000000);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/utils/Timer.ts":{"language":"typescript","mutants":[{"id":"3136","location":{"end":{"column":37,"line":8},"start":{"column":21,"line":8}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"CompileError"},{"id":"3137","location":{"end":{"column":4,"line":11},"start":{"column":39,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3138","location":{"end":{"column":4,"line":16},"start":{"column":18,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3139","location":{"end":{"column":4,"line":21},"start":{"column":33,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3140","location":{"end":{"column":63,"line":20},"start":{"column":62,"line":20}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"3141","location":{"end":{"column":4,"line":26},"start":{"column":27,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3142","location":{"end":{"column":34,"line":25},"start":{"column":33,"line":25}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Killed"},{"id":"3143","location":{"end":{"column":4,"line":34},"start":{"column":42,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3144","location":{"end":{"column":49,"line":29},"start":{"column":9,"line":29}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"3145","location":{"end":{"column":49,"line":29},"start":{"column":9,"line":29}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"3146","location":{"end":{"column":23,"line":29},"start":{"column":21,"line":29}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"3147","location":{"end":{"column":6,"line":31},"start":{"column":51,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3148","location":{"end":{"column":36,"line":30},"start":{"column":35,"line":30}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"3149","location":{"end":{"column":6,"line":33},"start":{"column":12,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3150","location":{"end":{"column":36,"line":32},"start":{"column":35,"line":32}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Survived"},{"id":"3151","location":{"end":{"column":4,"line":38},"start":{"column":29,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3152","location":{"end":{"column":4,"line":47},"start":{"column":70,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3153","location":{"end":{"column":41,"line":41},"start":{"column":40,"line":41}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Killed"},{"id":"3154","location":{"end":{"column":26,"line":42},"start":{"column":9,"line":42}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3155","location":{"end":{"column":26,"line":42},"start":{"column":9,"line":42}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3156","location":{"end":{"column":24,"line":42},"start":{"column":21,"line":42}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"3157","location":{"end":{"column":6,"line":44},"start":{"column":28,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3158","location":{"end":{"column":37,"line":43},"start":{"column":14,"line":43}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3159","location":{"end":{"column":6,"line":46},"start":{"column":12,"line":44}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3160","location":{"end":{"column":38,"line":45},"start":{"column":14,"line":45}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3161","location":{"end":{"column":4,"line":58},"start":{"column":70,"line":49}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3162","location":{"end":{"column":55,"line":50},"start":{"column":54,"line":50}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Killed"},{"id":"3163","location":{"end":{"column":27,"line":51},"start":{"column":9,"line":51}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3164","location":{"end":{"column":27,"line":51},"start":{"column":9,"line":51}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3165","location":{"end":{"column":25,"line":51},"start":{"column":24,"line":51}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"3166","location":{"end":{"column":25,"line":51},"start":{"column":24,"line":51}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"3167","location":{"end":{"column":6,"line":53},"start":{"column":29,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3168","location":{"end":{"column":42,"line":52},"start":{"column":14,"line":52}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3169","location":{"end":{"column":34,"line":53},"start":{"column":16,"line":53}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3170","location":{"end":{"column":34,"line":53},"start":{"column":16,"line":53}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3171","location":{"end":{"column":32,"line":53},"start":{"column":31,"line":53}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"3172","location":{"end":{"column":32,"line":53},"start":{"column":31,"line":53}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"3173","location":{"end":{"column":6,"line":55},"start":{"column":36,"line":53}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3174","location":{"end":{"column":41,"line":54},"start":{"column":14,"line":54}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3175","location":{"end":{"column":6,"line":57},"start":{"column":12,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3176","location":{"end":{"column":16,"line":56},"start":{"column":14,"line":56}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"}],"source":"export default class Timer {\n  private readonly now: () => Date;\n  private start: Date;\n  private markers: {\n    [name: string]: Date;\n  };\n\n  constructor(now = () => new Date()) {\n    this.now = now;\n    this.reset();\n  }\n\n  public reset() {\n    this.markers = Object.create(null);\n    this.start = this.now();\n  }\n\n  public humanReadableElapsed() {\n    const elapsedSeconds = this.elapsedSeconds();\n    return Timer.humanReadableElapsedMinutes(elapsedSeconds) + Timer.humanReadableElapsedSeconds(elapsedSeconds);\n  }\n\n  public elapsedSeconds() {\n    const elapsedMs = this.elapsedMs();\n    return Math.floor(elapsedMs / 1000);\n  }\n\n  public elapsedMs(sinceMarker?: string) {\n    if (sinceMarker && this.markers[sinceMarker]) {\n      return this.now().getTime() - this.markers[sinceMarker].getTime();\n    } else {\n      return this.now().getTime() - this.start.getTime();\n    }\n  }\n\n  public mark(name: string) {\n    this.markers[name] = this.now();\n  }\n\n  private static humanReadableElapsedSeconds(elapsedSeconds: number) {\n    const restSeconds = elapsedSeconds % 60;\n    if (restSeconds === 1) {\n      return `${restSeconds} second`;\n    } else {\n      return `${restSeconds} seconds`;\n    }\n  }\n\n  private static humanReadableElapsedMinutes(elapsedSeconds: number) {\n    const elapsedMinutes = Math.floor(elapsedSeconds / 60);\n    if (elapsedMinutes > 1) {\n      return `${elapsedMinutes} minutes `;\n    } else if (elapsedMinutes > 0) {\n      return `${elapsedMinutes} minute `;\n    } else {\n      return '';\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/utils/fileUtils.ts":{"language":"typescript","mutants":[{"id":"3177","location":{"end":{"column":2,"line":14},"start":{"column":61,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3178","location":{"end":{"column":4,"line":13},"start":{"column":53,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"3179","location":{"end":{"column":41,"line":10},"start":{"column":26,"line":10}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage"},{"id":"3180","location":{"end":{"column":39,"line":10},"start":{"column":35,"line":10}},"mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage"},{"id":"3181","location":{"end":{"column":6,"line":12},"start":{"column":63,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"3182","location":{"end":{"column":2,"line":22},"start":{"column":63,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3183","location":{"end":{"column":4,"line":21},"start":{"column":49,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"3184","location":{"end":{"column":6,"line":20},"start":{"column":34,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"3185","location":{"end":{"column":2,"line":32},"start":{"column":55,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"3186","location":{"end":{"column":4,"line":29},"start":{"column":7,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3187","location":{"end":{"column":4,"line":31},"start":{"column":15,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3188","location":{"end":{"column":2,"line":39},"start":{"column":59,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3189","location":{"end":{"column":2,"line":53},"start":{"column":83,"line":47}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3190","location":{"end":{"column":28,"line":48},"start":{"column":7,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3191","location":{"end":{"column":28,"line":48},"start":{"column":7,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"3192","location":{"end":{"column":4,"line":50},"start":{"column":30,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3193","location":{"end":{"column":4,"line":52},"start":{"column":10,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3194","location":{"end":{"column":57,"line":51},"start":{"column":51,"line":51}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3195","location":{"end":{"column":2,"line":62},"start":{"column":59,"line":60}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3196","location":{"end":{"column":51,"line":61},"start":{"column":41,"line":61}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3197","location":{"end":{"column":2,"line":82},"start":{"column":81,"line":69}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3198","location":{"end":{"column":60,"line":71},"start":{"column":46,"line":71}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3199","location":{"end":{"column":45,"line":72},"start":{"column":7,"line":72}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3200","location":{"end":{"column":45,"line":72},"start":{"column":7,"line":72}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3201","location":{"end":{"column":4,"line":74},"start":{"column":47,"line":72}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3202","location":{"end":{"column":4,"line":81},"start":{"column":10,"line":74}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3203","location":{"end":{"column":28,"line":76},"start":{"column":9,"line":76}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3204","location":{"end":{"column":28,"line":76},"start":{"column":9,"line":76}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Timeout"},{"id":"3205","location":{"end":{"column":19,"line":76},"start":{"column":16,"line":76}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"3206","location":{"end":{"column":6,"line":78},"start":{"column":30,"line":76}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3207","location":{"end":{"column":6,"line":80},"start":{"column":12,"line":78}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import * as path from 'path';\n\nimport { fsAsPromised } from '@stryker-mutator/util';\nimport * as nodeGlob from 'glob';\nimport * as mkdirp from 'mkdirp';\nimport * as rimraf from 'rimraf';\n\nexport function glob(expression: string): Promise<string[]> {\n  return new Promise<string[]>((resolve, reject) => {\n    nodeGlob(expression, { nodir: true }, (error, matches) => {\n      error ? reject(error) : resolve(matches);\n    });\n  });\n}\n\nexport function deleteDir(dirToDelete: string): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    rimraf(dirToDelete, error => {\n      error ? reject(error) : resolve();\n    });\n  });\n}\n\nexport async function cleanFolder(folderName: string) {\n  try {\n    await fsAsPromised.lstat(folderName);\n    await deleteDir(folderName);\n    return mkdirp.sync(folderName);\n  } catch (e) {\n    return mkdirp.sync(folderName);\n  }\n}\n\n/**\n * Wrapper around the 'require' function (for testability)\n */\nexport function importModule(moduleName: string): unknown {\n  return require(moduleName);\n}\n\n/**\n * Writes data to a specified file.\n * @param fileName The path to the file.\n * @param data The content of the file.\n * @returns A promise to eventually save the file.\n */\nexport function writeFile(fileName: string, data: string | Buffer): Promise<void> {\n  if (Buffer.isBuffer(data)) {\n    return fsAsPromised.writeFile(fileName, data);\n  } else {\n    return fsAsPromised.writeFile(fileName, data, 'utf8');\n  }\n}\n\n/**\n * Creates a symlink at `from` that points to `to`\n * @param to The thing you want to point to\n * @param from The thing you want to point from\n */\nexport function symlinkJunction(to: string, from: string) {\n  return fsAsPromised.symlink(to, from, 'junction');\n}\n\n/**\n * Looks for the node_modules folder from basePath up to root.\n * returns the first occurrence of the node_modules, or null of none could be found.\n * @param basePath starting point\n */\nexport async function findNodeModules(basePath: string): Promise<string | null> {\n  basePath = path.resolve(basePath);\n  const nodeModules = path.resolve(basePath, 'node_modules');\n  if (await fsAsPromised.exists(nodeModules)) {\n    return nodeModules;\n  } else {\n    const parent = path.dirname(basePath);\n    if (parent === basePath) {\n      return null;\n    } else {\n      return findNodeModules(path.dirname(basePath));\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/utils/netUtils.ts":{"language":"typescript","mutants":[{"id":"3208","location":{"end":{"column":2,"line":10},"start":{"column":51,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3209","location":{"end":{"column":47,"line":9},"start":{"column":10,"line":9}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3210","location":{"end":{"column":47,"line":9},"start":{"column":10,"line":9}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3211","location":{"end":{"column":30,"line":9},"start":{"column":28,"line":9}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"3212","location":{"end":{"column":27,"line":9},"start":{"column":10,"line":9}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3213","location":{"end":{"column":27,"line":9},"start":{"column":10,"line":9}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"3214","location":{"end":{"column":23,"line":9},"start":{"column":21,"line":9}},"mutatorName":"EqualityOperator","replacement":"<","status":"Killed"},{"id":"3215","location":{"end":{"column":23,"line":9},"start":{"column":21,"line":9}},"mutatorName":"EqualityOperator","replacement":">","status":"Killed"},{"id":"3216","location":{"end":{"column":47,"line":9},"start":{"column":31,"line":9}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3217","location":{"end":{"column":47,"line":9},"start":{"column":31,"line":9}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3218","location":{"end":{"column":43,"line":9},"start":{"column":42,"line":9}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Survived"},{"id":"3219","location":{"end":{"column":43,"line":9},"start":{"column":42,"line":9}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"}],"source":"import getPort = require('get-port');\n\n/**\n * A wrapper around `getPort` for testing purposes\n */\nexport const getFreePort = getPort;\n\nexport function isOK(statusCode: number): boolean {\n  return statusCode >= 200 && statusCode < 300;\n}\n"},"/home/runner/work/stryker/stryker/packages/core/src/utils/objectUtils.ts":{"language":"typescript","mutants":[{"id":"3220","location":{"end":{"column":2,"line":15},"start":{"column":84,"line":6}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3221","location":{"end":{"column":4,"line":13},"start":{"column":38,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"3222","location":{"end":{"column":52,"line":10},"start":{"column":9,"line":10}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3223","location":{"end":{"column":52,"line":10},"start":{"column":9,"line":10}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"3224","location":{"end":{"column":37,"line":10},"start":{"column":35,"line":10}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"3225","location":{"end":{"column":25,"line":10},"start":{"column":22,"line":10}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"3226","location":{"end":{"column":34,"line":10},"start":{"column":26,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"3227","location":{"end":{"column":47,"line":10},"start":{"column":44,"line":10}},"mutatorName":"EqualityOperator","replacement":"===","status":"Survived"},{"id":"3228","location":{"end":{"column":6,"line":12},"start":{"column":54,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"3229","location":{"end":{"column":2,"line":19},"start":{"column":63,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3230","location":{"end":{"column":66,"line":18},"start":{"column":23,"line":18}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"3231","location":{"end":{"column":66,"line":18},"start":{"column":31,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3232","location":{"end":{"column":66,"line":18},"start":{"column":31,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3233","location":{"end":{"column":52,"line":18},"start":{"column":50,"line":18}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"3234","location":{"end":{"column":49,"line":18},"start":{"column":31,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3235","location":{"end":{"column":49,"line":18},"start":{"column":31,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3236","location":{"end":{"column":39,"line":18},"start":{"column":36,"line":18}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"3237","location":{"end":{"column":66,"line":18},"start":{"column":53,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3238","location":{"end":{"column":66,"line":18},"start":{"column":53,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3239","location":{"end":{"column":61,"line":18},"start":{"column":58,"line":18}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"3240","location":{"end":{"column":2,"line":26},"start":{"column":53,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3241","location":{"end":{"column":38,"line":25},"start":{"column":10,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3242","location":{"end":{"column":2,"line":33},"start":{"column":93,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3243","location":{"end":{"column":2,"line":42},"start":{"column":69,"line":35}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3244","location":{"end":{"column":26,"line":37},"start":{"column":7,"line":37}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"3245","location":{"end":{"column":26,"line":37},"start":{"column":7,"line":37}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"3246","location":{"end":{"column":16,"line":37},"start":{"column":13,"line":37}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"3247","location":{"end":{"column":4,"line":39},"start":{"column":28,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3248","location":{"end":{"column":68,"line":38},"start":{"column":28,"line":38}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3249","location":{"end":{"column":4,"line":41},"start":{"column":10,"line":39}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3250","location":{"end":{"column":2,"line":49},"start":{"column":40,"line":47}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"3251","location":{"end":{"column":2,"line":53},"start":{"column":59,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3252","location":{"end":{"column":51,"line":52},"start":{"column":43,"line":52}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3253","location":{"end":{"column":68,"line":52},"start":{"column":62,"line":52}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3254","location":{"end":{"column":2,"line":71},"start":{"column":50,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3255","location":{"end":{"column":4,"line":70},"start":{"column":36,"line":56}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"3256","location":{"end":{"column":28,"line":57},"start":{"column":19,"line":57}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"3257","location":{"end":{"column":6,"line":63},"start":{"column":67,"line":57}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"3258","location":{"end":{"column":38,"line":58},"start":{"column":11,"line":58}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"3259","location":{"end":{"column":38,"line":58},"start":{"column":11,"line":58}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"3260","location":{"end":{"column":17,"line":58},"start":{"column":15,"line":58}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"3261","location":{"end":{"column":38,"line":58},"start":{"column":18,"line":58}},"mutatorName":"BooleanLiteral","replacement":"canIgnore(err.code)","status":"NoCoverage"},{"id":"3262","location":{"end":{"column":8,"line":60},"start":{"column":40,"line":58}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"3263","location":{"end":{"column":8,"line":62},"start":{"column":14,"line":60}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"3264","location":{"end":{"column":6,"line":69},"start":{"column":50,"line":65}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3265","location":{"end":{"column":42,"line":68},"start":{"column":14,"line":68}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"3266","location":{"end":{"column":42,"line":68},"start":{"column":14,"line":68}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"3267","location":{"end":{"column":29,"line":68},"start":{"column":27,"line":68}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"3268","location":{"end":{"column":26,"line":68},"start":{"column":14,"line":68}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"3269","location":{"end":{"column":26,"line":68},"start":{"column":14,"line":68}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"3270","location":{"end":{"column":22,"line":68},"start":{"column":19,"line":68}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"3271","location":{"end":{"column":42,"line":68},"start":{"column":30,"line":68}},"mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage"},{"id":"3272","location":{"end":{"column":42,"line":68},"start":{"column":30,"line":68}},"mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage"},{"id":"3273","location":{"end":{"column":38,"line":68},"start":{"column":35,"line":68}},"mutatorName":"EqualityOperator","replacement":"!==","status":"NoCoverage"},{"id":"3274","location":{"end":{"column":69,"line":73},"start":{"column":53,"line":73}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"3275","location":{"end":{"column":2,"line":88},"start":{"column":97,"line":74}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3276","location":{"end":{"column":4,"line":86},"start":{"column":70,"line":75}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3277","location":{"end":{"column":55,"line":76},"start":{"column":30,"line":76}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"3278","location":{"end":{"column":8,"line":81},"start":{"column":23,"line":78}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3279","location":{"end":{"column":8,"line":85},"start":{"column":23,"line":82}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3280","location":{"end":{"column":2,"line":95},"start":{"column":48,"line":90}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"3281","location":{"end":{"column":16,"line":92},"start":{"column":12,"line":92}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3282","location":{"end":{"column":27,"line":93},"start":{"column":10,"line":93}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"3283","location":{"end":{"column":23,"line":93},"start":{"column":22,"line":93}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"CompileError"},{"id":"3284","location":{"end":{"column":21,"line":93},"start":{"column":17,"line":93}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3285","location":{"end":{"column":15,"line":94},"start":{"column":11,"line":94}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import treeKill = require('tree-kill');\nimport { StrykerError } from '@stryker-mutator/util';\n\nexport { serialize, deserialize } from 'surrial';\n\nexport function freezeRecursively<T extends { [prop: string]: any }>(target: T): T {\n  Object.freeze(target);\n  Object.keys(target).forEach(key => {\n    const value = target[key];\n    if (typeof value === 'object' && value !== null) {\n      freezeRecursively(value);\n    }\n  });\n  return target;\n}\n\nexport function filterEmpty<T>(input: Array<T | null | void>) {\n  return input.filter(item => item !== undefined && item !== null) as T[];\n}\n\nexport function wrapInClosure(codeFragment: string) {\n  return `\n    (function (window) {\n      ${codeFragment}\n    })((Function('return this'))());`;\n}\n\n/**\n * A wrapper around `process.env` (for testability)\n */\nexport function getEnvironmentVariable(nameEnvironmentVariable: string): string | undefined {\n  return process.env[nameEnvironmentVariable];\n}\n\nexport function getEnvironmentVariableOrThrow(name: string): string {\n  const value = getEnvironmentVariable(name);\n  if (value === undefined) {\n    throw new StrykerError(`Missing environment variable \"${name}\"`);\n  } else {\n    return value;\n  }\n}\n\n/**\n * A wrapper around `process.exitCode = n` (for testability)\n */\nexport function setExitCode(n: number) {\n  process.exitCode = n;\n}\n\nexport function base64Decode(base64EncodedString: string) {\n  return Buffer.from(base64EncodedString, 'base64').toString('utf8');\n}\n\nexport function kill(pid: number): Promise<void> {\n  return new Promise((res, rej) => {\n    treeKill(pid, 'SIGKILL', (err?: { code?: number } & Error) => {\n      if (err && !canIgnore(err.code)) {\n        rej(err);\n      } else {\n        res();\n      }\n    });\n\n    function canIgnore(code: number | undefined) {\n      // https://docs.microsoft.com/en-us/windows/desktop/Debug/system-error-codes--0-499-\n      // these error codes mean the program is _already_ closed.\n      return code === 255 || code === 128;\n    }\n  });\n}\n\nexport const TimeoutExpired: unique symbol = Symbol('TimeoutExpired');\nexport function timeout<T>(promise: Promise<T>, ms: number): Promise<T | typeof TimeoutExpired> {\n  const sleep = new Promise<T | typeof TimeoutExpired>((res, rej) => {\n    const timer = setTimeout(() => res(TimeoutExpired), ms);\n    promise\n      .then(result => {\n        clearTimeout(timer);\n        res(result);\n      })\n      .catch(error => {\n        clearTimeout(timer);\n        rej(error);\n      });\n  });\n  return sleep;\n}\n\nexport function padLeft(input: string): string {\n  return input\n    .split('\\n')\n    .map(str => '\\t' + str)\n    .join('\\n');\n}\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}}