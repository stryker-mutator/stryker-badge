{"files":{"/home/runner/work/stryker/stryker/packages/javascript-mutator/src/JavaScriptMutator.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":4,"line":35},"start":{"column":47,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"1","location":{"end":{"column":33,"line":17},"start":{"column":31,"line":17}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"2","location":{"end":{"column":6,"line":32},"start":{"column":32,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3","location":{"end":{"column":8,"line":31},"start":{"column":49,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"4","location":{"end":{"column":10,"line":30},"start":{"column":42,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"5","location":{"end":{"column":34,"line":26},"start":{"column":15,"line":26}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"6","location":{"end":{"column":34,"line":26},"start":{"column":15,"line":26}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"7","location":{"end":{"column":12,"line":29},"start":{"column":36,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"8","location":{"end":{"column":4,"line":54},"start":{"column":104,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"9","location":{"end":{"column":33,"line":38},"start":{"column":31,"line":38}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"10","location":{"end":{"column":6,"line":52},"start":{"column":34,"line":39}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"11","location":{"end":{"column":51,"line":41},"start":{"column":11,"line":41}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"12","location":{"end":{"column":51,"line":41},"start":{"column":11,"line":41}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"13","location":{"end":{"column":33,"line":41},"start":{"column":31,"line":41}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"14","location":{"end":{"column":25,"line":41},"start":{"column":22,"line":41}},"mutatorName":"EqualityOperator","replacement":"===","status":"CompileError"},{"id":"15","location":{"end":{"column":46,"line":41},"start":{"column":43,"line":41}},"mutatorName":"EqualityOperator","replacement":"===","status":"CompileError"},{"id":"16","location":{"end":{"column":8,"line":51},"start":{"column":53,"line":41}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"17","location":{"end":{"column":63,"line":42},"start":{"column":41,"line":42}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"CompileError"},{"id":"18","location":{"end":{"column":10,"line":48},"start":{"column":32,"line":43}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"19","location":{"end":{"column":128,"line":49},"start":{"column":24,"line":49}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import * as types from '@babel/types';\nimport { File } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { Mutant, Mutator } from '@stryker-mutator/api/mutant';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\n\nimport BabelParser from './helpers/BabelParser';\nimport copy from './helpers/copy';\nimport { NodeMutator } from './mutators/NodeMutator';\nimport { NODE_MUTATORS_TOKEN, PARSER_TOKEN } from './helpers/tokens';\n\nexport class JavaScriptMutator implements Mutator {\n  public static inject = tokens(commonTokens.logger, NODE_MUTATORS_TOKEN, PARSER_TOKEN);\n  constructor(private readonly log: Logger, private readonly mutators: readonly NodeMutator[], private readonly parser: BabelParser) {}\n\n  public mutate(inputFiles: File[]): Mutant[] {\n    const mutants: Mutant[] = [];\n\n    inputFiles.forEach(file => {\n      const ast = this.parser.parse(file.textContent);\n\n      this.parser.getNodes(ast).forEach(node => {\n        this.mutators.forEach(mutator => {\n          const mutatedNodes = mutator.mutate(node, copy);\n\n          if (mutatedNodes.length) {\n            const newMutants = this.generateMutants(mutatedNodes, mutator.name, file.name);\n            mutants.push(...newMutants);\n          }\n        });\n      });\n    });\n\n    return mutants;\n  }\n\n  private generateMutants(mutatedNodes: types.Node[], mutatorName: string, fileName: string): Mutant[] {\n    const mutants: Mutant[] = [];\n    mutatedNodes.forEach(node => {\n      const replacement = this.parser.generateCode(node);\n      if (node.start !== null && node.end !== null) {\n        const range: [number, number] = [node.start, node.end];\n        const mutant: Mutant = {\n          fileName,\n          mutatorName,\n          range,\n          replacement\n        };\n        this.log.trace(`Generated mutant for mutator ${mutatorName} in file ${fileName} with replacement code \"${replacement}\"`);\n        mutants.push(mutant);\n      }\n    });\n    return mutants;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/javascript-mutator/src/helpers/BabelParser.ts":{"language":"typescript","mutants":[{"id":"20","location":{"end":{"column":4,"line":17},"start":{"column":83,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"21","location":{"end":{"column":4,"line":21},"start":{"column":42,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"22","location":{"end":{"column":4,"line":42},"start":{"column":74,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"23","location":{"end":{"column":6,"line":33},"start":{"column":21,"line":24}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"24","location":{"end":{"column":6,"line":33},"start":{"column":21,"line":24}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"25","location":{"end":{"column":39,"line":24},"start":{"column":37,"line":24}},"mutatorName":"LogicalOperator","replacement":"&&","status":"CompileError"},{"id":"26","location":{"end":{"column":6,"line":33},"start":{"column":40,"line":24}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"CompileError"},{"id":"27","location":{"end":{"column":24,"line":25},"start":{"column":7,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"28","location":{"end":{"column":15,"line":26},"start":{"column":7,"line":26}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"29","location":{"end":{"column":24,"line":27},"start":{"column":7,"line":27}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"30","location":{"end":{"column":22,"line":28},"start":{"column":7,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"31","location":{"end":{"column":13,"line":29},"start":{"column":7,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"32","location":{"end":{"column":12,"line":30},"start":{"column":7,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"33","location":{"end":{"column":25,"line":31},"start":{"column":7,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"34","location":{"end":{"column":55,"line":32},"start":{"column":7,"line":32}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"35","location":{"end":{"column":20,"line":32},"start":{"column":8,"line":32}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"36","location":{"end":{"column":54,"line":32},"start":{"column":22,"line":32}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"37","location":{"end":{"column":52,"line":32},"start":{"column":48,"line":32}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"38","location":{"end":{"column":6,"line":37},"start":{"column":36,"line":34}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"39","location":{"end":{"column":32,"line":36},"start":{"column":19,"line":36}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"40","location":{"end":{"column":34,"line":38},"start":{"column":9,"line":38}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"41","location":{"end":{"column":34,"line":38},"start":{"column":9,"line":38}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"42","location":{"end":{"column":6,"line":40},"start":{"column":36,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"43","location":{"end":{"column":64,"line":39},"start":{"column":22,"line":39}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"44","location":{"end":{"column":4,"line":57},"start":{"column":54,"line":44}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"45","location":{"end":{"column":39,"line":45},"start":{"column":37,"line":45}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"46","location":{"end":{"column":6,"line":54},"start":{"column":19,"line":47}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"47","location":{"end":{"column":8,"line":53},"start":{"column":41,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"48","location":{"end":{"column":4,"line":61},"start":{"column":40,"line":59}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import generate from '@babel/generator';\nimport { parse, ParserOptions } from '@babel/parser';\nimport traverse, { NodePath } from '@babel/traverse';\nimport * as types from '@babel/types';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { MutatorDescriptor } from '@stryker-mutator/api/core';\n\nimport { NodeWithParent } from './ParentNode';\n\nexport default class BabelParser {\n  public static inject = tokens(commonTokens.logger, commonTokens.mutatorDescriptor);\n  private readonly options: ParserOptions;\n\n  constructor(private readonly log: Logger, mutatorDescriptor: MutatorDescriptor) {\n    this.options = this.createOptions(mutatorDescriptor.plugins);\n  }\n\n  public parse(code: string): types.File {\n    return parse(code, this.options);\n  }\n\n  private createOptions(pluginOverrides: string[] | null): ParserOptions {\n    const plugins = pluginOverrides || [\n      'asyncGenerators',\n      'bigInt',\n      'classProperties',\n      'dynamicImport',\n      'flow',\n      'jsx',\n      'objectRestSpread',\n      ['decorators', { decoratorsBeforeExport: true }] as any\n    ];\n    const options: ParserOptions = {\n      plugins,\n      sourceType: 'unambiguous'\n    };\n    if (this.log.isDebugEnabled()) {\n      this.log.debug(`Using options ${JSON.stringify(options)}`);\n    }\n    return options;\n  }\n\n  public getNodes(ast: types.File): NodeWithParent[] {\n    const nodes: NodeWithParent[] = [];\n\n    traverse(ast, {\n      enter(path: NodePath<types.Node>) {\n        const node: NodeWithParent = path.node;\n        node.parent = path.parent as any;\n        Object.freeze(node);\n        nodes.push(node);\n      }\n    });\n\n    return nodes;\n  }\n\n  public generateCode(ast: types.Node) {\n    return generate(ast).code;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/javascript-mutator/src/helpers/NodeGenerator.ts":{"language":"typescript","mutants":[{"id":"49","location":{"end":{"column":4,"line":15},"start":{"column":106,"line":4}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"50","location":{"end":{"column":6,"line":14},"start":{"column":12,"line":5}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"51","location":{"end":{"column":29,"line":12},"start":{"column":13,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"}],"source":"import * as types from '@babel/types';\n\nexport class NodeGenerator {\n  public static createBooleanLiteralNode(originalNode: types.Node, value: boolean): types.BooleanLiteral {\n    return {\n      end: originalNode.end,\n      innerComments: originalNode.innerComments,\n      leadingComments: originalNode.leadingComments,\n      loc: originalNode.loc,\n      start: originalNode.start,\n      trailingComments: originalNode.trailingComments,\n      type: 'BooleanLiteral',\n      value\n    };\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/javascript-mutator/src/helpers/copy.ts":{"language":"typescript","mutants":[{"id":"52","location":{"end":{"column":83,"line":3},"start":{"column":16,"line":3}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"53","location":{"end":{"column":82,"line":3},"start":{"column":72,"line":3}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"}],"source":"import cloneDeep = require('lodash.clonedeep');\n\nexport default <T>(obj: T, deep?: boolean) => (deep ? cloneDeep(obj) : { ...obj });\n"},"/home/runner/work/stryker/stryker/packages/javascript-mutator/src/helpers/tokens.ts":{"language":"typescript","mutants":[{"id":"54","location":{"end":{"column":37,"line":1},"start":{"column":29,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"55","location":{"end":{"column":50,"line":2},"start":{"column":36,"line":2}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"export const PARSER_TOKEN = 'parser';\nexport const NODE_MUTATORS_TOKEN = 'NodeMutators';\n"},"/home/runner/work/stryker/stryker/packages/javascript-mutator/src/index.ts":{"language":"typescript","mutants":[{"id":"56","location":{"end":{"column":113,"line":8},"start":{"column":31,"line":8}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage"},{"id":"57","location":{"end":{"column":85,"line":8},"start":{"column":73,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"58","location":{"end":{"column":2,"line":15},"start":{"column":90,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"import { commonTokens, declareFactoryPlugin, Injector, OptionsContext, PluginKind, tokens } from '@stryker-mutator/api/plugin';\n\nimport { JavaScriptMutator } from './JavaScriptMutator';\nimport { nodeMutators } from './mutators';\nimport { NODE_MUTATORS_TOKEN, PARSER_TOKEN } from './helpers/tokens';\nimport BabelParser from './helpers/BabelParser';\n\nexport const strykerPlugins = [declareFactoryPlugin(PluginKind.Mutator, 'javascript', javaScriptMutatorFactory)];\n\nfunction javaScriptMutatorFactory(injector: Injector<OptionsContext>): JavaScriptMutator {\n  return injector\n    .provideValue(NODE_MUTATORS_TOKEN, nodeMutators)\n    .provideClass(PARSER_TOKEN, BabelParser)\n    .injectClass(JavaScriptMutator);\n}\njavaScriptMutatorFactory.inject = tokens(commonTokens.injector);\n"},"/home/runner/work/stryker/stryker/packages/javascript-mutator/src/mutators/ArithmeticOperatorMutator.ts":{"language":"typescript","mutants":[{"id":"59","location":{"end":{"column":4,"line":12},"start":{"column":83,"line":6}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"60","location":{"end":{"column":8,"line":7},"start":{"column":5,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"61","location":{"end":{"column":13,"line":7},"start":{"column":10,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"62","location":{"end":{"column":8,"line":8},"start":{"column":5,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"63","location":{"end":{"column":13,"line":8},"start":{"column":10,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"64","location":{"end":{"column":8,"line":9},"start":{"column":5,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"65","location":{"end":{"column":13,"line":9},"start":{"column":10,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"66","location":{"end":{"column":8,"line":10},"start":{"column":5,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"67","location":{"end":{"column":13,"line":10},"start":{"column":10,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"68","location":{"end":{"column":8,"line":11},"start":{"column":5,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"69","location":{"end":{"column":13,"line":11},"start":{"column":10,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"70","location":{"end":{"column":37,"line":14},"start":{"column":17,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"71","location":{"end":{"column":4,"line":33},"start":{"column":110,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"72","location":{"end":{"column":39,"line":17},"start":{"column":9,"line":17}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"73","location":{"end":{"column":39,"line":17},"start":{"column":9,"line":17}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"74","location":{"end":{"column":6,"line":30},"start":{"column":41,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"75","location":{"end":{"column":27,"line":19},"start":{"column":11,"line":19}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"76","location":{"end":{"column":27,"line":19},"start":{"column":11,"line":19}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"77","location":{"end":{"column":8,"line":29},"start":{"column":29,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"78","location":{"end":{"column":49,"line":20},"start":{"column":13,"line":20}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"79","location":{"end":{"column":49,"line":20},"start":{"column":13,"line":20}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"80","location":{"end":{"column":40,"line":20},"start":{"column":37,"line":20}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"81","location":{"end":{"column":49,"line":20},"start":{"column":41,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"82","location":{"end":{"column":10,"line":22},"start":{"column":51,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"83","location":{"end":{"column":48,"line":21},"start":{"column":30,"line":21}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"84","location":{"end":{"column":10,"line":28},"start":{"column":68,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"85","location":{"end":{"column":14,"line":32},"start":{"column":12,"line":32}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"}],"source":"import * as types from '@babel/types';\n\nimport { NodeMutator } from './NodeMutator';\n\nexport default class ArithmeticOperatorMutator implements NodeMutator {\n  private readonly operators: { [targetedOperator: string]: string | string[] } = {\n    '+': '-',\n    '-': '+',\n    '*': '/',\n    '/': '*',\n    '%': '*'\n  };\n\n  public name = 'ArithmeticOperator';\n\n  public mutate(node: types.Node, clone: <T extends types.Node>(node: T, deep?: boolean) => T): types.Node[] {\n    if (types.isBinaryExpression(node)) {\n      let mutatedOperators = this.operators[node.operator];\n      if (mutatedOperators) {\n        if (typeof mutatedOperators === 'string') {\n          mutatedOperators = [mutatedOperators];\n        }\n\n        return mutatedOperators.map<types.Node>(mutatedOperator => {\n          const mutatedNode = clone(node);\n          mutatedNode.operator = mutatedOperator as any;\n          return mutatedNode;\n        });\n      }\n    }\n\n    return [];\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/javascript-mutator/src/mutators/ArrayDeclarationMutator.ts":{"language":"typescript","mutants":[{"id":"86","location":{"end":{"column":35,"line":9},"start":{"column":17,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"87","location":{"end":{"column":4,"line":25},"start":{"column":108,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"88","location":{"end":{"column":35,"line":12},"start":{"column":33,"line":12}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"89","location":{"end":{"column":38,"line":14},"start":{"column":9,"line":14}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"90","location":{"end":{"column":38,"line":14},"start":{"column":9,"line":14}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"91","location":{"end":{"column":6,"line":18},"start":{"column":40,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"92","location":{"end":{"column":55,"line":16},"start":{"column":53,"line":16}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"93","location":{"end":{"column":99,"line":16},"start":{"column":58,"line":16}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"94","location":{"end":{"column":97,"line":16},"start":{"column":79,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"95","location":{"end":{"column":144,"line":18},"start":{"column":16,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"96","location":{"end":{"column":144,"line":18},"start":{"column":16,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"97","location":{"end":{"column":115,"line":18},"start":{"column":113,"line":18}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"98","location":{"end":{"column":80,"line":18},"start":{"column":78,"line":18}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"99","location":{"end":{"column":76,"line":18},"start":{"column":17,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"100","location":{"end":{"column":76,"line":18},"start":{"column":17,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"101","location":{"end":{"column":48,"line":18},"start":{"column":46,"line":18}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"102","location":{"end":{"column":136,"line":18},"start":{"column":133,"line":18}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"103","location":{"end":{"column":144,"line":18},"start":{"column":137,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"104","location":{"end":{"column":6,"line":22},"start":{"column":146,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"105","location":{"end":{"column":57,"line":20},"start":{"column":55,"line":20}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"106","location":{"end":{"column":85,"line":20},"start":{"column":60,"line":20}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"}],"source":"import * as types from '@babel/types';\n\nimport { NodeMutator } from './NodeMutator';\n\n/**\n * Represents a mutator which can remove the content of an array's elements.\n */\nexport default class ArrayDeclarationMutator implements NodeMutator {\n  public name = 'ArrayDeclaration';\n\n  public mutate(node: types.Node, copy: <T extends types.Node>(obj: T, deep?: boolean) => T): types.Node[] {\n    const nodes: types.Node[] = [];\n\n    if (types.isArrayExpression(node)) {\n      const mutatedNode = copy(node);\n      mutatedNode.elements = node.elements.length ? [] : [types.stringLiteral('Stryker was here')];\n      nodes.push(mutatedNode);\n    } else if ((types.isCallExpression(node) || types.isNewExpression(node)) && types.isIdentifier(node.callee) && node.callee.name === 'Array') {\n      const mutatedNode = copy(node);\n      mutatedNode.arguments = node.arguments.length ? [] : [types.arrayExpression()];\n      nodes.push(mutatedNode);\n    }\n\n    return nodes;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/javascript-mutator/src/mutators/BlockStatementMutator.ts":{"language":"typescript","mutants":[{"id":"107","location":{"end":{"column":33,"line":9},"start":{"column":17,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"108","location":{"end":{"column":4,"line":21},"start":{"column":108,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"109","location":{"end":{"column":35,"line":12},"start":{"column":33,"line":12}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"110","location":{"end":{"column":61,"line":14},"start":{"column":9,"line":14}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"111","location":{"end":{"column":61,"line":14},"start":{"column":9,"line":14}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"112","location":{"end":{"column":40,"line":14},"start":{"column":38,"line":14}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"113","location":{"end":{"column":59,"line":14},"start":{"column":58,"line":14}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"114","location":{"end":{"column":59,"line":14},"start":{"column":58,"line":14}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"115","location":{"end":{"column":6,"line":18},"start":{"column":63,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"116","location":{"end":{"column":28,"line":16},"start":{"column":26,"line":16}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"}],"source":"import * as types from '@babel/types';\n\nimport { NodeMutator } from './NodeMutator';\n\n/**\n * Represents a mutator which can remove the content of a Block.\n */\nexport default class BlockStatementMutator implements NodeMutator {\n  public name = 'BlockStatement';\n\n  public mutate(node: types.Node, copy: <T extends types.Node>(obj: T, deep?: boolean) => T): types.Node[] {\n    const nodes: types.Node[] = [];\n\n    if (types.isBlockStatement(node) && node.body.length > 0) {\n      const mutatedNode = copy(node);\n      mutatedNode.body = [];\n      nodes.push(mutatedNode);\n    }\n\n    return nodes;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/javascript-mutator/src/mutators/BooleanLiteralMutator.ts":{"language":"typescript","mutants":[{"id":"117","location":{"end":{"column":33,"line":6},"start":{"column":17,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"118","location":{"end":{"column":44,"line":8},"start":{"column":41,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"119","location":{"end":{"column":4,"line":25},"start":{"column":108,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"120","location":{"end":{"column":35,"line":11},"start":{"column":33,"line":11}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"121","location":{"end":{"column":37,"line":14},"start":{"column":9,"line":14}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"122","location":{"end":{"column":37,"line":14},"start":{"column":9,"line":14}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"123","location":{"end":{"column":6,"line":18},"start":{"column":39,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"124","location":{"end":{"column":45,"line":16},"start":{"column":27,"line":16}},"mutatorName":"BooleanLiteral","replacement":"mutatedNode.value","status":"Killed"},{"id":"125","location":{"end":{"column":105,"line":18},"start":{"column":16,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"126","location":{"end":{"column":105,"line":18},"start":{"column":16,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"127","location":{"end":{"column":93,"line":18},"start":{"column":91,"line":18}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"128","location":{"end":{"column":48,"line":18},"start":{"column":46,"line":18}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"129","location":{"end":{"column":90,"line":18},"start":{"column":49,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"130","location":{"end":{"column":90,"line":18},"start":{"column":49,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"131","location":{"end":{"column":66,"line":18},"start":{"column":63,"line":18}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"132","location":{"end":{"column":6,"line":22},"start":{"column":107,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import * as types from '@babel/types';\n\nimport { NodeMutator } from './NodeMutator';\n\nexport default class BooleanLiteralMutator implements NodeMutator {\n  public name = 'BooleanLiteral';\n\n  private readonly unaryBooleanPrefix = '!';\n\n  public mutate(node: types.Node, copy: <T extends types.Node>(obj: T, deep?: boolean) => T): types.Node[] {\n    const nodes: types.Node[] = [];\n\n    // true -> false or false -> true\n    if (types.isBooleanLiteral(node)) {\n      const mutatedNode = copy(node);\n      mutatedNode.value = !mutatedNode.value;\n      nodes.push(mutatedNode);\n    } else if (types.isUnaryExpression(node) && node.operator === this.unaryBooleanPrefix && node.prefix) {\n      const mutatedNode = copy(node.argument);\n      mutatedNode.start = node.start;\n      nodes.push(mutatedNode);\n    }\n\n    return nodes;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/javascript-mutator/src/mutators/ConditionalExpressionMutator.ts":{"language":"typescript","mutants":[{"id":"133","location":{"end":{"column":107,"line":12},"start":{"column":47,"line":12}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"134","location":{"end":{"column":52,"line":12},"start":{"column":48,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"135","location":{"end":{"column":59,"line":12},"start":{"column":54,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"136","location":{"end":{"column":65,"line":12},"start":{"column":61,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"137","location":{"end":{"column":70,"line":12},"start":{"column":67,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"138","location":{"end":{"column":76,"line":12},"start":{"column":72,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"139","location":{"end":{"column":82,"line":12},"start":{"column":78,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"140","location":{"end":{"column":89,"line":12},"start":{"column":84,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"141","location":{"end":{"column":94,"line":12},"start":{"column":91,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"142","location":{"end":{"column":100,"line":12},"start":{"column":96,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"143","location":{"end":{"column":106,"line":12},"start":{"column":102,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"144","location":{"end":{"column":40,"line":14},"start":{"column":17,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"145","location":{"end":{"column":4,"line":26},"start":{"column":57,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"146","location":{"end":{"column":8,"line":24},"start":{"column":7,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"147","location":{"end":{"column":8,"line":24},"start":{"column":7,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"148","location":{"end":{"column":22,"line":18},"start":{"column":20,"line":18}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"149","location":{"end":{"column":19,"line":18},"start":{"column":7,"line":18}},"mutatorName":"BooleanLiteral","replacement":"node.parent","status":"CompileError"},{"id":"150","location":{"end":{"column":8,"line":24},"start":{"column":7,"line":19}},"mutatorName":"BooleanLiteral","replacement":"(types.isForStatement(node.parent) ||\n    types.isWhileStatement(node.parent) ||\n    types.isIfStatement(node.parent) ||\n    types.isDoWhileStatement(node.parent))","status":"Killed"},{"id":"151","location":{"end":{"column":46,"line":23},"start":{"column":9,"line":20}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"152","location":{"end":{"column":46,"line":23},"start":{"column":9,"line":20}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"153","location":{"end":{"column":44,"line":22},"start":{"column":42,"line":22}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"154","location":{"end":{"column":41,"line":22},"start":{"column":9,"line":20}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"155","location":{"end":{"column":41,"line":22},"start":{"column":9,"line":20}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"156","location":{"end":{"column":47,"line":21},"start":{"column":45,"line":21}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"157","location":{"end":{"column":44,"line":21},"start":{"column":9,"line":20}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"158","location":{"end":{"column":44,"line":21},"start":{"column":9,"line":20}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"159","location":{"end":{"column":45,"line":20},"start":{"column":43,"line":20}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"160","location":{"end":{"column":4,"line":30},"start":{"column":54,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"161","location":{"end":{"column":4,"line":58},"start":{"column":108,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"162","location":{"end":{"column":144,"line":33},"start":{"column":9,"line":33}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"163","location":{"end":{"column":144,"line":33},"start":{"column":9,"line":33}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"164","location":{"end":{"column":108,"line":33},"start":{"column":106,"line":33}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"165","location":{"end":{"column":79,"line":33},"start":{"column":77,"line":33}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"166","location":{"end":{"column":75,"line":33},"start":{"column":10,"line":33}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"167","location":{"end":{"column":75,"line":33},"start":{"column":10,"line":33}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"168","location":{"end":{"column":43,"line":33},"start":{"column":41,"line":33}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"169","location":{"end":{"column":6,"line":35},"start":{"column":146,"line":33}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"170","location":{"end":{"column":119,"line":34},"start":{"column":14,"line":34}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"171","location":{"end":{"column":65,"line":34},"start":{"column":60,"line":34}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"172","location":{"end":{"column":117,"line":34},"start":{"column":113,"line":34}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"173","location":{"end":{"column":78,"line":35},"start":{"column":16,"line":35}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"174","location":{"end":{"column":78,"line":35},"start":{"column":16,"line":35}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"175","location":{"end":{"column":49,"line":35},"start":{"column":47,"line":35}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"176","location":{"end":{"column":6,"line":37},"start":{"column":80,"line":35}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"177","location":{"end":{"column":72,"line":36},"start":{"column":14,"line":36}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"178","location":{"end":{"column":70,"line":36},"start":{"column":65,"line":36}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"179","location":{"end":{"column":42,"line":37},"start":{"column":16,"line":37}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"180","location":{"end":{"column":42,"line":37},"start":{"column":16,"line":37}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"181","location":{"end":{"column":6,"line":45},"start":{"column":44,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"182","location":{"end":{"column":21,"line":38},"start":{"column":11,"line":38}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"183","location":{"end":{"column":21,"line":38},"start":{"column":11,"line":38}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"184","location":{"end":{"column":21,"line":38},"start":{"column":11,"line":38}},"mutatorName":"BooleanLiteral","replacement":"node.test","status":"CompileError"},{"id":"185","location":{"end":{"column":8,"line":42},"start":{"column":23,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"186","location":{"end":{"column":78,"line":40},"start":{"column":73,"line":40}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"187","location":{"end":{"column":29,"line":41},"start":{"column":16,"line":41}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"188","location":{"end":{"column":8,"line":44},"start":{"column":14,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"189","location":{"end":{"column":74,"line":43},"start":{"column":16,"line":43}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"190","location":{"end":{"column":72,"line":43},"start":{"column":67,"line":43}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"191","location":{"end":{"column":41,"line":45},"start":{"column":16,"line":45}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"192","location":{"end":{"column":41,"line":45},"start":{"column":16,"line":45}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"193","location":{"end":{"column":6,"line":47},"start":{"column":43,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"194","location":{"end":{"column":129,"line":46},"start":{"column":14,"line":46}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"195","location":{"end":{"column":70,"line":46},"start":{"column":65,"line":46}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"196","location":{"end":{"column":127,"line":46},"start":{"column":123,"line":46}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"197","location":{"end":{"column":33,"line":50},"start":{"column":7,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"198","location":{"end":{"column":33,"line":50},"start":{"column":7,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"199","location":{"end":{"column":34,"line":48},"start":{"column":32,"line":48}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"200","location":{"end":{"column":31,"line":50},"start":{"column":30,"line":50}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"201","location":{"end":{"column":31,"line":50},"start":{"column":30,"line":50}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"202","location":{"end":{"column":6,"line":55},"start":{"column":7,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"203","location":{"end":{"column":34,"line":53},"start":{"column":32,"line":53}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"204","location":{"end":{"column":27,"line":54},"start":{"column":14,"line":54}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"205","location":{"end":{"column":14,"line":57},"start":{"column":12,"line":57}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"}],"source":"import * as types from '@babel/types';\n\nimport { NodeGenerator } from '../helpers/NodeGenerator';\nimport { NodeWithParent } from '../helpers/ParentNode';\n\nimport { NodeMutator } from './NodeMutator';\n\n/**\n * Represents a mutator which can remove the conditional clause from statements.\n */\nexport default class ConditionalExpressionMutator implements NodeMutator {\n  private readonly validOperators: string[] = ['!=', '!==', '&&', '<', '<=', '==', '===', '>', '>=', '||'];\n\n  public name = 'ConditionalExpression';\n\n  private hasValidParent(node: NodeWithParent): boolean {\n    return (\n      !node.parent ||\n      !(\n        types.isForStatement(node.parent) ||\n        types.isWhileStatement(node.parent) ||\n        types.isIfStatement(node.parent) ||\n        types.isDoWhileStatement(node.parent)\n      )\n    );\n  }\n\n  private isValidOperator(operator: string): boolean {\n    return this.validOperators.includes(operator);\n  }\n\n  public mutate(node: types.Node, copy: <T extends types.Node>(obj: T, deep?: boolean) => T): types.Node[] {\n    if ((types.isBinaryExpression(node) || types.isLogicalExpression(node)) && this.hasValidParent(node) && this.isValidOperator(node.operator)) {\n      return [NodeGenerator.createBooleanLiteralNode(node, false), NodeGenerator.createBooleanLiteralNode(node, true)];\n    } else if (types.isDoWhileStatement(node) || types.isWhileStatement(node)) {\n      return [NodeGenerator.createBooleanLiteralNode(node.test, false)];\n    } else if (types.isForStatement(node)) {\n      if (!node.test) {\n        const mutatedNode = copy(node);\n        mutatedNode.test = NodeGenerator.createBooleanLiteralNode(node, false);\n        return [mutatedNode];\n      } else {\n        return [NodeGenerator.createBooleanLiteralNode(node.test, false)];\n      }\n    } else if (types.isIfStatement(node)) {\n      return [NodeGenerator.createBooleanLiteralNode(node.test, false), NodeGenerator.createBooleanLiteralNode(node.test, true)];\n    } else if (\n      types.isSwitchCase(node) &&\n      // if not a fallthrough case\n      node.consequent.length > 0\n    ) {\n      const mutatedNode = copy(node);\n      mutatedNode.consequent = [];\n      return [mutatedNode];\n    }\n\n    return [];\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/javascript-mutator/src/mutators/EqualityOperatorMutator.ts":{"language":"typescript","mutants":[{"id":"206","location":{"end":{"column":4,"line":15},"start":{"column":83,"line":6}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"207","location":{"end":{"column":8,"line":7},"start":{"column":5,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"208","location":{"end":{"column":22,"line":7},"start":{"column":10,"line":7}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"209","location":{"end":{"column":15,"line":7},"start":{"column":11,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"210","location":{"end":{"column":21,"line":7},"start":{"column":17,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"211","location":{"end":{"column":9,"line":8},"start":{"column":5,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"212","location":{"end":{"column":21,"line":8},"start":{"column":11,"line":8}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"213","location":{"end":{"column":15,"line":8},"start":{"column":12,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"214","location":{"end":{"column":20,"line":8},"start":{"column":17,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"215","location":{"end":{"column":8,"line":9},"start":{"column":5,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"216","location":{"end":{"column":22,"line":9},"start":{"column":10,"line":9}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"217","location":{"end":{"column":15,"line":9},"start":{"column":11,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"218","location":{"end":{"column":21,"line":9},"start":{"column":17,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"219","location":{"end":{"column":9,"line":10},"start":{"column":5,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"220","location":{"end":{"column":21,"line":10},"start":{"column":11,"line":10}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"221","location":{"end":{"column":15,"line":10},"start":{"column":12,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"222","location":{"end":{"column":20,"line":10},"start":{"column":17,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"223","location":{"end":{"column":9,"line":11},"start":{"column":5,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"224","location":{"end":{"column":15,"line":11},"start":{"column":11,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"225","location":{"end":{"column":9,"line":12},"start":{"column":5,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"226","location":{"end":{"column":15,"line":12},"start":{"column":11,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"227","location":{"end":{"column":10,"line":13},"start":{"column":5,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"228","location":{"end":{"column":17,"line":13},"start":{"column":12,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"229","location":{"end":{"column":10,"line":14},"start":{"column":5,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"230","location":{"end":{"column":17,"line":14},"start":{"column":12,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"231","location":{"end":{"column":35,"line":17},"start":{"column":17,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"232","location":{"end":{"column":4,"line":36},"start":{"column":110,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"233","location":{"end":{"column":39,"line":20},"start":{"column":9,"line":20}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"234","location":{"end":{"column":39,"line":20},"start":{"column":9,"line":20}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"235","location":{"end":{"column":6,"line":33},"start":{"column":41,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"236","location":{"end":{"column":27,"line":22},"start":{"column":11,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"237","location":{"end":{"column":27,"line":22},"start":{"column":11,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"238","location":{"end":{"column":8,"line":32},"start":{"column":29,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"239","location":{"end":{"column":49,"line":23},"start":{"column":13,"line":23}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"240","location":{"end":{"column":49,"line":23},"start":{"column":13,"line":23}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"241","location":{"end":{"column":40,"line":23},"start":{"column":37,"line":23}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"242","location":{"end":{"column":49,"line":23},"start":{"column":41,"line":23}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"243","location":{"end":{"column":10,"line":25},"start":{"column":51,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"244","location":{"end":{"column":48,"line":24},"start":{"column":30,"line":24}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"245","location":{"end":{"column":10,"line":31},"start":{"column":68,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"246","location":{"end":{"column":14,"line":35},"start":{"column":12,"line":35}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"}],"source":"import * as types from '@babel/types';\n\nimport { NodeMutator } from './NodeMutator';\n\nexport default class EqualityOperatorMutator implements NodeMutator {\n  private readonly operators: { [targetedOperator: string]: string | string[] } = {\n    '<': ['<=', '>='],\n    '<=': ['<', '>'],\n    '>': ['>=', '<='],\n    '>=': ['>', '<'],\n    '==': '!=',\n    '!=': '==',\n    '===': '!==',\n    '!==': '==='\n  };\n\n  public name = 'EqualityOperator';\n\n  public mutate(node: types.Node, clone: <T extends types.Node>(node: T, deep?: boolean) => T): types.Node[] {\n    if (types.isBinaryExpression(node)) {\n      let mutatedOperators = this.operators[node.operator];\n      if (mutatedOperators) {\n        if (typeof mutatedOperators === 'string') {\n          mutatedOperators = [mutatedOperators];\n        }\n\n        return mutatedOperators.map<types.Node>(mutatedOperator => {\n          const mutatedNode = clone(node);\n          mutatedNode.operator = mutatedOperator as any;\n          return mutatedNode;\n        });\n      }\n    }\n\n    return [];\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/javascript-mutator/src/mutators/LogicalOperatorMutator.ts":{"language":"typescript","mutants":[{"id":"247","location":{"end":{"column":4,"line":9},"start":{"column":83,"line":6}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"248","location":{"end":{"column":9,"line":7},"start":{"column":5,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"249","location":{"end":{"column":15,"line":7},"start":{"column":11,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"250","location":{"end":{"column":9,"line":8},"start":{"column":5,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"251","location":{"end":{"column":15,"line":8},"start":{"column":11,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"252","location":{"end":{"column":34,"line":11},"start":{"column":17,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"253","location":{"end":{"column":4,"line":30},"start":{"column":110,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"254","location":{"end":{"column":40,"line":14},"start":{"column":9,"line":14}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"255","location":{"end":{"column":40,"line":14},"start":{"column":9,"line":14}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"256","location":{"end":{"column":6,"line":27},"start":{"column":42,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"257","location":{"end":{"column":27,"line":16},"start":{"column":11,"line":16}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"258","location":{"end":{"column":27,"line":16},"start":{"column":11,"line":16}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"259","location":{"end":{"column":8,"line":26},"start":{"column":29,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"260","location":{"end":{"column":49,"line":17},"start":{"column":13,"line":17}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"261","location":{"end":{"column":49,"line":17},"start":{"column":13,"line":17}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"262","location":{"end":{"column":40,"line":17},"start":{"column":37,"line":17}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"263","location":{"end":{"column":49,"line":17},"start":{"column":41,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"264","location":{"end":{"column":10,"line":19},"start":{"column":51,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"265","location":{"end":{"column":48,"line":18},"start":{"column":30,"line":18}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"266","location":{"end":{"column":10,"line":25},"start":{"column":68,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"267","location":{"end":{"column":14,"line":29},"start":{"column":12,"line":29}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"}],"source":"import * as types from '@babel/types';\n\nimport { NodeMutator } from './NodeMutator';\n\nexport default class LogicalOperatorMutator implements NodeMutator {\n  private readonly operators: { [targetedOperator: string]: string | string[] } = {\n    '&&': '||',\n    '||': '&&'\n  };\n\n  public name = 'LogicalOperator';\n\n  public mutate(node: types.Node, clone: <T extends types.Node>(node: T, deep?: boolean) => T): types.Node[] {\n    if (types.isLogicalExpression(node)) {\n      let mutatedOperators = this.operators[node.operator];\n      if (mutatedOperators) {\n        if (typeof mutatedOperators === 'string') {\n          mutatedOperators = [mutatedOperators];\n        }\n\n        return mutatedOperators.map<types.Node>(mutatedOperator => {\n          const mutatedNode = clone(node);\n          mutatedNode.operator = mutatedOperator as any;\n          return mutatedNode;\n        });\n      }\n    }\n\n    return [];\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/javascript-mutator/src/mutators/ObjectLiteralMutator.ts":{"language":"typescript","mutants":[{"id":"268","location":{"end":{"column":32,"line":9},"start":{"column":17,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"269","location":{"end":{"column":4,"line":21},"start":{"column":108,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"270","location":{"end":{"column":35,"line":12},"start":{"column":33,"line":12}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"271","location":{"end":{"column":69,"line":14},"start":{"column":9,"line":14}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"272","location":{"end":{"column":69,"line":14},"start":{"column":9,"line":14}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"273","location":{"end":{"column":42,"line":14},"start":{"column":40,"line":14}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"274","location":{"end":{"column":67,"line":14},"start":{"column":66,"line":14}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"275","location":{"end":{"column":67,"line":14},"start":{"column":66,"line":14}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"276","location":{"end":{"column":6,"line":18},"start":{"column":71,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"277","location":{"end":{"column":34,"line":16},"start":{"column":32,"line":16}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"}],"source":"import * as types from '@babel/types';\n\nimport { NodeMutator } from './NodeMutator';\n\n/**\n * Represents a mutator which can remove the content of a Object.\n */\nexport default class ObjectLiteralMutator implements NodeMutator {\n  public name = 'ObjectLiteral';\n\n  public mutate(node: types.Node, copy: <T extends types.Node>(obj: T, deep?: boolean) => T): types.Node[] {\n    const nodes: types.Node[] = [];\n\n    if (types.isObjectExpression(node) && node.properties.length > 0) {\n      const mutatedNode = copy(node);\n      mutatedNode.properties = [];\n      nodes.push(mutatedNode);\n    }\n\n    return nodes;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/javascript-mutator/src/mutators/StringLiteralMutator.ts":{"language":"typescript","mutants":[{"id":"278","location":{"end":{"column":32,"line":8},"start":{"column":17,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"279","location":{"end":{"column":4,"line":31},"start":{"column":112,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"280","location":{"end":{"column":35,"line":11},"start":{"column":33,"line":11}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"281","location":{"end":{"column":38,"line":13},"start":{"column":9,"line":13}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"282","location":{"end":{"column":38,"line":13},"start":{"column":9,"line":13}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"283","location":{"end":{"column":6,"line":24},"start":{"column":40,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"284","location":{"end":{"column":8,"line":23},"start":{"column":18,"line":14}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"285","location":{"end":{"column":30,"line":21},"start":{"column":15,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"286","location":{"end":{"column":81,"line":22},"start":{"column":16,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"287","location":{"end":{"column":81,"line":22},"start":{"column":16,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"288","location":{"end":{"column":43,"line":22},"start":{"column":41,"line":22}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"289","location":{"end":{"column":40,"line":22},"start":{"column":16,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"290","location":{"end":{"column":40,"line":22},"start":{"column":16,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"291","location":{"end":{"column":38,"line":22},"start":{"column":35,"line":22}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"292","location":{"end":{"column":81,"line":22},"start":{"column":44,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"293","location":{"end":{"column":81,"line":22},"start":{"column":44,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"294","location":{"end":{"column":79,"line":22},"start":{"column":76,"line":22}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"295","location":{"end":{"column":103,"line":22},"start":{"column":84,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"296","location":{"end":{"column":108,"line":22},"start":{"column":106,"line":22}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"297","location":{"end":{"column":101,"line":24},"start":{"column":16,"line":24}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"298","location":{"end":{"column":101,"line":24},"start":{"column":16,"line":24}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"299","location":{"end":{"column":73,"line":24},"start":{"column":71,"line":24}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"300","location":{"end":{"column":69,"line":24},"start":{"column":17,"line":24}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"301","location":{"end":{"column":69,"line":24},"start":{"column":17,"line":24}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"302","location":{"end":{"column":32,"line":24},"start":{"column":30,"line":24}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"303","location":{"end":{"column":29,"line":24},"start":{"column":17,"line":24}},"mutatorName":"BooleanLiteral","replacement":"node.parent","status":"Killed"},{"id":"304","location":{"end":{"column":6,"line":28},"start":{"column":103,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"305","location":{"end":{"column":57,"line":26},"start":{"column":27,"line":26}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"306","location":{"end":{"column":57,"line":26},"start":{"column":27,"line":26}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"307","location":{"end":{"column":55,"line":26},"start":{"column":52,"line":26}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"308","location":{"end":{"column":79,"line":26},"start":{"column":60,"line":26}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"309","location":{"end":{"column":84,"line":26},"start":{"column":82,"line":26}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"310","location":{"end":{"column":4,"line":35},"start":{"column":51,"line":33}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"311","location":{"end":{"column":117,"line":34},"start":{"column":12,"line":34}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"312","location":{"end":{"column":117,"line":34},"start":{"column":12,"line":34}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"313","location":{"end":{"column":87,"line":34},"start":{"column":85,"line":34}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"314","location":{"end":{"column":84,"line":34},"start":{"column":12,"line":34}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"315","location":{"end":{"column":84,"line":34},"start":{"column":12,"line":34}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"316","location":{"end":{"column":49,"line":34},"start":{"column":47,"line":34}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"317","location":{"end":{"column":46,"line":34},"start":{"column":12,"line":34}},"mutatorName":"BooleanLiteral","replacement":"types.isImportDeclaration(parent)","status":"Killed"},{"id":"318","location":{"end":{"column":84,"line":34},"start":{"column":50,"line":34}},"mutatorName":"BooleanLiteral","replacement":"types.isExportDeclaration(parent)","status":"Killed"},{"id":"319","location":{"end":{"column":117,"line":34},"start":{"column":88,"line":34}},"mutatorName":"BooleanLiteral","replacement":"types.isJSXAttribute(parent)","status":"Killed"}],"source":"import * as types from '@babel/types';\n\nimport { NodeWithParent } from '../helpers/ParentNode';\n\nimport { NodeMutator } from './NodeMutator';\n\nexport default class StringLiteralMutator implements NodeMutator {\n  public name = 'StringLiteral';\n\n  public mutate(node: NodeWithParent, copy: <T extends types.Node>(obj: T, deep?: boolean) => T): types.Node[] {\n    const nodes: types.Node[] = [];\n\n    if (types.isTemplateLiteral(node)) {\n      nodes.push({\n        end: node.end,\n        innerComments: node.innerComments,\n        leadingComments: node.leadingComments,\n        loc: node.loc,\n        start: node.start,\n        trailingComments: node.trailingComments,\n        type: 'StringLiteral',\n        value: node.quasis.length === 1 && node.quasis[0].value.raw.length === 0 ? 'Stryker was here!' : ''\n      } as types.StringLiteral);\n    } else if ((!node.parent || this.isDeclarationOrJSX(node.parent)) && types.isStringLiteral(node)) {\n      const mutatedNode = copy(node);\n      mutatedNode.value = mutatedNode.value.length === 0 ? 'Stryker was here!' : '';\n      nodes.push(mutatedNode);\n    }\n\n    return nodes;\n  }\n\n  private isDeclarationOrJSX(parent?: types.Node) {\n    return !types.isImportDeclaration(parent) && !types.isExportDeclaration(parent) && !types.isJSXAttribute(parent);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/javascript-mutator/src/mutators/UnaryOperatorMutator.ts":{"language":"typescript","mutants":[{"id":"320","location":{"end":{"column":32,"line":6},"start":{"column":17,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"321","location":{"end":{"column":4,"line":12},"start":{"column":72,"line":8}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"322","location":{"end":{"column":8,"line":9},"start":{"column":5,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"323","location":{"end":{"column":13,"line":9},"start":{"column":10,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"324","location":{"end":{"column":8,"line":10},"start":{"column":5,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"325","location":{"end":{"column":13,"line":10},"start":{"column":10,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"326","location":{"end":{"column":8,"line":11},"start":{"column":5,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"327","location":{"end":{"column":12,"line":11},"start":{"column":10,"line":11}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"328","location":{"end":{"column":4,"line":30},"start":{"column":108,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"329","location":{"end":{"column":35,"line":15},"start":{"column":33,"line":15}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"330","location":{"end":{"column":100,"line":17},"start":{"column":9,"line":17}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"331","location":{"end":{"column":100,"line":17},"start":{"column":9,"line":17}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"332","location":{"end":{"column":88,"line":17},"start":{"column":86,"line":17}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"333","location":{"end":{"column":41,"line":17},"start":{"column":39,"line":17}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"334","location":{"end":{"column":85,"line":17},"start":{"column":42,"line":17}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"335","location":{"end":{"column":85,"line":17},"start":{"column":42,"line":17}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"336","location":{"end":{"column":75,"line":17},"start":{"column":72,"line":17}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"337","location":{"end":{"column":6,"line":27},"start":{"column":102,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"338","location":{"end":{"column":51,"line":18},"start":{"column":11,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"339","location":{"end":{"column":51,"line":18},"start":{"column":11,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"340","location":{"end":{"column":49,"line":18},"start":{"column":48,"line":18}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"341","location":{"end":{"column":49,"line":18},"start":{"column":48,"line":18}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"342","location":{"end":{"column":8,"line":22},"start":{"column":53,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"343","location":{"end":{"column":8,"line":26},"start":{"column":14,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import * as types from '@babel/types';\n\nimport { NodeMutator } from './NodeMutator';\n\nexport default class UnaryOperatorMutator implements NodeMutator {\n  public name = 'UnaryOperator';\n\n  private readonly operators: { [targetedOperator: string]: string } = {\n    '+': '-',\n    '-': '+',\n    '~': ''\n  };\n\n  public mutate(node: types.Node, copy: <T extends types.Node>(obj: T, deep?: boolean) => T): types.Node[] {\n    const nodes: types.Node[] = [];\n\n    if (types.isUnaryExpression(node) && this.operators[node.operator] !== undefined && node.prefix) {\n      if (this.operators[node.operator].length > 0) {\n        const mutatedNode = copy(node);\n        mutatedNode.operator = this.operators[node.operator] as any;\n        nodes.push(mutatedNode);\n      } else {\n        const mutatedNode = copy(node.argument);\n        mutatedNode.start = node.start;\n        nodes.push(mutatedNode);\n      }\n    }\n\n    return nodes;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/javascript-mutator/src/mutators/UpdateOperatorMutator.ts":{"language":"typescript","mutants":[{"id":"344","location":{"end":{"column":33,"line":6},"start":{"column":17,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"345","location":{"end":{"column":4,"line":11},"start":{"column":72,"line":8}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"346","location":{"end":{"column":9,"line":9},"start":{"column":5,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"347","location":{"end":{"column":15,"line":9},"start":{"column":11,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"348","location":{"end":{"column":9,"line":10},"start":{"column":5,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"349","location":{"end":{"column":15,"line":10},"start":{"column":11,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"350","location":{"end":{"column":4,"line":23},"start":{"column":108,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"351","location":{"end":{"column":35,"line":14},"start":{"column":33,"line":14}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"CompileError"},{"id":"352","location":{"end":{"column":86,"line":16},"start":{"column":9,"line":16}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"353","location":{"end":{"column":86,"line":16},"start":{"column":9,"line":16}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"354","location":{"end":{"column":42,"line":16},"start":{"column":40,"line":16}},"mutatorName":"LogicalOperator","replacement":"||","status":"CompileError"},{"id":"355","location":{"end":{"column":76,"line":16},"start":{"column":73,"line":16}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"356","location":{"end":{"column":6,"line":20},"start":{"column":88,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import * as types from '@babel/types';\n\nimport { NodeMutator } from './NodeMutator';\n\nexport default class UpdateOperatorMutator implements NodeMutator {\n  public name = 'UpdateOperator';\n\n  private readonly operators: { [targetedOperator: string]: string } = {\n    '++': '--',\n    '--': '++'\n  };\n\n  public mutate(node: types.Node, copy: <T extends types.Node>(obj: T, deep?: boolean) => T): types.Node[] {\n    const nodes: types.Node[] = [];\n\n    if (types.isUpdateExpression(node) && this.operators[node.operator] !== undefined) {\n      const mutatedNode = copy(node);\n      mutatedNode.operator = this.operators[node.operator] as any;\n      nodes.push(mutatedNode);\n    }\n\n    return nodes;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/javascript-mutator/src/mutators/index.ts":{"language":"typescript","mutants":[{"id":"357","location":{"end":{"column":2,"line":25},"start":{"column":43,"line":13}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"}],"source":"import ArithmeticOperatorMutator from './ArithmeticOperatorMutator';\nimport ArrayDeclarationMutator from './ArrayDeclarationMutator';\nimport BlockStatementMutator from './BlockStatementMutator';\nimport BooleanLiteralMutator from './BooleanLiteralMutator';\nimport ConditionalExpressionMutator from './ConditionalExpressionMutator';\nimport EqualityOperatorMutator from './EqualityOperatorMutator';\nimport ObjectLiteralMutator from './ObjectLiteralMutator';\nimport StringLiteralMutator from './StringLiteralMutator';\nimport LogicalOperatorMutator from './LogicalOperatorMutator';\nimport UnaryOperatorMutator from './UnaryOperatorMutator';\nimport UpdateOperatorMutator from './UpdateOperatorMutator';\n\nexport const nodeMutators = Object.freeze([\n  new ArithmeticOperatorMutator(),\n  new ArrayDeclarationMutator(),\n  new BlockStatementMutator(),\n  new BooleanLiteralMutator(),\n  new ConditionalExpressionMutator(),\n  new EqualityOperatorMutator(),\n  new LogicalOperatorMutator(),\n  new ObjectLiteralMutator(),\n  new StringLiteralMutator(),\n  new UnaryOperatorMutator(),\n  new UpdateOperatorMutator()\n]);\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}}