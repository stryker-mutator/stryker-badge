{"files":{"/home/runner/work/stryker/stryker/packages/html-reporter/src/HtmlReporter.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":67,"line":13},"start":{"column":44,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"1","location":{"end":{"column":53,"line":14},"start":{"column":35,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2","location":{"end":{"column":4,"line":26},"start":{"column":89,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"3","location":{"end":{"column":4,"line":30},"start":{"column":19,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"4","location":{"end":{"column":4,"line":45},"start":{"column":85,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"5","location":{"end":{"column":66,"line":33},"start":{"column":54,"line":33}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"6","location":{"end":{"column":6,"line":43},"start":{"column":23,"line":35}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"7","location":{"end":{"column":83,"line":37},"start":{"column":25,"line":37}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"8","location":{"end":{"column":63,"line":38},"start":{"column":36,"line":38}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"9","location":{"end":{"column":56,"line":40},"start":{"column":45,"line":40}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"10","location":{"end":{"column":77,"line":40},"start":{"column":58,"line":40}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"11","location":{"end":{"column":126,"line":40},"start":{"column":107,"line":40}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"12","location":{"end":{"column":56,"line":41},"start":{"column":45,"line":41}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"13","location":{"end":{"column":70,"line":41},"start":{"column":58,"line":41}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"14","location":{"end":{"column":112,"line":41},"start":{"column":100,"line":41}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"15","location":{"end":{"column":79,"line":42},"start":{"column":49,"line":42}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"16","location":{"end":{"column":75,"line":44},"start":{"column":19,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"17","location":{"end":{"column":4,"line":60},"start":{"column":33,"line":47}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"18","location":{"end":{"column":23,"line":48},"start":{"column":9,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"19","location":{"end":{"column":23,"line":48},"start":{"column":9,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"20","location":{"end":{"column":23,"line":48},"start":{"column":9,"line":48}},"mutatorName":"BooleanLiteral","replacement":"this._baseDir","status":"Killed"},{"id":"21","location":{"end":{"column":6,"line":58},"start":{"column":25,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"22","location":{"end":{"column":73,"line":49},"start":{"column":11,"line":49}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"23","location":{"end":{"column":73,"line":49},"start":{"column":11,"line":49}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"24","location":{"end":{"column":39,"line":49},"start":{"column":37,"line":49}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"25","location":{"end":{"column":8,"line":52},"start":{"column":75,"line":49}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"26","location":{"end":{"column":73,"line":51},"start":{"column":24,"line":51}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"27","location":{"end":{"column":8,"line":57},"start":{"column":14,"line":52}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"28","location":{"end":{"column":151,"line":54},"start":{"column":11,"line":54}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"29","location":{"end":{"column":4,"line":65},"start":{"column":50,"line":62}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import * as path from 'path';\n\nimport { StrykerOptions } from '@stryker-mutator/api/core';\nimport { Logger } from '@stryker-mutator/api/logging';\nimport { commonTokens, tokens } from '@stryker-mutator/api/plugin';\nimport { mutationTestReportSchema, Reporter } from '@stryker-mutator/api/report';\n\nimport fileUrl = require('file-url');\n\nimport { bindMutationTestReport } from './templates/bindMutationTestReport';\nimport * as util from './util';\n\nconst DEFAULT_BASE_FOLDER = path.normalize('reports/mutation/html');\nexport const RESOURCES_DIR_NAME = 'strykerResources';\n\nexport default class HtmlReporter implements Reporter {\n  private _baseDir!: string;\n  private mainPromise: Promise<void> | undefined;\n\n  constructor(private readonly options: StrykerOptions, private readonly log: Logger) {}\n\n  public static readonly inject = tokens(commonTokens.options, commonTokens.logger);\n\n  public onMutationTestReportReady(report: mutationTestReportSchema.MutationTestResult) {\n    this.mainPromise = this.generateReport(report);\n  }\n\n  public wrapUp() {\n    return this.mainPromise;\n  }\n\n  private async generateReport(report: mutationTestReportSchema.MutationTestResult) {\n    const indexFileName = path.resolve(this.baseDir, 'index.html');\n    await this.cleanBaseFolder();\n    await Promise.all([\n      util.copyFile(\n        require.resolve('mutation-testing-elements/dist/mutation-test-elements.js'),\n        path.resolve(this.baseDir, 'mutation-test-elements.js')\n      ),\n      util.copyFile(path.resolve(__dirname, 'templates', 'stryker-80x80.png'), path.resolve(this.baseDir, 'stryker-80x80.png')),\n      util.copyFile(path.resolve(__dirname, 'templates', 'index.html'), path.resolve(this.baseDir, 'index.html')),\n      util.writeFile(path.resolve(this.baseDir, 'bind-mutation-test-report.js'), bindMutationTestReport(report))\n    ]);\n    this.log.info(`Your report can be found at: ${fileUrl(indexFileName)}`);\n  }\n\n  private get baseDir(): string {\n    if (!this._baseDir) {\n      if (this.options.htmlReporter && this.options.htmlReporter.baseDir) {\n        this._baseDir = this.options.htmlReporter.baseDir;\n        this.log.debug(`Using configured output folder ${this._baseDir}`);\n      } else {\n        this.log.debug(\n          `No base folder configuration found (using configuration: htmlReporter: { baseDir: 'output/folder' }), using default ${DEFAULT_BASE_FOLDER}`\n        );\n        this._baseDir = DEFAULT_BASE_FOLDER;\n      }\n    }\n    return this._baseDir;\n  }\n\n  private async cleanBaseFolder(): Promise<void> {\n    await util.deleteDir(this.baseDir);\n    await util.mkdir(this.baseDir);\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/html-reporter/src/index.ts":{"language":"typescript","mutants":[{"id":"30","location":{"end":{"column":94,"line":5},"start":{"column":31,"line":5}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage"},{"id":"31","location":{"end":{"column":78,"line":5},"start":{"column":72,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"}],"source":"import { declareClassPlugin, PluginKind } from '@stryker-mutator/api/plugin';\n\nimport HtmlReporter from './HtmlReporter';\n\nexport const strykerPlugins = [declareClassPlugin(PluginKind.Reporter, 'html', HtmlReporter)];\n"},"/home/runner/work/stryker/stryker/packages/html-reporter/src/templates/bindMutationTestReport.ts":{"language":"typescript","mutants":[{"id":"32","location":{"end":{"column":2,"line":5},"start":{"column":93,"line":3}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"33","location":{"end":{"column":98,"line":4},"start":{"column":10,"line":4}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import { mutationTestReportSchema } from '@stryker-mutator/api/report';\n\nexport function bindMutationTestReport(report: mutationTestReportSchema.MutationTestResult) {\n  return `document.querySelector('mutation-test-report-app').report = ${JSON.stringify(report)};`;\n}\n"},"/home/runner/work/stryker/stryker/packages/html-reporter/src/util.ts":{"language":"typescript","mutants":[{"id":"34","location":{"end":{"column":2,"line":17},"start":{"column":83,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"35","location":{"end":{"column":4,"line":16},"start":{"column":49,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage"},{"id":"36","location":{"end":{"column":26,"line":12},"start":{"column":19,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"37","location":{"end":{"column":27,"line":13},"start":{"column":20,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"38","location":{"end":{"column":24,"line":15},"start":{"column":19,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"},{"id":"39","location":{"end":{"column":2,"line":26},"start":{"column":68,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"40","location":{"end":{"column":57,"line":25},"start":{"column":51,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage"}],"source":"import * as path from 'path';\nimport { promisify } from 'util';\n\nimport { fsAsPromised } from '@stryker-mutator/util';\nimport * as mkdirp from 'mkdirp';\nimport * as rimraf from 'rimraf';\n\nexport function copyFile(fromFilename: string, toFilename: string): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    const readStream = fsAsPromised.createReadStream(fromFilename);\n    const writeStream = fsAsPromised.createWriteStream(toFilename);\n    readStream.on('error', reject);\n    writeStream.on('error', reject);\n    readStream.pipe(writeStream);\n    readStream.on('end', resolve);\n  });\n}\n\nexport const deleteDir = promisify(rimraf);\n\nexport const mkdir = promisify(mkdirp);\n\nexport async function writeFile(fileName: string, content: string) {\n  await mkdir(path.dirname(fileName));\n  await fsAsPromised.writeFile(fileName, content, 'utf8');\n}\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}}