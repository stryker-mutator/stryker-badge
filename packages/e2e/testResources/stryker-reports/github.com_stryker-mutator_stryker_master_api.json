{"files":{"/home/runner/work/stryker/stryker/packages/api/src/config/Config.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":4,"line":22},"start":{"column":29,"line":17}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"1","location":{"end":{"column":28,"line":18},"start":{"column":5,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2","location":{"end":{"column":42,"line":19},"start":{"column":5,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3","location":{"end":{"column":45,"line":20},"start":{"column":5,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"4","location":{"end":{"column":41,"line":21},"start":{"column":5,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"5","location":{"end":{"column":52,"line":28},"start":{"column":30,"line":28}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"6","location":{"end":{"column":51,"line":28},"start":{"column":31,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"7","location":{"end":{"column":58,"line":29},"start":{"column":32,"line":29}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"8","location":{"end":{"column":43,"line":29},"start":{"column":33,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"9","location":{"end":{"column":57,"line":29},"start":{"column":45,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"10","location":{"end":{"column":61,"line":30},"start":{"column":56,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"11","location":{"end":{"column":40,"line":31},"start":{"column":31,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"12","location":{"end":{"column":60,"line":33},"start":{"column":48,"line":33}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"13","location":{"end":{"column":36,"line":34},"start":{"column":34,"line":34}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"14","location":{"end":{"column":44,"line":36},"start":{"column":40,"line":36}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"15","location":{"end":{"column":4,"line":41},"start":{"column":48,"line":37}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"16","location":{"end":{"column":44,"line":43},"start":{"column":40,"line":43}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"17","location":{"end":{"column":4,"line":50},"start":{"column":40,"line":47}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"18","location":{"end":{"column":64,"line":48},"start":{"column":14,"line":48}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"19","location":{"end":{"column":46,"line":51},"start":{"column":32,"line":51}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"20","location":{"end":{"column":4,"line":65},"start":{"column":54,"line":53}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"21","location":{"end":{"column":18,"line":54},"start":{"column":9,"line":54}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"22","location":{"end":{"column":18,"line":54},"start":{"column":9,"line":54}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"23","location":{"end":{"column":6,"line":64},"start":{"column":20,"line":54}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"24","location":{"end":{"column":8,"line":63},"start":{"column":45,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"25","location":{"end":{"column":41,"line":56},"start":{"column":13,"line":56}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"26","location":{"end":{"column":41,"line":56},"start":{"column":13,"line":56}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"27","location":{"end":{"column":31,"line":56},"start":{"column":28,"line":56}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"28","location":{"end":{"column":10,"line":62},"start":{"column":43,"line":56}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"29","location":{"end":{"column":34,"line":57},"start":{"column":15,"line":57}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"30","location":{"end":{"column":34,"line":57},"start":{"column":15,"line":57}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"31","location":{"end":{"column":22,"line":57},"start":{"column":19,"line":57}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"32","location":{"end":{"column":34,"line":57},"start":{"column":23,"line":57}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"33","location":{"end":{"column":12,"line":59},"start":{"column":36,"line":57}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"34","location":{"end":{"column":60,"line":58},"start":{"column":25,"line":58}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"35","location":{"end":{"column":12,"line":61},"start":{"column":18,"line":59}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import { LogLevel, MutationScoreThresholds, MutatorDescriptor, StrykerOptions, DashboardOptions } from '../../core';\nimport { ReportType } from '../core/DashboardOptions';\n\n/**\n * When configuring stryker, every option is optional\n * Including deep properties like `dashboard.project`.\n * That's why we use a `DeepPartial` mapped type here.\n */\ntype DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\nexport default class Config implements StrykerOptions {\n  [customConfig: string]: any;\n\n  public files: string[];\n  public mutate: string[] = [\n    '{src,lib}/**/*.js?(x)',\n    '!{src,lib}/**/__tests__/**/*.js?(x)',\n    '!{src,lib}/**/?(*.)+(spec|test).js?(x)',\n    '!{src,lib}/**/*+(Spec|Test).js?(x)'\n  ];\n\n  public logLevel: LogLevel = LogLevel.Information;\n  public fileLogLevel: LogLevel = LogLevel.Off;\n  public timeoutMS = 5000;\n  public timeoutFactor = 1.5;\n  public plugins: string[] = ['@stryker-mutator/*'];\n  public reporters: string[] = ['progress', 'clear-text'];\n  public coverageAnalysis: 'perTest' | 'all' | 'off' = 'off';\n  public testRunner: string = 'command';\n  public testFramework: string;\n  public mutator: string | MutatorDescriptor = 'javascript';\n  public transpilers: string[] = [];\n  public maxConcurrentTestRunners: number = Infinity;\n  public symlinkNodeModules: boolean = true;\n  public thresholds: MutationScoreThresholds = {\n    break: null,\n    high: 80,\n    low: 60\n  };\n\n  public allowConsoleColors: boolean = true;\n  /**\n   * The options for the 'dashboard' reporter\n   */\n  public dashboard: DashboardOptions = {\n    baseUrl: 'https://dashboard.stryker-mutator.io/api/reports',\n    reportType: ReportType.MutationScore\n  };\n  public tempDirName: string = '.stryker-tmp';\n\n  public set(newConfig: DeepPartial<StrykerOptions>) {\n    if (newConfig) {\n      Object.keys(newConfig).forEach(key => {\n        if (newConfig[key] !== undefined) {\n          if (key === 'dashboard') {\n            this[key] = { ...this[key], ...newConfig[key] };\n          } else {\n            this[key] = newConfig[key];\n          }\n        }\n      });\n    }\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/api/src/core/DashboardOptions.ts":{"language":"typescript","mutants":[{"id":"36","location":{"end":{"column":16,"line":28},"start":{"column":10,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"37","location":{"end":{"column":34,"line":29},"start":{"column":19,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"38","location":{"end":{"column":90,"line":32},"start":{"column":47,"line":32}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"}],"source":"/**\n * The options for the dashboard reporter.\n */\nexport interface DashboardOptions {\n  /**\n   * Indicates which project to use if the \"dashboard\" reporter is enabled.\n   */\n  project?: string;\n  /**\n   * Indicates which version to use if the \"dashboard\" reporter is enabled.\n   */\n  version?: string;\n  /**\n   * Indicates which module to use if the \"dashboard\" reporter is enabled.\n   */\n  module?: string;\n  /**\n   * Indicates the base url of the stryker dashboard.\n   */\n  baseUrl: string;\n  /**\n   * Indicates wether to send a full report (inc. source code and mutant results) or only the mutation score.\n   */\n  reportType: ReportType;\n}\n\nexport enum ReportType {\n  Full = 'full',\n  MutationScore = 'mutationScore'\n}\n\nexport const ALL_REPORT_TYPES = Object.freeze([ReportType.Full, ReportType.MutationScore]);\n"},"/home/runner/work/stryker/stryker/packages/api/src/core/File.ts":{"language":"typescript","mutants":[{"id":"39","location":{"end":{"column":4,"line":20},"start":{"column":71,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"40","location":{"end":{"column":36,"line":14},"start":{"column":9,"line":14}},"mutatorName":"ConditionalExpression","replacement":"true","status":"CompileError"},{"id":"41","location":{"end":{"column":36,"line":14},"start":{"column":9,"line":14}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"42","location":{"end":{"column":27,"line":14},"start":{"column":24,"line":14}},"mutatorName":"EqualityOperator","replacement":"!==","status":"CompileError"},{"id":"43","location":{"end":{"column":36,"line":14},"start":{"column":28,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"44","location":{"end":{"column":6,"line":17},"start":{"column":38,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"45","location":{"end":{"column":6,"line":19},"start":{"column":12,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"46","location":{"end":{"column":4,"line":27},"start":{"column":32,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"47","location":{"end":{"column":4,"line":37},"start":{"column":36,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"48","location":{"end":{"column":27,"line":33},"start":{"column":9,"line":33}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"49","location":{"end":{"column":27,"line":33},"start":{"column":9,"line":33}},"mutatorName":"ConditionalExpression","replacement":"false","status":"CompileError"},{"id":"50","location":{"end":{"column":27,"line":33},"start":{"column":9,"line":33}},"mutatorName":"BooleanLiteral","replacement":"this._textContent","status":"CompileError"},{"id":"51","location":{"end":{"column":6,"line":35},"start":{"column":29,"line":33}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"/**\n * Represents a file within Stryker. Could be a strictly in-memory file.\n */\nexport default class File {\n  private _textContent: string | undefined;\n  private readonly _content: Buffer;\n\n  /**\n   * Creates a new File to be used within Stryker.\n   * @param name The full name of the file (inc path)\n   * @param content The buffered or string content of the file\n   */\n  constructor(public readonly name: string, content: Buffer | string) {\n    if (typeof content === 'string') {\n      this._content = Buffer.from(content);\n      this._textContent = content;\n    } else {\n      this._content = content;\n    }\n  }\n\n  /**\n   * Gets the underlying content as buffer.\n   */\n  public get content(): Buffer {\n    return this._content;\n  }\n\n  /**\n   * Gets the underlying content as string using utf8 encoding.\n   */\n  public get textContent(): string {\n    if (!this._textContent) {\n      this._textContent = this.content.toString();\n    }\n    return this._textContent;\n  }\n}\n"},"/home/runner/work/stryker/stryker/packages/api/src/core/LogLevel.ts":{"language":"typescript","mutants":[{"id":"52","location":{"end":{"column":14,"line":2},"start":{"column":9,"line":2}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"53","location":{"end":{"column":18,"line":3},"start":{"column":11,"line":3}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"54","location":{"end":{"column":18,"line":4},"start":{"column":11,"line":4}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"55","location":{"end":{"column":19,"line":5},"start":{"column":13,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"56","location":{"end":{"column":23,"line":6},"start":{"column":17,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"57","location":{"end":{"column":18,"line":7},"start":{"column":11,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"58","location":{"end":{"column":18,"line":8},"start":{"column":11,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"enum LogLevel {\n  Off = 'off',\n  Fatal = 'fatal',\n  Error = 'error',\n  Warning = 'warn',\n  Information = 'info',\n  Debug = 'debug',\n  Trace = 'trace'\n}\n\nexport default LogLevel;\n"},"/home/runner/work/stryker/stryker/packages/api/src/plugin/PluginKind.ts":{"language":"typescript","mutants":[{"id":"59","location":{"end":{"column":32,"line":5},"start":{"column":18,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"60","location":{"end":{"column":28,"line":6},"start":{"column":16,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"61","location":{"end":{"column":34,"line":7},"start":{"column":19,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"62","location":{"end":{"column":28,"line":8},"start":{"column":16,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"63","location":{"end":{"column":22,"line":9},"start":{"column":13,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"64","location":{"end":{"column":24,"line":10},"start":{"column":14,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"/**\n * The plugin kinds supported by Stryker\n */\nexport enum PluginKind {\n  ConfigEditor = 'ConfigEditor',\n  TestRunner = 'TestRunner',\n  TestFramework = 'TestFramework',\n  Transpiler = 'Transpiler',\n  Mutator = 'Mutator',\n  Reporter = 'Reporter'\n}\n"},"/home/runner/work/stryker/stryker/packages/api/src/plugin/Plugins.ts":{"language":"typescript","mutants":[{"id":"65","location":{"end":{"column":2,"line":61},"start":{"column":37,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"66","location":{"end":{"column":4,"line":60},"start":{"column":10,"line":56}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"},{"id":"67","location":{"end":{"column":2,"line":79},"start":{"column":39,"line":73}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"68","location":{"end":{"column":4,"line":78},"start":{"column":10,"line":74}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"CompileError"}],"source":"import { InjectableClass, InjectableFunction, InjectionToken } from 'typed-inject';\n\nimport { ConfigEditor } from '../../config';\nimport { Mutator } from '../../mutant';\nimport { Reporter } from '../../report';\nimport { TestFramework } from '../../test_framework';\nimport { TestRunner } from '../../test_runner';\nimport { Transpiler } from '../../transpile';\n\nimport { PluginContexts } from './Contexts';\nimport { PluginKind } from './PluginKind';\n\n/**\n * Represents a StrykerPlugin\n */\nexport type Plugin<TPluginKind extends PluginKind> =\n  | FactoryPlugin<TPluginKind, Array<InjectionToken<PluginContexts[TPluginKind]>>>\n  | ClassPlugin<TPluginKind, Array<InjectionToken<PluginContexts[TPluginKind]>>>;\n\n/**\n * Represents a plugin that is created with a factory method\n */\nexport interface FactoryPlugin<TPluginKind extends PluginKind, Tokens extends Array<InjectionToken<PluginContexts[TPluginKind]>>> {\n  readonly kind: TPluginKind;\n  readonly name: string;\n  /**\n   * The factory method used to create the plugin\n   */\n  readonly factory: InjectableFunction<PluginContexts[TPluginKind], PluginInterfaces[TPluginKind], Tokens>;\n}\n\n/**\n * Represents a plugin that is created by instantiating a class.\n */\nexport interface ClassPlugin<TPluginKind extends PluginKind, Tokens extends Array<InjectionToken<PluginContexts[TPluginKind]>>> {\n  readonly kind: TPluginKind;\n  readonly name: string;\n  /**\n   * The prototype function (class) used to create the plugin.\n   * Not called `class` here, because that is a keyword\n   */\n  readonly injectableClass: InjectableClass<PluginContexts[TPluginKind], PluginInterfaces[TPluginKind], Tokens>;\n}\n\n/**\n * Declare a class plugin. Use this method in order to type check the dependency graph of your plugin\n * @param kind The plugin kind\n * @param name The name of the plugin\n * @param injectableClass The class to be instantiated for the plugin\n */\nexport function declareClassPlugin<TPluginKind extends PluginKind, Tokens extends Array<InjectionToken<PluginContexts[TPluginKind]>>>(\n  kind: TPluginKind,\n  name: string,\n  injectableClass: InjectableClass<PluginContexts[TPluginKind], PluginInterfaces[TPluginKind], Tokens>\n): ClassPlugin<TPluginKind, Tokens> {\n  return {\n    injectableClass,\n    kind,\n    name\n  };\n}\n\n/**\n * Declare a factory plugin. Use this method in order to type check the dependency graph of your plugin,\n * @param kind The plugin kind\n * @param name The name of the plugin\n * @param factory The factory used to instantiate the plugin\n */\nexport function declareFactoryPlugin<TPluginKind extends PluginKind, Tokens extends Array<InjectionToken<PluginContexts[TPluginKind]>>>(\n  kind: TPluginKind,\n  name: string,\n  factory: InjectableFunction<PluginContexts[TPluginKind], PluginInterfaces[TPluginKind], Tokens>\n): FactoryPlugin<TPluginKind, Tokens> {\n  return {\n    factory,\n    kind,\n    name\n  };\n}\n\n/**\n * Lookup type for plugin interfaces by kind.\n */\nexport interface PluginInterfaces {\n  [PluginKind.ConfigEditor]: ConfigEditor;\n  [PluginKind.Mutator]: Mutator;\n  [PluginKind.Reporter]: Reporter;\n  [PluginKind.TestFramework]: TestFramework;\n  [PluginKind.TestRunner]: TestRunner;\n  [PluginKind.Transpiler]: Transpiler;\n}\n\n/**\n * Lookup type for plugins by kind.\n */\nexport type Plugins = {\n  [TPluginKind in keyof PluginInterfaces]: Plugin<TPluginKind>;\n};\n\n/**\n * Plugin resolver responsible to load plugins\n */\nexport interface PluginResolver {\n  resolve<T extends keyof Plugins>(kind: T, name: string): Plugins[T];\n  resolveAll<T extends keyof Plugins>(kind: T): Array<Plugins[T]>;\n}\n"},"/home/runner/work/stryker/stryker/packages/api/src/plugin/Scope.ts":{"language":"typescript","mutants":[{"id":"69","location":{"end":{"column":26,"line":2},"start":{"column":15,"line":2}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"70","location":{"end":{"column":26,"line":3},"start":{"column":15,"line":3}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"export enum Scope {\n  Transient = 'transient',\n  Singleton = 'singleton'\n}\n\n// Keep in sync with import { Scope } from '@typed-inject';\n"},"/home/runner/work/stryker/stryker/packages/api/src/plugin/tokens.ts":{"language":"typescript","mutants":[{"id":"71","location":{"end":{"column":2,"line":7},"start":{"column":55,"line":5}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"72","location":{"end":{"column":61,"line":9},"start":{"column":52,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"73","location":{"end":{"column":67,"line":10},"start":{"column":56,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"CompileError"},{"id":"74","location":{"end":{"column":2,"line":25},"start":{"column":43,"line":15}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"75","location":{"end":{"column":39,"line":16},"start":{"column":28,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"76","location":{"end":{"column":33,"line":18},"start":{"column":25,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"77","location":{"end":{"column":55,"line":19},"start":{"column":36,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"78","location":{"end":{"column":35,"line":20},"start":{"column":26,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"79","location":{"end":{"column":49,"line":21},"start":{"column":33,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"80","location":{"end":{"column":55,"line":22},"start":{"column":36,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"81","location":{"end":{"column":53,"line":23},"start":{"column":35,"line":23}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"82","location":{"end":{"column":2,"line":38},"start":{"column":64,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"}],"source":"/**\n * Define a string literal.\n * @param value Token literal\n */\nfunction stringLiteral<T extends string>(value: T): T {\n  return value;\n}\n\nconst target: import('typed-inject').TargetToken = '$target';\nconst injector: import('typed-inject').InjectorToken = '$injector';\n\n/**\n * Common tokens used for dependency injection (see typed-inject readme for more information)\n */\nexport const commonTokens = Object.freeze({\n  getLogger: stringLiteral('getLogger'),\n  injector,\n  logger: stringLiteral('logger'),\n  mutatorDescriptor: stringLiteral('mutatorDescriptor'),\n  options: stringLiteral('options'),\n  pluginResolver: stringLiteral('pluginResolver'),\n  produceSourceMaps: stringLiteral('produceSourceMaps'),\n  sandboxFileNames: stringLiteral('sandboxFileNames'),\n  target\n});\n\n/**\n * Helper method to create string literal tuple type.\n * @example\n * ```ts\n * const inject = tokens('foo', 'bar');\n * const inject2: ['foo', 'bar'] = ['foo', 'bar'];\n * ```\n * @param tokens The tokens as args\n */\nexport function tokens<TS extends string[]>(...tokens: TS): TS {\n  return tokens;\n}\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}}